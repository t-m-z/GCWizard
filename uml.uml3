@startuml
set namespaceSeparator ::

class "gc_wizard::application::app_builder.dart::AppBuilder" {
  +MaterialApp Function(BuildContext) builder
  +_AppBuilderState createState()
  {static} +_AppBuilderState of()
}

"gc_wizard::application::app_builder.dart::AppBuilder" o-- "null::MaterialApp Function(BuildContext)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::app_builder.dart::AppBuilder"

class "gc_wizard::application::app_builder.dart::_AppBuilderState" {
  +Widget build()
  +void rebuild()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::app_builder.dart::_AppBuilderState"

class "gc_wizard::application::category_views::all_tools_view.dart::MainView" {
  +_MainViewState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::application::category_views::all_tools_view.dart::MainView"

class "gc_wizard::application::category_views::all_tools_view.dart::_MainViewState" {
  -bool _isSearching
  -TextEditingController _searchController
  -GlobalKey<ScaffoldState> _scaffoldKey
  -String _searchText
  -int _SHOW_SUPPORT_HINT_EVERY_N
  +void initState()
  +void dispose()
  +Widget build()
  -NoAnimationMaterialPageRoute<GCWTool>? _checkDeepLink()
  -IconButton _buildSearchActionButton()
  -Widget _buildTitleAndSearchTextField()
  -IconButton _buildIcon()
  -List<GCWTool> _getSearchedList()
}

"gc_wizard::application::category_views::all_tools_view.dart::_MainViewState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::application::category_views::all_tools_view.dart::_MainViewState" o-- "flutter::src::widgets::framework.dart::GlobalKey<ScaffoldState>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::category_views::all_tools_view.dart::_MainViewState"

class "gc_wizard::application::category_views::favorites.dart::Favorites" {
  {static} -List<String> _favoritedToolList
  {static} +void update()
  {static} +void initialize()
  {static} +bool isFavorite()
  {static} +List<GCWTool> favoritedGCWTools()
}

class "gc_wizard::application::category_views::favorites.dart::FavoriteChangeStatus" {
  +int index
  {static} +List<FavoriteChangeStatus> values
  {static} +FavoriteChangeStatus ADD
  {static} +FavoriteChangeStatus REMOVE
}

"gc_wizard::application::category_views::favorites.dart::FavoriteChangeStatus" o-- "gc_wizard::application::category_views::favorites.dart::FavoriteChangeStatus"
"dart::core::Enum" <|-- "gc_wizard::application::category_views::favorites.dart::FavoriteChangeStatus"

class "gc_wizard::application::category_views::selector_lists::apparent_temperature_selection.dart::ApparentTemperatureSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::apparent_temperature_selection.dart::ApparentTemperatureSelection"

class "gc_wizard::application::category_views::selector_lists::astronomy_selection.dart::AstronomySelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::astronomy_selection.dart::AstronomySelection"

class "gc_wizard::application::category_views::selector_lists::babylon_numbers_selection.dart::BabylonNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::babylon_numbers_selection.dart::BabylonNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::base_selection.dart::BaseSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::base_selection.dart::BaseSelection"

class "gc_wizard::application::category_views::selector_lists::bcd_selection.dart::BCDSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::bcd_selection.dart::BCDSelection"

class "gc_wizard::application::category_views::selector_lists::beaufort_selection.dart::BeaufortSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::beaufort_selection.dart::BeaufortSelection"

class "gc_wizard::application::category_views::selector_lists::braille_selection.dart::BrailleSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::braille_selection.dart::BrailleSelection"

class "gc_wizard::application::category_views::selector_lists::bundeswehr_talkingboard.dart::BundeswehrTalkingBoardSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::bundeswehr_talkingboard.dart::BundeswehrTalkingBoardSelection"

class "gc_wizard::application::category_views::selector_lists::ccitt_selection.dart::CCITTSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::ccitt_selection.dart::CCITTSelection"

class "gc_wizard::application::category_views::selector_lists::cistercian_numbers_selection.dart::CistercianNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::cistercian_numbers_selection.dart::CistercianNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::colors_selection.dart::ColorsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::colors_selection.dart::ColorsSelection"

class "gc_wizard::application::category_views::selector_lists::combinatorics_selection.dart::CombinatoricsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::combinatorics_selection.dart::CombinatoricsSelection"

class "gc_wizard::application::category_views::selector_lists::coords_selection.dart::CoordsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::coords_selection.dart::CoordsSelection"

class "gc_wizard::application::category_views::selector_lists::countries_selection.dart::CountriesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::countries_selection.dart::CountriesSelection"

class "gc_wizard::application::category_views::selector_lists::crosssum_selection.dart::CrossSumSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::crosssum_selection.dart::CrossSumSelection"

class "gc_wizard::application::category_views::selector_lists::cryptography_selection.dart::CryptographySelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::cryptography_selection.dart::CryptographySelection"

class "gc_wizard::application::category_views::selector_lists::dates_selection.dart::DatesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::dates_selection.dart::DatesSelection"

class "gc_wizard::application::category_views::selector_lists::dna_selection.dart::DNASelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::dna_selection.dart::DNASelection"

class "gc_wizard::application::category_views::selector_lists::easter_selection.dart::EasterSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::easter_selection.dart::EasterSelection"

class "gc_wizard::application::category_views::selector_lists::esoteric_programminglanguages_selection.dart::EsotericProgrammingLanguageSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::esoteric_programminglanguages_selection.dart::EsotericProgrammingLanguageSelection"

class "gc_wizard::application::category_views::selector_lists::e_selection.dart::ESelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::e_selection.dart::ESelection"

class "gc_wizard::application::category_views::selector_lists::games_selection.dart::GamesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::games_selection.dart::GamesSelection"

class "gc_wizard::application::category_views::selector_lists::general_codebreakers_selection.dart::GeneralCodebreakersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::general_codebreakers_selection.dart::GeneralCodebreakersSelection"

class "gc_wizard::application::category_views::selector_lists::hash_selection.dart::HashSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::hash_selection.dart::HashSelection"

class "gc_wizard::application::category_views::selector_lists::icecodes_selection.dart::IceCodesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::icecodes_selection.dart::IceCodesSelection"

class "gc_wizard::application::category_views::selector_lists::imagesandfiles_selection.dart::ImagesAndFilesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::imagesandfiles_selection.dart::ImagesAndFilesSelection"

class "gc_wizard::application::category_views::selector_lists::keyboard_selection.dart::KeyboardSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::keyboard_selection.dart::KeyboardSelection"

class "gc_wizard::application::category_views::selector_lists::language_games_selection.dart::LanguageGamesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::language_games_selection.dart::LanguageGamesSelection"

class "gc_wizard::application::category_views::selector_lists::maya_calendar_selection.dart::MayaCalendarSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::maya_calendar_selection.dart::MayaCalendarSelection"

class "gc_wizard::application::category_views::selector_lists::maya_numbers_selection.dart::MayaNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::maya_numbers_selection.dart::MayaNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::miscellaneous_selection.dart::MiscellaneousSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::miscellaneous_selection.dart::MiscellaneousSelection"

class "gc_wizard::application::category_views::selector_lists::morse_selection.dart::MorseSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::morse_selection.dart::MorseSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_bell_selection.dart::NumberSequenceBellSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_bell_selection.dart::NumberSequenceBellSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_catalan_selection.dart::NumberSequenceCatalanSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_catalan_selection.dart::NumberSequenceCatalanSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_factorial_selection.dart::NumberSequenceFactorialSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_factorial_selection.dart::NumberSequenceFactorialSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_fermat_selection.dart::NumberSequenceFermatSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_fermat_selection.dart::NumberSequenceFermatSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_fibonacci_selection.dart::NumberSequenceFibonacciSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_fibonacci_selection.dart::NumberSequenceFibonacciSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_happynumbers_selection.dart::NumberSequenceHappyNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_happynumbers_selection.dart::NumberSequenceHappyNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthallucas_selection.dart::NumberSequenceJacobsthalLucasSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthallucas_selection.dart::NumberSequenceJacobsthalLucasSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthaloblong_selection.dart::NumberSequenceJacobsthalOblongSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthaloblong_selection.dart::NumberSequenceJacobsthalOblongSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthal_selection.dart::NumberSequenceJacobsthalSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_jacobsthal_selection.dart::NumberSequenceJacobsthalSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_lucas_selection.dart::NumberSequenceLucasSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_lucas_selection.dart::NumberSequenceLucasSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_luckynumbers_selection.dart::NumberSequenceLuckyNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_luckynumbers_selection.dart::NumberSequenceLuckyNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_lychrel_selection.dart::NumberSequenceLychrelSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_lychrel_selection.dart::NumberSequenceLychrelSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenneexponents_selection.dart::NumberSequenceMersenneExponentsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenneexponents_selection.dart::NumberSequenceMersenneExponentsSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersennefermat_selection.dart::NumberSequenceMersenneFermatSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersennefermat_selection.dart::NumberSequenceMersenneFermatSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenneprimes_selection.dart::NumberSequenceMersennePrimesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenneprimes_selection.dart::NumberSequenceMersennePrimesSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenne_selection.dart::NumberSequenceMersenneSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_mersenne_selection.dart::NumberSequenceMersenneSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_pelllucas_selection.dart::NumberSequencePellLucasSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_pelllucas_selection.dart::NumberSequencePellLucasSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_pell_selection.dart::NumberSequencePellSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_pell_selection.dart::NumberSequencePellSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_perfectnumbers_selection.dart::NumberSequencePerfectNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_perfectnumbers_selection.dart::NumberSequencePerfectNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_permutableprimes_selection.dart::NumberSequencePermutablePrimesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_permutableprimes_selection.dart::NumberSequencePermutablePrimesSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_primarypseudoperfectnumbers_selection.dart::NumberSequencePrimaryPseudoPerfectNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_primarypseudoperfectnumbers_selection.dart::NumberSequencePrimaryPseudoPerfectNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_recaman_selection.dart::NumberSequenceRecamanSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_recaman_selection.dart::NumberSequenceRecamanSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_selection.dart::NumberSequenceSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_selection.dart::NumberSequenceSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_sublimenumbers_selection.dart::NumberSequenceSublimeNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_sublimenumbers_selection.dart::NumberSequenceSublimeNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_superperfectnumbers_selection.dart::NumberSequenceSuperPerfectNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_superperfectnumbers_selection.dart::NumberSequenceSuperPerfectNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_weirdnumbers_selection.dart::NumberSequenceWeirdNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::number_sequences::numbersequence_weirdnumbers_selection.dart::NumberSequenceWeirdNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::numeral_words_selection.dart::NumeralWordsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::numeral_words_selection.dart::NumeralWordsSelection"

class "gc_wizard::application::category_views::selector_lists::periodic_table_selection.dart::PeriodicTableSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::periodic_table_selection.dart::PeriodicTableSelection"

class "gc_wizard::application::category_views::selector_lists::phi_selection.dart::PhiSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::phi_selection.dart::PhiSelection"

class "gc_wizard::application::category_views::selector_lists::pi_selection.dart::PiSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::pi_selection.dart::PiSelection"

class "gc_wizard::application::category_views::selector_lists::predator_selection.dart::PredatorSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::predator_selection.dart::PredatorSelection"

class "gc_wizard::application::category_views::selector_lists::primes_selection.dart::PrimesSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::primes_selection.dart::PrimesSelection"

class "gc_wizard::application::category_views::selector_lists::resistor_selection.dart::ResistorSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::resistor_selection.dart::ResistorSelection"

class "gc_wizard::application::category_views::selector_lists::roman_numbers_selection.dart::RomanNumbersSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::roman_numbers_selection.dart::RomanNumbersSelection"

class "gc_wizard::application::category_views::selector_lists::rotation_selection.dart::RotationSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::rotation_selection.dart::RotationSelection"

class "gc_wizard::application::category_views::selector_lists::rsa_selection.dart::RSASelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::rsa_selection.dart::RSASelection"

class "gc_wizard::application::category_views::selector_lists::scienceandtechnology_selection.dart::ScienceAndTechnologySelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::scienceandtechnology_selection.dart::ScienceAndTechnologySelection"

class "gc_wizard::application::category_views::selector_lists::scrabble_selection.dart::ScrabbleSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::scrabble_selection.dart::ScrabbleSelection"

class "gc_wizard::application::category_views::selector_lists::segmentdisplay_selection.dart::SegmentDisplaySelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::segmentdisplay_selection.dart::SegmentDisplaySelection"

class "gc_wizard::application::category_views::selector_lists::shadoks_selection.dart::ShadoksSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::shadoks_selection.dart::ShadoksSelection"

class "gc_wizard::application::category_views::selector_lists::silverratio_selection.dart::SilverRatioSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::silverratio_selection.dart::SilverRatioSelection"

class "gc_wizard::application::category_views::selector_lists::spelling_alphabets_selection.dart::SpellingAlphabetsSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::spelling_alphabets_selection.dart::SpellingAlphabetsSelection"

class "gc_wizard::application::category_views::selector_lists::sqrt2_selection.dart::SQRT2Selection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::sqrt2_selection.dart::SQRT2Selection"

class "gc_wizard::application::category_views::selector_lists::sqrt3_selection.dart::SQRT3Selection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::sqrt3_selection.dart::SQRT3Selection"

class "gc_wizard::application::category_views::selector_lists::sqrt5_selection.dart::SQRT5Selection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::sqrt5_selection.dart::SQRT5Selection"

class "gc_wizard::application::category_views::selector_lists::symbol_table_selection.dart::SymbolTableSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::symbol_table_selection.dart::SymbolTableSelection"

class "gc_wizard::application::category_views::selector_lists::telegraph_selection.dart::TelegraphSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::telegraph_selection.dart::TelegraphSelection"

class "gc_wizard::application::category_views::selector_lists::teletypewriter_selection.dart::TeletypewriterSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::teletypewriter_selection.dart::TeletypewriterSelection"

class "gc_wizard::application::category_views::selector_lists::tomtom_selection.dart::TomTomSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::tomtom_selection.dart::TomTomSelection"

class "gc_wizard::application::category_views::selector_lists::vanity_selection.dart::VanitySelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::vanity_selection.dart::VanitySelection"

class "gc_wizard::application::category_views::selector_lists::vigenere_selection.dart::VigenereSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::vigenere_selection.dart::VigenereSelection"

class "gc_wizard::application::category_views::selector_lists::wherigo_urwigo_selection.dart::WherigoSelection" {
  +Widget build()
}

"gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" <|-- "gc_wizard::application::category_views::selector_lists::wherigo_urwigo_selection.dart::WherigoSelection"

class "gc_wizard::application::i18n::logic::app_language.dart::AppLanguage" {
  {static} -Locale _defaultAppLocale
  -Locale _appLocale
  +Locale appLocal
  +dynamic fetchLocale()
  -Locale _getPlatformLocale()
  -void _changeLocale()
  +void changeLanguage()
}

"gc_wizard::application::i18n::logic::app_language.dart::AppLanguage" o-- "dart::ui::Locale"
"flutter::src::foundation::change_notifier.dart::ChangeNotifier" <|-- "gc_wizard::application::i18n::logic::app_language.dart::AppLanguage"

class "gc_wizard::application::i18n::logic::app_localizations.dart::AppLocalizations" {
  -Locale _locale
  -Map<String, String> _localizedStrings
  -Map<String, String> _defaultLocalizedStrings
  {static} +LocalizationsDelegate<AppLocalizations> delegate
  {static} -AppLocalizations? _of()
  +dynamic load()
  +dynamic loadLang()
  -String? _translate()
  -String? _translateDefault()
}

"gc_wizard::application::i18n::logic::app_localizations.dart::AppLocalizations" o-- "dart::ui::Locale"
"gc_wizard::application::i18n::logic::app_localizations.dart::AppLocalizations" o-- "flutter::src::widgets::localizations.dart::LocalizationsDelegate<AppLocalizations>"

class "gc_wizard::application::i18n::logic::app_localizations.dart::_AppLocalizationsDelegate" {
  +bool isSupported()
  +dynamic load()
  +bool shouldReload()
}

"flutter::src::widgets::localizations.dart::LocalizationsDelegate" <|-- "gc_wizard::application::i18n::logic::app_localizations.dart::_AppLocalizationsDelegate"

class "gc_wizard::application::main_menu::about.dart::About" {
  +_AboutState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::main_menu::about.dart::About"

class "gc_wizard::application::main_menu::about.dart::_AboutState" {
  -PackageInfo _packageInfo
  +void initState()
  -dynamic _initPackageInfo()
  -Container _buildUrl()
  +Widget build()
}

"gc_wizard::application::main_menu::about.dart::_AboutState" o-- "package_info_plus::package_info_plus.dart::PackageInfo"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::main_menu::about.dart::_AboutState"

class "gc_wizard::application::main_menu::call_for_contribution.dart::CallForContribution" {
  +_CallForContributionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::main_menu::call_for_contribution.dart::CallForContribution"

class "gc_wizard::application::main_menu::call_for_contribution.dart::_CallForContributionState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::main_menu::call_for_contribution.dart::_CallForContributionState"

class "gc_wizard::application::main_menu::changelog.dart::Changelog" {
  +_ChangelogState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::main_menu::changelog.dart::Changelog"

class "gc_wizard::application::main_menu::changelog.dart::_ChangelogState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::main_menu::changelog.dart::_ChangelogState"

class "gc_wizard::application::main_menu::licenses.dart::Licenses" {
  +_LicensesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::main_menu::licenses.dart::Licenses"

class "gc_wizard::application::main_menu::licenses.dart::_LicensesState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::main_menu::licenses.dart::_LicensesState"

class "gc_wizard::application::main_menu::mainmenuentry_stub.dart::MainMenuEntryStub" {
  +Widget content
  +_MainMenuEntryStubState createState()
}

"gc_wizard::application::main_menu::mainmenuentry_stub.dart::MainMenuEntryStub" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::main_menu::mainmenuentry_stub.dart::MainMenuEntryStub"

class "gc_wizard::application::main_menu::mainmenuentry_stub.dart::_MainMenuEntryStubState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::main_menu::mainmenuentry_stub.dart::_MainMenuEntryStubState"

class "gc_wizard::application::main_menu::main_menu.dart::_CategoryMetaData" {
  +GCWTool tool
  +String? toolName
  +IconData icon
}

"gc_wizard::application::main_menu::main_menu.dart::_CategoryMetaData" o-- "gc_wizard::common_widgets::gcw_tool.dart::GCWTool"
"gc_wizard::application::main_menu::main_menu.dart::_CategoryMetaData" o-- "flutter::src::widgets::icon_data.dart::IconData"

class "gc_wizard::application::navigation::navigation_service.dart::NavigationService" {
  +GlobalKey<NavigatorState> navigationKey
  {static} +NavigationService instance
  +dynamic navigateTo()
  +void goBack()
}

"gc_wizard::application::navigation::navigation_service.dart::NavigationService" o-- "flutter::src::widgets::framework.dart::GlobalKey<NavigatorState>"
"gc_wizard::application::navigation::navigation_service.dart::NavigationService" o-- "gc_wizard::application::navigation::navigation_service.dart::NavigationService"

class "gc_wizard::application::navigation::no_animation_material_page_route.dart::NoAnimationMaterialPageRoute" {
  +Widget buildTransitions()
}

"flutter::src::material::page.dart::MaterialPageRoute" <|-- "gc_wizard::application::navigation::no_animation_material_page_route.dart::NoAnimationMaterialPageRoute"

class "gc_wizard::application::settings::logic::default_settings.dart::PreferencesInitMode" {
  +int index
  {static} +List<PreferencesInitMode> values
  {static} +PreferencesInitMode STARTUP
  {static} +PreferencesInitMode REINIT_ALL
  {static} +PreferencesInitMode REINIT_SINGLE
}

"gc_wizard::application::settings::logic::default_settings.dart::PreferencesInitMode" o-- "gc_wizard::application::settings::logic::default_settings.dart::PreferencesInitMode"
"dart::core::Enum" <|-- "gc_wizard::application::settings::logic::default_settings.dart::PreferencesInitMode"

class "gc_wizard::application::settings::logic::preferences_utils.dart::PrefType" {
  +int index
  {static} +List<PrefType> values
  {static} +PrefType STRING
  {static} +PrefType STRINGLIST
  {static} +PrefType INT
  {static} +PrefType DOUBLE
  {static} +PrefType BOOL
}

"gc_wizard::application::settings::logic::preferences_utils.dart::PrefType" o-- "gc_wizard::application::settings::logic::preferences_utils.dart::PrefType"
"dart::core::Enum" <|-- "gc_wizard::application::settings::logic::preferences_utils.dart::PrefType"

class "gc_wizard::application::settings::widget::settings_coordinates.dart::CoordinatesSettings" {
  +_CoordinatesSettingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_coordinates.dart::CoordinatesSettings"

class "gc_wizard::application::settings::widget::settings_coordinates.dart::_CoordinatesSettingsState" {
  -CoordinateFormat _currentDefaultFormat
  -String _currentDefaultHemisphereLatitude
  -String _currentDefaultHemisphereLongitude
  -Ellipsoid _currentDefaultEllipsoid
  +void initState()
  +Widget build()
}

"gc_wizard::application::settings::widget::settings_coordinates.dart::_CoordinatesSettingsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::application::settings::widget::settings_coordinates.dart::_CoordinatesSettingsState" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_coordinates.dart::_CoordinatesSettingsState"

class "gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPicker" {
  +void Function(Ellipsoid) onChanged
  +_EllipsoidPickerState createState()
}

"gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPicker" o-- "null::void Function(Ellipsoid)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPicker"

class "gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState" {
  {static} -String _keyInverseFlattening
  {static} -String _keyFlattening
  {static} -String _keyMinorAxis
  -TextEditingController _firstCustomValueController
  -TextEditingController _secondCustomValueController
  -DoubleText _firstCustomValue
  -DoubleText _secondCustomValue
  -GCWSwitchPosition _currentMode
  -String _currentEllipsoidCustom2ndValue
  -Ellipsoid _currentStandardEllipsoid
  -Ellipsoid _currentEllipsoid
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -void _setCurrentEllipsoidAndEmitOnChange()
}

"gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_coordinates.dart::_EllipsoidPickerState"

class "gc_wizard::application::settings::widget::settings_general.dart::GeneralSettings" {
  +_GeneralSettingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_general.dart::GeneralSettings"

class "gc_wizard::application::settings::widget::settings_general.dart::_GeneralSettingsState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_general.dart::_GeneralSettingsState"

class "gc_wizard::application::settings::widget::settings_preferences.dart::SettingsPreferences" {
  +_SettingsPreferencesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_preferences.dart::SettingsPreferences"

class "gc_wizard::application::settings::widget::settings_preferences.dart::_SettingsPreferencesState" {
  -List<String> _keys
  -String? _editKey
  -Object? _editedValue
  -List<String> _expandedValues
  -List<TextEditingController> _controllers
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildPreferencesView()
  -GCWIconButton _buildEditSaveButton()
  -void _doOnSave()
  -bool _prefValueHasChanged()
  -Widget _buildEmptyButton()
  -GCWIconButton _buildUndoButton()
  -GCWButton _buildDefaultButton()
  -GCWIconButton _buildCopyButton()
  -Widget _buildEditView()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_preferences.dart::_SettingsPreferencesState"

class "gc_wizard::application::settings::widget::settings_saverestore.dart::SaveRestoreSettings" {
  +_SaveRestoreSettingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_saverestore.dart::SaveRestoreSettings"

class "gc_wizard::application::settings::widget::settings_saverestore.dart::_SaveRestoreSettingsState" {
  +Widget build()
  -dynamic _exportSettings()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_saverestore.dart::_SaveRestoreSettingsState"

class "gc_wizard::application::settings::widget::settings_tools.dart::ToolSettings" {
  +_ToolSettingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::application::settings::widget::settings_tools.dart::ToolSettings"

class "gc_wizard::application::settings::widget::settings_tools.dart::_ToolSettingsState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::application::settings::widget::settings_tools.dart::_ToolSettingsState"

abstract class "gc_wizard::application::theme::theme_colors.dart::ThemeColors" {
  +ThemeData base()
  +Color mainFont()
  +Color primaryBackground()
  +Color inputBackground()
  +Color secondary()
  +Color focused()
  +Color inActive()
  +Color textFieldHintText()
  +Color textFieldFill()
  +Color textFieldFillText()
  +Color hyperLinkText()
  +Color switchThumb1()
  +Color switchTrack1()
  +Color switchThumb2()
  +Color switchTrack2()
  +Color checkBoxActiveColor()
  +Color checkBoxFillColor()
  +Color checkBoxCheckColor()
  +Color checkBoxFocusColor()
  +Color checkBoxHoverColor()
  +Color checkBoxOverlayColor()
  +Color outputListOddRows()
  +Color listSubtitle()
  +Color iconImageBackground()
  +Color dialog()
  +Color dialogText()
  +Color messageBackground()
  +Color gridBackground()
  +Color formulaNumber()
  +Color formulaMath()
  +Color formulaVariable()
  +Color formulaError()
}

class "gc_wizard::application::theme::theme_colors.dart::ThemeType" {
  +int index
  {static} +List<ThemeType> values
  {static} +ThemeType DARK
  {static} +ThemeType LIGHT
}

"gc_wizard::application::theme::theme_colors.dart::ThemeType" o-- "gc_wizard::application::theme::theme_colors.dart::ThemeType"
"dart::core::Enum" <|-- "gc_wizard::application::theme::theme_colors.dart::ThemeType"

class "gc_wizard::application::theme::theme_colors.dart::_ThemeColorsDark" {
  {static} -Color _lightGray
  {static} -Color _gray
  {static} -Color _darkGray
  +ThemeData base()
  +Color secondary()
  +Color focused()
  +Color inActive()
  +Color inputBackground()
  +Color mainFont()
  +Color outputListOddRows()
  +Color dialog()
  +Color dialogText()
  +Color primaryBackground()
  +Color iconImageBackground()
  +Color textFieldHintText()
  +Color messageBackground()
  +Color switchThumb1()
  +Color switchTrack1()
  +Color switchThumb2()
  +Color switchTrack2()
  +Color checkBoxActiveColor()
  +Color checkBoxFillColor()
  +Color checkBoxCheckColor()
  +Color checkBoxFocusColor()
  +Color checkBoxHoverColor()
  +Color checkBoxOverlayColor()
  +Color listSubtitle()
  +Color gridBackground()
  +Color hyperLinkText()
  +Color textFieldFill()
  +Color textFieldFillText()
  +Color formulaNumber()
  +Color formulaVariable()
  +Color formulaMath()
  +Color formulaError()
}

"gc_wizard::application::theme::theme_colors.dart::_ThemeColorsDark" o-- "dart::ui::Color"
"gc_wizard::application::theme::theme_colors.dart::ThemeColors" <|-- "gc_wizard::application::theme::theme_colors.dart::_ThemeColorsDark"

class "gc_wizard::application::theme::theme_colors.dart::_ThemeColorsLight" {
  {static} -Color _creme
  {static} -Color _darkGray
  {static} -Color _gray
  {static} -Color _lightGray
  +ThemeData base()
  +Color secondary()
  +Color focused()
  +Color inActive()
  +Color inputBackground()
  +Color mainFont()
  +Color outputListOddRows()
  +Color dialog()
  +Color dialogText()
  +Color primaryBackground()
  +Color iconImageBackground()
  +Color textFieldHintText()
  +Color messageBackground()
  +Color switchThumb1()
  +Color switchTrack1()
  +Color switchThumb2()
  +Color switchTrack2()
  +Color checkBoxActiveColor()
  +Color checkBoxFillColor()
  +Color checkBoxCheckColor()
  +Color checkBoxFocusColor()
  +Color checkBoxHoverColor()
  +Color checkBoxOverlayColor()
  +Color listSubtitle()
  +Color gridBackground()
  +Color hyperLinkText()
  +Color textFieldFill()
  +Color textFieldFillText()
  +Color formulaNumber()
  +Color formulaVariable()
  +Color formulaMath()
  +Color formulaError()
}

"gc_wizard::application::theme::theme_colors.dart::_ThemeColorsLight" o-- "dart::ui::Color"
"gc_wizard::application::theme::theme_colors.dart::ThemeColors" <|-- "gc_wizard::application::theme::theme_colors.dart::_ThemeColorsLight"

abstract class "gc_wizard::application::webapi::api_mapper.dart::APIMapper" {
  +Map<String, String> webParameter
  +String Key
  +void setParams()
  +String doLogic()
  +Map<String, String> toMap()
  +Map<String, String> calculate()
  +String? getWebParameter()
  +String apiSpecification()
}

class "gc_wizard::application::webapi::api_mapper.dart::WEBPARAMETER" {
  +int index
  {static} +List<WEBPARAMETER> values
  {static} +WEBPARAMETER input
  {static} +WEBPARAMETER mode
  {static} +WEBPARAMETER parameter1
  {static} +WEBPARAMETER parameter2
  {static} +WEBPARAMETER fromformat
  {static} +WEBPARAMETER toformat
  {static} +WEBPARAMETER result
}

"gc_wizard::application::webapi::api_mapper.dart::WEBPARAMETER" o-- "gc_wizard::application::webapi::api_mapper.dart::WEBPARAMETER"
"dart::core::Enum" <|-- "gc_wizard::application::webapi::api_mapper.dart::WEBPARAMETER"

class "gc_wizard::application::webapi::api_mapper.dart::MODE" {
  +int index
  {static} +List<MODE> values
  {static} +MODE encode
  {static} +MODE decode
}

"gc_wizard::application::webapi::api_mapper.dart::MODE" o-- "gc_wizard::application::webapi::api_mapper.dart::MODE"
"dart::core::Enum" <|-- "gc_wizard::application::webapi::api_mapper.dart::MODE"

class "gc_wizard::application::webapi::deeplinks::deeplinks.dart::WebParameter" {
  +String title
  +Map<String, String> arguments
  +RouteSettings? settings
}

"gc_wizard::application::webapi::deeplinks::deeplinks.dart::WebParameter" o-- "flutter::src::widgets::navigator.dart::RouteSettings"

class "gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::GCWAsyncExecuter" {
  +dynamic Function(GCWAsyncExecuterParameters) isolatedFunction
  +dynamic Function() parameter
  +void Function(T) onReady
  +bool isOverlay
  +_GCWAsyncExecuterState<T> createState()
}

"gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::GCWAsyncExecuter" o-- "null::dynamic Function(GCWAsyncExecuterParameters)"
"gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::GCWAsyncExecuter" o-- "null::dynamic Function()"
"gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::GCWAsyncExecuter" o-- "null::void Function(T)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::GCWAsyncExecuter"

class "gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::_GCWAsyncExecuterState" {
  -T? _result
  +bool isOverlay
  -bool _cancel
  -ReceivePort? _receivePort
  +void initState()
  +Widget build()
  -void _cancelProcess()
}

"gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::_GCWAsyncExecuterState" o-- "dart::isolate::ReceivePort"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::async_executer::gcw_async_executer.dart::_GCWAsyncExecuterState"

class "gc_wizard::common_widgets::async_executer::gcw_async_executer_parameters.dart::GCWAsyncExecuterParameters" {
  +SendPort? sendAsyncPort
  +Object? parameters
}

"gc_wizard::common_widgets::async_executer::gcw_async_executer_parameters.dart::GCWAsyncExecuterParameters" o-- "dart::isolate::SendPort"

class "gc_wizard::common_widgets::buttons::gcw_button.dart::GCWButton" {
  +String text
  +void Function() onPressed
  +TextStyle? textStyle
  +EdgeInsetsGeometry? margin
  +_GCWButtonState createState()
}

"gc_wizard::common_widgets::buttons::gcw_button.dart::GCWButton" o-- "null::void Function()"
"gc_wizard::common_widgets::buttons::gcw_button.dart::GCWButton" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::common_widgets::buttons::gcw_button.dart::GCWButton" o-- "flutter::src::painting::edge_insets.dart::EdgeInsetsGeometry"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::buttons::gcw_button.dart::GCWButton"

class "gc_wizard::common_widgets::buttons::gcw_button.dart::_GCWButtonState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::buttons::gcw_button.dart::_GCWButtonState"

class "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" {
  +void Function() onPressed
  +IconData? icon
  +Widget? customIcon
  +IconButtonSize? size
  +double? iconSize
  +Color? iconColor
  +Color? backgroundColor
  +double? rotateDegrees
  +bool? noBorder
  +Widget build()
}

"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" o-- "null::void Function()"
"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" o-- "flutter::src::widgets::icon_data.dart::IconData"
"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" o-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"
"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton" o-- "dart::ui::Color"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::GCWIconButton"

class "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize" {
  +int index
  {static} +List<IconButtonSize> values
  {static} +IconButtonSize NORMAL
  {static} +IconButtonSize SMALL
  {static} +IconButtonSize TINY
}

"gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize" o-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"

class "gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" {
  +void Function(String) onSelected
  +void Function()? onBeforePressed
  +IconButtonSize? iconSize
  +Widget? customIcon
  +Color? backgroundColor
  +bool? isTextSelectionToolBarButton
  +EdgeInsets? textSelectionToolBarButtonPadding
  +String? textSelectionToolBarButtonLabel
  +_GCWPasteButtonState createState()
}

"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "null::void Function(String)"
"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "null::void Function()"
"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"
"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "dart::ui::Color"
"gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton" o-- "flutter::src::painting::edge_insets.dart::EdgeInsets"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::buttons::gcw_paste_button.dart::GCWPasteButton"

class "gc_wizard::common_widgets::buttons::gcw_paste_button.dart::_GCWPasteButtonState" {
  +Widget build()
  -List<GCWPopupMenuItem> _buildMenuItems()
  -void _openClipboardEditor()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::buttons::gcw_paste_button.dart::_GCWPasteButtonState"

class "gc_wizard::common_widgets::buttons::gcw_submit_button.dart::GCWSubmitButton" {
  +void Function() onPressed
  +_GCWSubmitButtonState createState()
}

"gc_wizard::common_widgets::buttons::gcw_submit_button.dart::GCWSubmitButton" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::buttons::gcw_submit_button.dart::GCWSubmitButton"

class "gc_wizard::common_widgets::buttons::gcw_submit_button.dart::_GCWSubmitButtonState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::buttons::gcw_submit_button.dart::_GCWSubmitButtonState"

class "gc_wizard::common_widgets::clipboard::gcw_clipboard.dart::ClipboardItem" {
  +String text
  +DateTime datetime
  {static} +ClipboardItem? fromJson()
  +String toJson()
  +String toString()
}

class "gc_wizard::common_widgets::clipboard::gcw_clipboard_editor.dart::GCWClipboardEditor" {
  +_GCWClipboardEditorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::clipboard::gcw_clipboard_editor.dart::GCWClipboardEditor"

class "gc_wizard::common_widgets::clipboard::gcw_clipboard_editor.dart::_GCWClipboardEditorState" {
  -TextEditingController _editController
  -int? _currentEditId
  -String _currentEditText
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::common_widgets::clipboard::gcw_clipboard_editor.dart::_GCWClipboardEditorState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::clipboard::gcw_clipboard_editor.dart::_GCWClipboardEditorState"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::GCWColorPicker" {
  +void Function(HSVColor) onChanged
  +HSVColor hsvColor
  +_GCWColorPickerState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::GCWColorPicker" o-- "null::void Function(HSVColor)"
"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::GCWColorPicker" o-- "flutter::src::painting::colors.dart::HSVColor"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::GCWColorPicker"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_GCWColorPickerState" {
  -HSVColor _currentColor
  +Widget build()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_GCWColorPickerState" o-- "flutter::src::painting::colors.dart::HSVColor"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_GCWColorPickerState"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPicker" {
  +double min
  +double max
  +double value
  +void Function(double) onChanged
  +List<Color>? colors
  +State<StatefulWidget> createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPicker" o-- "flutter::src::foundation::basic_types.dart::void Function(double)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPicker"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPickerState" {
  +BorderRadius radius
  +double value
  +double min
  +double max
  +double getRatio()
  +void setRatio()
  +void onPanUpdate()
  +Widget buildSlider()
  +Widget buildGestureDetector()
  +Widget build()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPickerState" o-- "flutter::src::painting::border_radius.dart::BorderRadius"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderPickerState"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderLayout" {
  {static} +String track
  {static} +String thumb
  {static} +String gestureContainer
  +void performLayout()
  +bool shouldRelayout()
}

"flutter::src::rendering::custom_layout.dart::MultiChildLayoutDelegate" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_SliderLayout"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_ThumbPainter" {
  {static} +double width
  {static} +double trackWidth
  {static} +double doubleTrackWidth
  {static} +double getWidth()
  +void paint()
  +bool shouldRepaint()
}

"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_ThumbPainter"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPicker" {
  +HSVColor color
  +void Function(HSVColor) onChanged
  +_HSVPickerState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPicker" o-- "flutter::src::painting::colors.dart::HSVColor"
"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPicker" o-- "flutter::src::foundation::basic_types.dart::void Function(HSVColor)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPicker"

class "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPickerState" {
  +HSVColor color
  +List<Color> hueColors
  +List<Color> saturationColors
  +List<Color> valueColors
  +void hueOnChange()
  +void saturationOnChange()
  +void valueOnChange()
  +Widget buildTitle()
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPickerState" o-- "flutter::src::painting::colors.dart::HSVColor"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colorpicker.dart::_HSVPickerState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColors" {
  +void Function(GCWColorValue) onChanged
  +GCWColorValue colorsValue
  +_GCWColorsState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColors" o-- "null::void Function(GCWColorValue)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColors" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColors"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorsState" {
  -HSVColor _currentColorPickerColor
  -GCWColorValue _currentColorsValue
  +void initState()
  -void _setColorPickerColor()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorsState" o-- "flutter::src::painting::colors.dart::HSVColor"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorsState" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorsState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMY" {
  +void Function(CMY) onChanged
  +CMY? color
  +_GCWColorCMYState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMY" o-- "null::void Function(CMY)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMY" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMY"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMY"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYState" {
  -double _currentCyan
  -double _currentMagenta
  -double _currentYellow
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYK" {
  +void Function(CMYK) onChanged
  +CMYK? color
  +_GCWColorCMYKState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYK" o-- "null::void Function(CMYK)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYK" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMYK"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYK"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYKState" {
  -double _currentCyan
  -double _currentMagenta
  -double _currentYellow
  -double _currentKey
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorCMYKState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCode" {
  +void Function(HexCode) onChanged
  +HexCode? color
  +_GCWColorHexCodeState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCode" o-- "null::void Function(HexCode)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCode" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::HexCode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCode"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCodeState" {
  -String _currentHexCode
  -TextEditingController _controller
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -void _emitOnChange()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCodeState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHexCodeState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSI" {
  +void Function(HSI) onChanged
  +HSI? color
  +_GCWColorHSIState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSI" o-- "null::void Function(HSI)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSI" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSI"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSI"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSIState" {
  -double _currentHue
  -double _currentSaturation
  -double _currentIntensity
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSIState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSL" {
  +void Function(HSL) onChanged
  +HSL? color
  +_GCWColorHSLState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSL" o-- "null::void Function(HSL)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSL" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSL"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSL"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSLState" {
  -double _currentHue
  -double _currentSaturation
  -double _currentLightness
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorHSLState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSV" {
  +void Function(HSV) onChanged
  +HSV? color
  +_ColorHSVState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSV" o-- "null::void Function(HSV)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSV" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSV"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSV"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSVState" {
  -double _currentHue
  -double _currentSaturation
  -double _currentValue
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_ColorHSVState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGB" {
  +void Function(RGB) onChanged
  +RGB? color
  +_GCWColorRGBState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGB" o-- "null::void Function(RGB)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGB" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::RGB"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGB"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGBState" {
  -double _currentRed
  -double _currentGreen
  -double _currentBlue
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorRGBState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCr" {
  +void Function(YCbCr) onChanged
  +YCbCr? color
  +_GCWColorYCbCrState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCr" o-- "null::void Function(YCbCr)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCr" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YCbCr"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCr"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCrState" {
  -double _currentY
  -double _currentCb
  -double _currentCr
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYCbCrState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQ" {
  +void Function(YIQ) onChanged
  +YIQ? color
  +_GCWColorYIQState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQ" o-- "null::void Function(YIQ)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQ" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YIQ"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQ"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQState" {
  -double _currentY
  -double _currentI
  -double _currentQ
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYIQState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPr" {
  +void Function(YPbPr) onChanged
  +YPbPr? color
  +_GCWColorYPbPrState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPr" o-- "null::void Function(YPbPr)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPr" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YPbPr"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPr"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPrState" {
  -double _currentY
  -double _currentPb
  -double _currentPr
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYPbPrState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUV" {
  +void Function(YUV) onChanged
  +YUV? color
  +_GCWColorYUVState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUV" o-- "null::void Function(YUV)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUV" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YUV"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUV"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUVState" {
  -double _currentY
  -double _currentU
  -double _currentV
  +Widget build()
  -void _emitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorYUVState"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue" {
  +ColorSpaceKey colorSpace
  +GCWBaseColor color
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPicker" {
  +void Function(GCWColorValue) onChanged
  +GCWColorValue colorsValue
  +_GCWColorValuesPickerState createState()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPicker" o-- "null::void Function(GCWColorValue)"
"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPicker" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPicker"

class "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPickerState" {
  -GCWColorValue _currentColorsValue
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPickerState" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::_GCWColorValuesPickerState"

class "gc_wizard::common_widgets::dialogs::gcw_dialog.dart::GCWDialogButton" {
  +String text
  +void Function()? onPressed
  +bool suppressClose
  +_GCWDialogButtonState createState()
}

"gc_wizard::common_widgets::dialogs::gcw_dialog.dart::GCWDialogButton" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dialogs::gcw_dialog.dart::GCWDialogButton"

class "gc_wizard::common_widgets::dialogs::gcw_dialog.dart::_GCWDialogButtonState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dialogs::gcw_dialog.dart::_GCWDialogButtonState"

class "gc_wizard::common_widgets::dividers::gcw_divider.dart::GCWDivider" {
  +Color? color
  +Widget build()
}

"gc_wizard::common_widgets::dividers::gcw_divider.dart::GCWDivider" o-- "dart::ui::Color"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "gc_wizard::common_widgets::dividers::gcw_divider.dart::GCWDivider"

class "gc_wizard::common_widgets::dividers::gcw_text_divider.dart::GCWTextDivider" {
  +String text
  +Widget? trailing
  +TextStyle? style
  +bool? suppressTopSpace
  +bool? suppressBottomSpace
  +_GCWTextDividerState createState()
}

"gc_wizard::common_widgets::dividers::gcw_text_divider.dart::GCWTextDivider" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::dividers::gcw_text_divider.dart::GCWTextDivider" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dividers::gcw_text_divider.dart::GCWTextDivider"

class "gc_wizard::common_widgets::dividers::gcw_text_divider.dart::_GCWTextDividerState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dividers::gcw_text_divider.dart::_GCWTextDividerState"

class "gc_wizard::common_widgets::dropdowns::gcw_abc_dropdown.dart::GCWABCDropDown" {
  +void Function(int) onChanged
  +int? value
  +_GCWABCDropDownState createState()
}

"gc_wizard::common_widgets::dropdowns::gcw_abc_dropdown.dart::GCWABCDropDown" o-- "null::void Function(int)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dropdowns::gcw_abc_dropdown.dart::GCWABCDropDown"

class "gc_wizard::common_widgets::dropdowns::gcw_abc_dropdown.dart::_GCWABCDropDownState" {
  -int? _currentValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dropdowns::gcw_abc_dropdown.dart::_GCWABCDropDownState"

class "gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::GCWAlphabetDropDown" {
  +void Function(T) onChanged
  +void Function(String)? onCustomAlphabetChanged
  +Map<T, String> items
  +T customModeKey
  +T value
  +TextEditingController? textFieldController
  +String? textFieldHintText
  +_GCWAlphabetDropDownState<T> createState()
}

"gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::GCWAlphabetDropDown" o-- "null::void Function(T)"
"gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::GCWAlphabetDropDown" o-- "null::void Function(String)"
"gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::GCWAlphabetDropDown" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::GCWAlphabetDropDown"

class "gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::_GCWAlphabetDropDownState" {
  -T? _currentMode
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dropdowns::gcw_alphabetdropdown.dart::_GCWAlphabetDropDownState"

class "gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::GCWAlphabetModificationDropDown" {
  +void Function(AlphabetModificationMode) onChanged
  +AlphabetModificationMode? value
  +List<AlphabetModificationMode>? allowedModifications
  +bool suppressTitle
  +_GCWAlphabetModificationDropDownState createState()
}

"gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::GCWAlphabetModificationDropDown" o-- "null::void Function(AlphabetModificationMode)"
"gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::GCWAlphabetModificationDropDown" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::GCWAlphabetModificationDropDown"

class "gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::_GCWAlphabetModificationDropDownState" {
  -AlphabetModificationMode? _currentValue
  +Map<AlphabetModificationMode, String> modifications
  +Map<AlphabetModificationMode, String> allModifications
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::_GCWAlphabetModificationDropDownState" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dropdowns::gcw_alphabetmodification_dropdown.dart::_GCWAlphabetModificationDropDownState"

class "gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDown" {
  +void Function(T) onChanged
  +List<GCWDropDownMenuItem<T>> items
  +T value
  +List<Widget> Function(BuildContext)? selectedItemBuilder
  +String? title
  +bool alternativeColor
  +_GCWDropDownState<T> createState()
}

"gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDown" o-- "null::void Function(T)"
"gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDown" o-- "flutter::src::material::dropdown.dart::List<Widget> Function(BuildContext)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDown"

class "gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::_GCWDropDownState" {
  -T? _currentValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::_GCWDropDownState"

class "gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDownMenuItem" {
  +T value
  +Object child
  +String? subtitle
  +TextStyle? style
  -T? _internalValue
}

"gc_wizard::common_widgets::dropdowns::gcw_dropdown.dart::GCWDropDownMenuItem" o-- "flutter::src::painting::text_style.dart::TextStyle"

class "gc_wizard::common_widgets::dropdowns::gcw_sign_dropdown.dart::GCWSignDropDown" {
  +void Function(int) onChanged
  +int? value
  +List<String> itemList
  +String? title
  +_GCWSignDropDownState createState()
}

"gc_wizard::common_widgets::dropdowns::gcw_sign_dropdown.dart::GCWSignDropDown" o-- "null::void Function(int)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::dropdowns::gcw_sign_dropdown.dart::GCWSignDropDown"

class "gc_wizard::common_widgets::dropdowns::gcw_sign_dropdown.dart::_GCWSignDropDownState" {
  -int _dropdownValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::dropdowns::gcw_sign_dropdown.dart::_GCWSignDropDownState"

class "gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox" {
  +void Function(bool?) onChanged
  +String title
  +bool value
  +bool notitle
  +bool tristate
  +TextStyle? textStyle
  +Color? activeColor
  +MaterialStateProperty<Color>? fillColor
  +Color? checkColor
  +Color? focusColor
  +Color? hoverColor
  +MaterialStateProperty<Color>? overlayColor
  +_GCWCheckBoxState createState()
}

"gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox" o-- "null::void Function(bool)"
"gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox" o-- "dart::ui::Color"
"gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox" o-- "flutter::src::material::material_state.dart::MaterialStateProperty<Color>"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_checkbox.dart::GCWCheckBox"

class "gc_wizard::common_widgets::gcw_checkbox.dart::_GCWCheckBoxState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_checkbox.dart::_GCWCheckBoxState"

class "gc_wizard::common_widgets::gcw_datetime_picker.dart::TimeZone" {
  +int offset
  +String name
}

class "gc_wizard::common_widgets::gcw_datetime_picker.dart::GCWDateTimePicker" {
  +void Function(DateTimeDuration) onChanged
  +DateTime? datetime
  +Duration? duration
  +Set<DateTimePickerConfig> config
  +Duration timezoneOffset
  +int minDays
  +int? maxDays
  +int? maxHours
  +double maxSeconds
  +TextEditingController? yearController
  +TextEditingController? monthController
  +TextEditingController? dayController
  +TextEditingController? hoursController
  +TextEditingController? minutesController
  +TextEditingController? secondsController
  +TextEditingController? mSecondsController
  +_GCWDateTimePickerState createState()
}

"gc_wizard::common_widgets::gcw_datetime_picker.dart::GCWDateTimePicker" o-- "null::void Function(DateTimeDuration)"
"gc_wizard::common_widgets::gcw_datetime_picker.dart::GCWDateTimePicker" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_datetime_picker.dart::GCWDateTimePicker"

class "gc_wizard::common_widgets::gcw_datetime_picker.dart::_GCWDateTimePickerState" {
  -int _currentSign
  -int _currentYear
  -int _currentMonth
  -int _currentDay
  -int _currentHour
  -int _currentMinute
  -int _currentSecond
  -int _currentMilliSecond
  -int _currentTimezoneOffset
  -int _currentTimezoneOffsetIndex
  -FocusNode _monthFocusNode
  -FocusNode _dayFocusNode
  -FocusNode _hourFocusNode
  -FocusNode _minuteFocusNode
  -FocusNode _secondFocusNode
  -FocusNode _msecondFocusNode
  +void initState()
  +Widget build()
  -int _indexToTimezoneOffset()
  -int _timezoneOffsetToIndex()
  -Row _buildTimeZonesDropdown()
  -String _buildTimeZoneItemText()
  -int _sign()
  -void _setCurrentValueAndEmitOnChange()
  -int _durationMilliseconds()
}

"gc_wizard::common_widgets::gcw_datetime_picker.dart::_GCWDateTimePickerState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_datetime_picker.dart::_GCWDateTimePickerState"

class "gc_wizard::common_widgets::gcw_datetime_picker.dart::DateTimePickerConfig" {
  +int index
  {static} +List<DateTimePickerConfig> values
  {static} +DateTimePickerConfig SIGN
  {static} +DateTimePickerConfig DATE
  {static} +DateTimePickerConfig DAY
  {static} +DateTimePickerConfig TIME
  {static} +DateTimePickerConfig SECOND_AS_INT
  {static} +DateTimePickerConfig TIME_MSEC
  {static} +DateTimePickerConfig TIMEZONES
}

"gc_wizard::common_widgets::gcw_datetime_picker.dart::DateTimePickerConfig" o-- "gc_wizard::common_widgets::gcw_datetime_picker.dart::DateTimePickerConfig"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::gcw_datetime_picker.dart::DateTimePickerConfig"

class "gc_wizard::common_widgets::gcw_date_picker.dart::GCWDatePicker" {
  +void Function(DateTime) onChanged
  +DateTime date
  +CalendarSystem type
  +TextEditingController? yearController
  +TextEditingController? monthController
  +TextEditingController? dayController
  +_GCWDatePickerState createState()
}

"gc_wizard::common_widgets::gcw_date_picker.dart::GCWDatePicker" o-- "null::void Function(DateTime)"
"gc_wizard::common_widgets::gcw_date_picker.dart::GCWDatePicker" o-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem"
"gc_wizard::common_widgets::gcw_date_picker.dart::GCWDatePicker" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_date_picker.dart::GCWDatePicker"

class "gc_wizard::common_widgets::gcw_date_picker.dart::_GCWDatePickerState" {
  -int _currentYear
  -int _currentMonth
  -int _currentDay
  -FocusNode _monthFocusNode
  -FocusNode _dayFocusNode
  +void initState()
  +void didUpdateWidget()
  +void initValues()
  +void dispose()
  +Widget build()
  -Widget _buildDaySpinner()
  -Widget _buildMonthSpinner()
  -void _setCurrentNamedCalendarValueAndEmitOnChange()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::gcw_date_picker.dart::_GCWDatePickerState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_date_picker.dart::_GCWDatePickerState"

class "gc_wizard::common_widgets::gcw_distance.dart::GCWDistance" {
  +void Function(double) onChanged
  +String? hintText
  +double? value
  +Length? unit
  +bool allowNegativeValues
  +TextEditingController? controller
  +_GCWDistanceState createState()
}

"gc_wizard::common_widgets::gcw_distance.dart::GCWDistance" o-- "null::void Function(double)"
"gc_wizard::common_widgets::gcw_distance.dart::GCWDistance" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::common_widgets::gcw_distance.dart::GCWDistance" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_distance.dart::GCWDistance"

class "gc_wizard::common_widgets::gcw_distance.dart::_GCWDistanceState" {
  -TextEditingController _controller
  -DoubleText _currentInput
  -Length _currentLengthUnit
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::gcw_distance.dart::_GCWDistanceState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::gcw_distance.dart::_GCWDistanceState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::common_widgets::gcw_distance.dart::_GCWDistanceState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_distance.dart::_GCWDistanceState"

class "gc_wizard::common_widgets::gcw_expandable.dart::GCWExpandableTextDivider" {
  +String text
  +TextStyle? style
  +bool expanded
  +Widget? child
  +void Function(bool)? onChanged
  +bool? suppressBottomSpace
  +bool? suppressTopSpace
  +_GCWExpandableTextDividerState createState()
}

"gc_wizard::common_widgets::gcw_expandable.dart::GCWExpandableTextDivider" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::common_widgets::gcw_expandable.dart::GCWExpandableTextDivider" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::gcw_expandable.dart::GCWExpandableTextDivider" o-- "null::void Function(bool)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_expandable.dart::GCWExpandableTextDivider"

class "gc_wizard::common_widgets::gcw_expandable.dart::_GCWExpandableTextDividerState" {
  -bool? _currentExpanded
  -void _toggleExpand()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_expandable.dart::_GCWExpandableTextDividerState"

class "gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor" {
  +List<FormulaBase> formulaList
  +GCWTool? Function(int) buildGCWTool
  +void Function(String)? onAddEntry
  +void Function()? onListChanged
  +String? newEntryHintText
  +Widget? middleWidget
  +bool formulaGroups
  +_GCWFormulaListEditor createState()
}

"gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor" o-- "null::GCWTool Function(int)"
"gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor" o-- "null::void Function(String)"
"gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor" o-- "null::void Function()"
"gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_formula_list_editor.dart::GCWFormulaListEditor"

class "gc_wizard::common_widgets::gcw_formula_list_editor.dart::_GCWFormulaListEditor" {
  -TextEditingController _newEntryController
  -TextEditingController _editEntryController
  -String _currentNewName
  -String _currentEditedName
  -int? _currentEditId
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildInput()
  -Widget _buildMiddleWidget()
  -Widget _buildList()
  -Widget _buildRow()
  -void _addEntry()
  -void _updateEntry()
  -void _removeEntry()
  -void _listChanged()
  -void _exportGroup()
}

"gc_wizard::common_widgets::gcw_formula_list_editor.dart::_GCWFormulaListEditor" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_formula_list_editor.dart::_GCWFormulaListEditor"

class "gc_wizard::common_widgets::gcw_letter_value_relation.dart::GCWLetterValueRelation" {
  +void Function(int) onChanged
  +int minValue
  +int startValue
  +_GCWLetterValueRelationState createState()
}

"gc_wizard::common_widgets::gcw_letter_value_relation.dart::GCWLetterValueRelation" o-- "null::void Function(int)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_letter_value_relation.dart::GCWLetterValueRelation"

class "gc_wizard::common_widgets::gcw_letter_value_relation.dart::_GCWLetterValueRelationState" {
  -int _currentKey
  -int _currentLetterValue
  +void initState()
  +Widget build()
  -void _calculateAndEmitValue()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_letter_value_relation.dart::_GCWLetterValueRelationState"

class "gc_wizard::common_widgets::gcw_openfile.dart::GCWOpenFile" {
  +void Function(GCWFile?) onLoaded
  +List<FileType>? supportedFileTypes
  +bool isDialog
  +String? title
  +GCWFile? file
  +bool suppressHeader
  +_GCWOpenFileState createState()
}

"gc_wizard::common_widgets::gcw_openfile.dart::GCWOpenFile" o-- "null::void Function(GCWFile)"
"gc_wizard::common_widgets::gcw_openfile.dart::GCWOpenFile" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_openfile.dart::GCWOpenFile"

class "gc_wizard::common_widgets::gcw_openfile.dart::_GCWOpenFileState" {
  -TextEditingController _urlController
  -String? _currentUrl
  -Uri? _currentUri
  -GCWSwitchPosition _currentMode
  -bool _currentExpanded
  -GCWFile? _loadedFile
  +void initState()
  +void dispose()
  -GCWButton _buildOpenFromDevice()
  -Widget _buildDownloadButton()
  -dynamic _buildJobDataDownload()
  -Widget _buildOpenFromURL()
  -void _saveDownload()
  +Widget build()
  -bool _validateContentType()
  -dynamic _getAndValidateUri()
}

"gc_wizard::common_widgets::gcw_openfile.dart::_GCWOpenFileState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::gcw_openfile.dart::_GCWOpenFileState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::common_widgets::gcw_openfile.dart::_GCWOpenFileState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_openfile.dart::_GCWOpenFileState"

class "gc_wizard::common_widgets::gcw_painter_container.dart::GCWPainterContainer" {
  +void Function(double)? onChanged
  +Widget child
  +double scale
  +_GCWPainterContainerState createState()
}

"gc_wizard::common_widgets::gcw_painter_container.dart::GCWPainterContainer" o-- "null::void Function(double)"
"gc_wizard::common_widgets::gcw_painter_container.dart::GCWPainterContainer" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_painter_container.dart::GCWPainterContainer"

class "gc_wizard::common_widgets::gcw_painter_container.dart::_GCWPainterContainerState" {
  -double _currentScale
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_painter_container.dart::_GCWPainterContainerState"

class "gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" {
  +List<GCWPopupMenuItem> Function(BuildContext) menuItemBuilder
  +IconData iconData
  +Widget? customIcon
  +double? rotateDegrees
  +IconButtonSize? size
  +Color? iconColor
  +Color? backgroundColor
  +bool isTextSelectionToolBarButton
  +EdgeInsets? textSelectionToolBarButtonPadding
  +String? textSelectionToolBarButtonLabel
  +bool? buttonNoBorder
  +Function? onBeforePressed
  +_GCWPopupMenuState createState()
}

"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "null::List<GCWPopupMenuItem> Function(BuildContext)"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "flutter::src::widgets::icon_data.dart::IconData"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "dart::ui::Color"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu" o-- "flutter::src::painting::edge_insets.dart::EdgeInsets"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenu"

class "gc_wizard::common_widgets::gcw_popup_menu.dart::_GCWPopupMenuState" {
  -List<PopupMenuEntry<int>>? _menuItems
  -List<void Function(int)>? _menuAction
  -RelativeRect? _menuPosition
  -void _afterLayout()
  +Widget build()
  -void _onPressed()
}

"gc_wizard::common_widgets::gcw_popup_menu.dart::_GCWPopupMenuState" o-- "flutter::src::rendering::stack.dart::RelativeRect"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_popup_menu.dart::_GCWPopupMenuState"

class "gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenuItem" {
  +Widget child
  +void Function(int) action
  +void Function()? onLongPress
  +bool isDivider
}

"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenuItem" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenuItem" o-- "null::void Function(int)"
"gc_wizard::common_widgets::gcw_popup_menu.dart::GCWPopupMenuItem" o-- "null::void Function()"

abstract class "gc_wizard::common_widgets::gcw_selection.dart::GCWSelection" {
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "gc_wizard::common_widgets::gcw_selection.dart::GCWSelection"

class "gc_wizard::common_widgets::gcw_slider.dart::GCWSlider" {
  +String title
  +void Function(double) onChanged
  +void Function(double)? onChangeEnd
  +double value
  +double min
  +double max
  +bool suppressReset
  +_GCWSliderState createState()
}

"gc_wizard::common_widgets::gcw_slider.dart::GCWSlider" o-- "null::void Function(double)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_slider.dart::GCWSlider"

class "gc_wizard::common_widgets::gcw_slider.dart::_GCWSliderState" {
  -double _currentValue
  -double _initialValue
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_slider.dart::_GCWSliderState"

class "gc_wizard::common_widgets::gcw_soundplayer.dart::GCWSoundPlayer" {
  +GCWFile file
  +_GCWSoundPlayerState createState()
}

"gc_wizard::common_widgets::gcw_soundplayer.dart::GCWSoundPlayer" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_soundplayer.dart::GCWSoundPlayer"

class "gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" {
  +AudioCache audioCache
  +AudioPlayer advancedPlayer
  -StreamSubscription<Duration> _onPositionChangedStream
  -StreamSubscription<Duration> _onDurationChangedStream
  -StreamSubscription<void> _onCompletionStream
  -File _audioFile
  -int _loadedFileBytes
  -int? _currentPositionInMS
  -int? _totalDurationInMS
  -bool _isLoaded
  -double _currentSliderPosition
  +PlayerState playerState
  +bool isPlaying
  +bool isPaused
  +bool isStopped
  +void initState()
  -dynamic _initAudioFile()
  +dynamic dispose()
  +Widget build()
  +void onComplete()
  -void _audioPlayerPause()
  -void _audioPlayerPlay()
  -dynamic _audioPlayerStop()
  -dynamic _writeToFile()
  -String _durationText()
}

"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "audioplayers::src::audio_cache.dart::AudioCache"
"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "audioplayers::src::audioplayer.dart::AudioPlayer"
"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "dart::async::StreamSubscription<Duration>"
"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "dart::async::StreamSubscription<void>"
"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "dart::io::File"
"gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState" o-- "gc_wizard::common_widgets::gcw_soundplayer.dart::PlayerState"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_soundplayer.dart::_GCWSoundPlayerState"

class "gc_wizard::common_widgets::gcw_soundplayer.dart::PlayerState" {
  +int index
  {static} +List<PlayerState> values
  {static} +PlayerState stopped
  {static} +PlayerState playing
  {static} +PlayerState paused
}

"gc_wizard::common_widgets::gcw_soundplayer.dart::PlayerState" o-- "gc_wizard::common_widgets::gcw_soundplayer.dart::PlayerState"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::gcw_soundplayer.dart::PlayerState"

class "gc_wizard::common_widgets::gcw_text.dart::GCWText" {
  +String text
  +Alignment align
  +TextAlign? textAlign
  +TextStyle? style
  +_GCWTextState createState()
}

"gc_wizard::common_widgets::gcw_text.dart::GCWText" o-- "flutter::src::painting::alignment.dart::Alignment"
"gc_wizard::common_widgets::gcw_text.dart::GCWText" o-- "dart::ui::TextAlign"
"gc_wizard::common_widgets::gcw_text.dart::GCWText" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_text.dart::GCWText"

class "gc_wizard::common_widgets::gcw_text.dart::_GCWTextState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_text.dart::_GCWTextState"

class "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::GCWTextSelectionControls" {
  {static} -double _kToolbarContentDistanceBelow
  {static} -double _kToolbarContentDistance
  +Widget buildToolbar()
}

"flutter::src::material::text_selection.dart::MaterialTextSelectionControls" <|-- "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::GCWTextSelectionControls"

class "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar" {
  +Offset anchorAbove
  +Offset anchorBelow
  +ClipboardStatusNotifier? clipboardStatus
  +TextSelectionDelegate? delegate
  +void Function()? handleCopy
  +void Function()? handleCut
  +void Function()? handleSelectAll
  +Function handleGCWPasteButton
  +_GCWTextSelectionToolbarState createState()
}

"gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar" o-- "dart::ui::Offset"
"gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar" o-- "flutter::src::widgets::text_selection.dart::ClipboardStatusNotifier"
"gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar" o-- "flutter::src::services::text_input.dart::TextSelectionDelegate"
"gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbar"

class "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbarState" {
  +int? start
  +int? end
  -void _onChangedClipboardStatus()
  +void initState()
  +void didUpdateWidget()
  +void dispose()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_textselectioncontrols.dart::_GCWTextSelectionToolbarState"

class "gc_wizard::common_widgets::gcw_textviewer.dart::GCWTextViewer" {
  +String text
  +_GCWTextViewerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_textviewer.dart::GCWTextViewer"

class "gc_wizard::common_widgets::gcw_textviewer.dart::_GCWTextViewerState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_textviewer.dart::_GCWTextViewerState"

class "gc_wizard::common_widgets::gcw_text_export.dart::GCWTextExport" {
  +String text
  +void Function(TextExportMode)? onModeChanged
  +PossibleExportMode possibileExportMode
  +TextExportMode initMode
  +_GCWTextExportState createState()
}

"gc_wizard::common_widgets::gcw_text_export.dart::GCWTextExport" o-- "null::void Function(TextExportMode)"
"gc_wizard::common_widgets::gcw_text_export.dart::GCWTextExport" o-- "gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode"
"gc_wizard::common_widgets::gcw_text_export.dart::GCWTextExport" o-- "gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_text_export.dart::GCWTextExport"

class "gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState" {
  -TextExportMode _currentMode
  -TextEditingController _textExportController
  -String? _currentExportText
  -Uint8List? _qrImageData
  -PossibleExportMode _currentPossibleMode
  +void initState()
  +void dispose()
  -void _buildQRCode()
  +Widget build()
}

"gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState" o-- "gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode"
"gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState" o-- "dart::typed_data::Uint8List"
"gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState" o-- "gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_text_export.dart::_GCWTextExportState"

class "gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode" {
  +int index
  {static} +List<TextExportMode> values
  {static} +TextExportMode TEXT
  {static} +TextExportMode QR
}

"gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode" o-- "gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::gcw_text_export.dart::TextExportMode"

class "gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode" {
  +int index
  {static} +List<PossibleExportMode> values
  {static} +PossibleExportMode TEXTONLY
  {static} +PossibleExportMode QRONLY
  {static} +PossibleExportMode BOTH
}

"gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode" o-- "gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::gcw_text_export.dart::PossibleExportMode"

class "gc_wizard::common_widgets::gcw_tool.dart::GCWTool" {
  +Widget tool
  +String id
  +String? id_prefix
  +List<ToolCategory> categories
  +bool autoScroll
  +bool suppressToolMargin
  +String? iconPath
  +List<String> searchKeys
  +List<GCWPopupMenuItem> toolBarItemList
  +bool suppressHelpButton
  +String helpSearchString
  +bool isBeta
  +List<String>? deeplinkAlias
  +GCWSymbolContainer? icon
  +String longId
  +String? toolName
  +String? defaultLanguageToolName
  +String? description
  +String? example
  +String indexedSearchStrings
  +bool isFavorite
  +_GCWToolState createState()
}

"gc_wizard::common_widgets::gcw_tool.dart::GCWTool" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::gcw_tool.dart::GCWTool" o-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_tool.dart::GCWTool"

class "gc_wizard::common_widgets::gcw_tool.dart::_GCWToolState" {
  -String _toolName
  -String _defaultLanguageToolName
  +void initState()
  +Widget build()
  -String _normalizeSearchString()
  -bool _needsDefaultHelp()
  -GCWPopupMenuItem? _buildHelpMenuItem()
  -List<GCWPopupMenuItem> _buildToolBarItems()
  -Widget _buildBody()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_tool.dart::_GCWToolState"

class "gc_wizard::common_widgets::gcw_tool.dart::ToolCategory" {
  +int index
  {static} +List<ToolCategory> values
  {static} +ToolCategory CRYPTOGRAPHY
  {static} +ToolCategory COORDINATES
  {static} +ToolCategory FORMULA_SOLVER
  {static} +ToolCategory GAMES
  {static} +ToolCategory GENERAL_CODEBREAKERS
  {static} +ToolCategory IMAGES_AND_FILES
  {static} +ToolCategory SCIENCE_AND_TECHNOLOGY
  {static} +ToolCategory SYMBOL_TABLES
  {static} +ToolCategory MISCELLANEOUS
}

"gc_wizard::common_widgets::gcw_tool.dart::ToolCategory" o-- "gc_wizard::common_widgets::gcw_tool.dart::ToolCategory"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::gcw_tool.dart::ToolCategory"

class "gc_wizard::common_widgets::gcw_toolbar.dart::GCWToolBar" {
  +List<Widget> children
  +List<int> flexValues
  +_GCWToolBarState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_toolbar.dart::GCWToolBar"

class "gc_wizard::common_widgets::gcw_toolbar.dart::_GCWToolBarState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_toolbar.dart::_GCWToolBarState"

class "gc_wizard::common_widgets::gcw_toollist.dart::GCWToolList" {
  +List<GCWTool> toolList
  +_GCWToolListState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_toollist.dart::GCWToolList"

class "gc_wizard::common_widgets::gcw_toollist.dart::_GCWToolListState" {
  +Widget build()
  -Widget _buildItems()
  -Widget _buildRow()
  -Widget _buildSubtitle()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::gcw_toollist.dart::_GCWToolListState"

class "gc_wizard::common_widgets::gcw_touchcanvas.dart::GCWTouchCanvas" {
  +TouchyCanvas touchCanvas
  +Canvas canvas
}

"gc_wizard::common_widgets::gcw_touchcanvas.dart::GCWTouchCanvas" o-- "touchable::src::touchy_canvas.dart::TouchyCanvas"
"gc_wizard::common_widgets::gcw_touchcanvas.dart::GCWTouchCanvas" o-- "dart::ui::Canvas"

abstract class "gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" {
  +Map<String, String>? webParameter
  +String? apiSpecification
  +Map<String, String> webQueryParameter
  +bool hasWebParameter()
  +String? getWebParameter()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget"

class "gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::GCWGallery" {
  +List<GCWImageViewData> imageData
  +void Function(int)? onDoubleTap
  +_GCWGalleryState createState()
}

"gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::GCWGallery" o-- "null::void Function(int)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::GCWGallery"

class "gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::_GCWGalleryState" {
  -int _currentImageIndex
  -List<Image> _validImages
  -ItemScrollController _scrollController
  +void initState()
  +Widget build()
  +Widget imageDecoration()
}

"gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::_GCWGalleryState" o-- "scrollable_positioned_list::src::scrollable_positioned_list.dart::ItemScrollController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::image_viewers::gcw_gallery.dart::_GCWGalleryState"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewData" {
  +GCWFile file
  +String? description
  +bool? marked
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewData" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageView" {
  +GCWImageViewData? imageData
  +bool toolBarRight
  +String? extension
  +String? fileName
  +Set<GCWImageViewButtons>? suppressedButtons
  +int? maxHeightInPreview
  +dynamic Function()? onBeforeLoadBigImage
  +Set<GCWImageViewOpenInTools>? suppressOpenInTool
  +_GCWImageViewState createState()
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageView" o-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewData"
"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageView" o-- "null::dynamic Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageView"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::_GCWImageViewState" {
  -MemoryImage? _image
  -MemoryImage? _previewImage
  -PhotoViewScaleStateController _scaleStateController
  +void initState()
  +void dispose()
  -MemoryImage? _resizeImage()
  +Widget build()
  -Column _createPhotoView()
  -bool _hasToolButtons()
  -List<Widget> _createToolbar()
  -dynamic _exportFile()
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::_GCWImageViewState" o-- "flutter::src::painting::image_provider.dart::MemoryImage"
"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::_GCWImageViewState" o-- "photo_view::src::controller::photo_view_scalestate_controller.dart::PhotoViewScaleStateController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::_GCWImageViewState"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewButtons" {
  +int index
  {static} +List<GCWImageViewButtons> values
  {static} +GCWImageViewButtons ALL
  {static} +GCWImageViewButtons SAVE
  {static} +GCWImageViewButtons VIEW_IN_TOOLS
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewButtons" o-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewButtons"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewButtons"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewOpenInTools" {
  +int index
  {static} +List<GCWImageViewOpenInTools> values
  {static} +GCWImageViewOpenInTools METADATA
  {static} +GCWImageViewOpenInTools HEXVIEW
  {static} +GCWImageViewOpenInTools COLORCORRECTIONS
  {static} +GCWImageViewOpenInTools HIDDENDATA
  {static} +GCWImageViewOpenInTools FLIPROTATE
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewOpenInTools" o-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewOpenInTools"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewOpenInTools"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::GCWImageViewFullScreen" {
  +Uint8List imageData
  +_GCWImageViewFullScreenState createState()
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::GCWImageViewFullScreen" o-- "dart::typed_data::Uint8List"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::GCWImageViewFullScreen"

class "gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::_GCWImageViewFullScreenState" {
  +ImageProvider<Object> image
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::_GCWImageViewFullScreenState" o-- "flutter::src::painting::image_provider.dart::ImageProvider<Object>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::image_viewers::gcw_imageview_fullscreen.dart::_GCWImageViewFullScreenState"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::KeyValueEditorControl" {
  +KeyValueBase? currentInProgress
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::KeyValueEditorControl" o-- "gc_wizard::utils::complex_return_types.dart::KeyValueBase"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" {
  +List<KeyValueBase> entries
  +String? keyHintText
  +TextEditingController? keyController
  +List<TextInputFormatter>? keyInputFormatters
  +List<TextInputFormatter>? valueInputFormatters
  +String valueHintText
  +int? valueFlex
  +void Function(KeyValueBase)? onAddEntry
  +void Function(KeyValueBase)? onNewEntryChanged
  +GCWKeyValueInput Function(Key?)? onCreateInput
  +GCWKeyValueItem Function(KeyValueBase, bool)? onCreateNewItem
  +Widget? trailing
  +Widget? middleWidget
  +bool addOnDispose
  +String? dividerText
  +bool editAllowed
  +void Function(KeyValueBase)? onUpdateEntry
  +_GCWKeyValueEditor createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" o-- "null::void Function(KeyValueBase)"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" o-- "null::GCWKeyValueInput Function(Key)"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" o-- "null::GCWKeyValueItem Function(KeyValueBase, bool)"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueEditor"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::_GCWKeyValueEditor" {
  -KeyValueEditorControl _keyValueEditorControl
  -GlobalKey<GCWKeyValueInputState> _InputState
  +Widget build()
  -Widget _buildInput()
  -Widget _buildMiddleWidget()
  -Widget _buildList()
  -Widget _buildEntry()
  +void onSetState()
  -String? _toJson()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::_GCWKeyValueEditor" o-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::KeyValueEditorControl"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::_GCWKeyValueEditor" o-- "flutter::src::widgets::framework.dart::GlobalKey<GCWKeyValueInputState>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::_GCWKeyValueEditor"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" {
  +List<KeyValueBase> entries
  +String? keyHintText
  +String valueHintText
  +TextEditingController? keyController
  +List<TextInputFormatter>? keyInputFormatters
  +List<TextInputFormatter>? valueInputFormatters
  +void Function(KeyValueBase)? onAddEntry
  +void Function(KeyValueBase)? onNewEntryChanged
  +void Function(KeyValueBase)? onUpdateEntry
  +bool addOnDispose
  +int? valueFlex
  +void Function()? onSetState
  +GCWKeyValueInputState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" o-- "null::void Function(KeyValueBase)"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState" {
  -TextEditingController _keyController
  -TextEditingController _valueController
  -FocusNode _focusNodeEditValue
  +String currentKey
  +String currentValue
  +void initState()
  +void dispose()
  +Widget build()
  +Widget keyWidget()
  +Widget arrowIcon()
  +Widget addIcon()
  +Widget valueWidget()
  +bool validInput()
  +void addEntry()
  +void finishAddEntry()
  -void _onNewEntryChanged()
  +void pasteClipboard()
  -List<MapEntry<String, String>>? _fromJson()
  -List<MapEntry<String, String>>? _parseClipboardText()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" {
  +List<KeyValueBase> entries
  +KeyValueBase keyValueEntry
  +KeyValueEditorControl keyValueEditorControl
  +bool odd
  +List<TextInputFormatter>? keyInputFormatters
  +List<TextInputFormatter>? valueInputFormatters
  +bool editAllowed
  +void Function(KeyValueBase)? onUpdateEntry
  +void Function()? onSetState
  +GCWKeyValueItemState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" o-- "gc_wizard::utils::complex_return_types.dart::KeyValueBase"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" o-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::KeyValueEditorControl"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" o-- "null::void Function(KeyValueBase)"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem"

class "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState" {
  -TextEditingController _keyController
  -TextEditingController _valueController
  -FocusNode _focusNodeEditValue
  -String _currentKey
  +String currentValue
  +void initState()
  +void didUpdateWidget()
  +void dispose()
  +void initValues()
  +Widget build()
  +Widget keyWidget()
  +Widget arrowIcon()
  +Widget valueWidget()
  +Widget editButton()
  +Widget removeButton()
  +void updateEntry()
  +void removeEntry()
  -void _finishRemoveEntry()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState"

class "gc_wizard::common_widgets::outputs::gcw_columned_multiline_output.dart::GCWColumnedMultilineOutput" {
  +List<List<Object?>> data
  +List<int> flexValues
  +int? copyColumn
  +bool suppressCopyButtons
  +bool hasHeader
  +bool copyAll
  +List<void Function()>? tappables
  +double fontSize
  +List<Widget>? firstRows
  +_GCWColumnedMultilineOutputState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_columned_multiline_output.dart::GCWColumnedMultilineOutput"

class "gc_wizard::common_widgets::outputs::gcw_columned_multiline_output.dart::_GCWColumnedMultilineOutputState" {
  +Widget build()
  -List<Widget> _columnedMultiLineOutputRows()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_columned_multiline_output.dart::_GCWColumnedMultilineOutputState"

class "gc_wizard::common_widgets::outputs::gcw_default_output.dart::GCWDefaultOutput" {
  +Object? child
  +bool suppressCopyButton
  +String? copyText
  +Widget? trailing
  +_GCWDefaultOutputState createState()
}

"gc_wizard::common_widgets::outputs::gcw_default_output.dart::GCWDefaultOutput" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_default_output.dart::GCWDefaultOutput"

class "gc_wizard::common_widgets::outputs::gcw_default_output.dart::_GCWDefaultOutputState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_default_output.dart::_GCWDefaultOutputState"

class "gc_wizard::common_widgets::outputs::gcw_files_output.dart::GCWFilesOutput" {
  +List<GCWFile> files
  +bool suppressHiddenDataMessage
  +Set<GCWImageViewButtons>? suppressedButtons
  +_GCWFilesOutputState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_files_output.dart::GCWFilesOutput"

class "gc_wizard::common_widgets::outputs::gcw_files_output.dart::_GCWFilesOutputState" {
  +Widget build()
  -Widget _buildFileTree()
  -GCWPopupMenu _buildActionButton()
  -dynamic _exportFile()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_files_output.dart::_GCWFilesOutputState"

class "gc_wizard::common_widgets::outputs::gcw_multiple_output.dart::GCWMultipleOutput" {
  +List<Object?> children
  +String? title
  +bool suppressDefaultTitle
  +Widget? trailing
  +_GCWMultipleOutputState createState()
}

"gc_wizard::common_widgets::outputs::gcw_multiple_output.dart::GCWMultipleOutput" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_multiple_output.dart::GCWMultipleOutput"

class "gc_wizard::common_widgets::outputs::gcw_multiple_output.dart::_GCWMultipleOutputState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_multiple_output.dart::_GCWMultipleOutputState"

class "gc_wizard::common_widgets::outputs::gcw_output.dart::GCWOutput" {
  +Object? child
  +String? title
  +bool suppressCopyButton
  +String? copyText
  +Widget? trailing
  +_GCWOutputState createState()
}

"gc_wizard::common_widgets::outputs::gcw_output.dart::GCWOutput" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_output.dart::GCWOutput"

class "gc_wizard::common_widgets::outputs::gcw_output.dart::_GCWOutputState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_output.dart::_GCWOutputState"

class "gc_wizard::common_widgets::outputs::gcw_output_text.dart::GCWOutputText" {
  +String? text
  +Alignment align
  +bool isMonotype
  +TextStyle? style
  +bool suppressCopyButton
  +String? copyText
  +_GCWOutputTextState createState()
}

"gc_wizard::common_widgets::outputs::gcw_output_text.dart::GCWOutputText" o-- "flutter::src::painting::alignment.dart::Alignment"
"gc_wizard::common_widgets::outputs::gcw_output_text.dart::GCWOutputText" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::outputs::gcw_output_text.dart::GCWOutputText"

class "gc_wizard::common_widgets::outputs::gcw_output_text.dart::_GCWOutputTextState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::outputs::gcw_output_text.dart::_GCWOutputTextState"

class "gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::GCWABCSpinner" {
  +void Function(int) onChanged
  +SpinnerLayout layout
  +int value
  +bool suppressLetterValues
  +String? title
  +_GCWABCSpinnerState createState()
}

"gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::GCWABCSpinner" o-- "null::void Function(int)"
"gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::GCWABCSpinner" o-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::GCWABCSpinner"

class "gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::_GCWABCSpinnerState" {
  -int? _currentValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::spinners::gcw_abc_spinner.dart::_GCWABCSpinnerState"

class "gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner" {
  +void Function(double) onChanged
  +String? title
  +double value
  +double min
  +double max
  +TextEditingController? controller
  +int numberDecimalDigits
  +SpinnerLayout layout
  +FocusNode? focusNode
  +bool suppressOverflow
  +_GCWDoubleSpinnerState createState()
}

"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner" o-- "null::void Function(double)"
"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner" o-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"
"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::GCWDoubleSpinner"

class "gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::_GCWDoubleSpinnerState" {
  -TextEditingController _controller
  -bool _externalChange
  -double _currentValue
  -NumberFormat _numberFormat
  +void initState()
  +void dispose()
  +Widget build()
  -void _decreaseValue()
  -void _increaseValue()
  -Widget _buildTitle()
  -Widget _buildTextField()
  -Widget _buildSpinner()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::_GCWDoubleSpinnerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::_GCWDoubleSpinnerState" o-- "intl::src::intl::number_format.dart::NumberFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::spinners::gcw_double_spinner.dart::_GCWDoubleSpinnerState"

class "gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::GCWDropDownSpinner" {
  +void Function(int) onChanged
  +int index
  +List<Object> items
  +SpinnerLayout layout
  +String? title
  +_GCWDropDownSpinnerState createState()
}

"gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::GCWDropDownSpinner" o-- "null::void Function(int)"
"gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::GCWDropDownSpinner" o-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::GCWDropDownSpinner"

class "gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::_GCWDropDownSpinnerState" {
  -int _currentIndex
  -void _increaseValue()
  -void _decreaseValue()
  +Widget build()
  -Widget _buildTitle()
  -Container _buildDropDown()
  -void _setValueAndEmitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::spinners::gcw_dropdown_spinner.dart::_GCWDropDownSpinnerState"

class "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" {
  +void Function(int) onChanged
  +String? title
  +int value
  +int min
  +int max
  +int? leftPadZeros
  +TextEditingController? controller
  +SpinnerLayout layout
  +FocusNode? focusNode
  +SpinnerOverflowType overflow
  +_GCWIntegerSpinnerState createState()
}

"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" o-- "null::void Function(int)"
"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" o-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"
"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner" o-- "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::SpinnerOverflowType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::GCWIntegerSpinner"

class "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::_GCWIntegerSpinnerState" {
  -TextEditingController _controller
  -int _currentValue
  -bool _externalChange
  +void initState()
  +void dispose()
  +Widget build()
  -void _decreaseValue()
  -void _increaseValue()
  -Widget _buildTitle()
  -Widget _buildTextField()
  -Widget _buildSpinner()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::_GCWIntegerSpinnerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::_GCWIntegerSpinnerState"

class "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::SpinnerOverflowType" {
  +int index
  {static} +List<SpinnerOverflowType> values
  {static} +SpinnerOverflowType SUPPRESS_OVERFLOW
  {static} +SpinnerOverflowType ALLOW_OVERFLOW
  {static} +SpinnerOverflowType OVERFLOW_MIN
  {static} +SpinnerOverflowType OVERFLOW_MAX
}

"gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::SpinnerOverflowType" o-- "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::SpinnerOverflowType"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::spinners::gcw_integer_spinner.dart::SpinnerOverflowType"

class "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout" {
  +int index
  {static} +List<SpinnerLayout> values
  {static} +SpinnerLayout HORIZONTAL
  {static} +SpinnerLayout VERTICAL
}

"gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout" o-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::spinners::spinner_constants.dart::SpinnerLayout"

class "gc_wizard::common_widgets::switches::gcw_onoff_switch.dart::GCWOnOffSwitch" {
  +void Function(bool) onChanged
  +String? title
  +bool? value
  +bool notitle
  +List<int> flexValues
  {static} -List<int> _flexValues
  +_GCWOnOffSwitchState createState()
}

"gc_wizard::common_widgets::switches::gcw_onoff_switch.dart::GCWOnOffSwitch" o-- "null::void Function(bool)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::switches::gcw_onoff_switch.dart::GCWOnOffSwitch"

class "gc_wizard::common_widgets::switches::gcw_onoff_switch.dart::_GCWOnOffSwitchState" {
  -bool _currentValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::switches::gcw_onoff_switch.dart::_GCWOnOffSwitchState"

class "gc_wizard::common_widgets::switches::gcw_switch.dart::GCWSwitch" {
  +void Function(bool) onChanged
  +bool value
  +Color? inactiveTrackColor
  +Color? inactiveThumbColor
  +Color? activeThumbColor
  +Color? activeTrackColor
  +_GCWSwitchState createState()
}

"gc_wizard::common_widgets::switches::gcw_switch.dart::GCWSwitch" o-- "null::void Function(bool)"
"gc_wizard::common_widgets::switches::gcw_switch.dart::GCWSwitch" o-- "dart::ui::Color"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::switches::gcw_switch.dart::GCWSwitch"

class "gc_wizard::common_widgets::switches::gcw_switch.dart::_GCWSwitchState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::switches::gcw_switch.dart::_GCWSwitchState"

class "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWTwoOptionsSwitch" {
  +void Function(GCWSwitchPosition) onChanged
  +String? title
  +String? leftValue
  +String? rightValue
  +GCWSwitchPosition? value
  +bool alternativeColor
  +bool notitle
  +_GCWTwoOptionsSwitchState createState()
}

"gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWTwoOptionsSwitch" o-- "null::void Function(GCWSwitchPosition)"
"gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWTwoOptionsSwitch" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWTwoOptionsSwitch"

class "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::_GCWTwoOptionsSwitchState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::_GCWTwoOptionsSwitchState"

class "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition" {
  +int index
  {static} +List<GCWSwitchPosition> values
  {static} +GCWSwitchPosition left
  {static} +GCWSwitchPosition right
}

"gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"

class "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" {
  +TextEditingController controller
  +void Function(String)? onChanged
  +Map<String, TextStyle>? patternMap
  +Map<String, TextStyle>? stringMap
  +Map<String, TextStyle>? theme
  +TextStyle? textStyle
  +bool readOnly
  +bool? wrap
  +CodeHighlightingLanguage? language
  +bool? lineNumbers
  +GCWCodeTextFieldLineNumberStyle? lineNumberStyle
  +_GCWCodeTextFieldState createState()
}

"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" o-- "null::void Function(String)"
"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" o-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::CodeHighlightingLanguage"
"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField" o-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextFieldLineNumberStyle"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextField"

class "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::_GCWCodeTextFieldState" {
  -Mode? _language
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::_GCWCodeTextFieldState" o-- "highlight::src::mode.dart::Mode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::_GCWCodeTextFieldState"

class "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::GCWCodeTextFieldLineNumberStyle" {
  +double width
}

class "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::CodeHighlightingLanguage" {
  +int index
  {static} +List<CodeHighlightingLanguage> values
  {static} +CodeHighlightingLanguage LUA
  {static} +CodeHighlightingLanguage BASIC
}

"gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::CodeHighlightingLanguage" o-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::CodeHighlightingLanguage"
"dart::core::Enum" <|-- "gc_wizard::common_widgets::textfields::gcw_code_textfield.dart::CodeHighlightingLanguage"

class "gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField" {
  +TextEditingController? controller
  +void Function(DoubleText) onChanged
  +GCWDoubleTextInputFormatter? textInputFormatter
  +String? hintText
  +double? min
  +double? max
  +FocusNode? focusNode
  +int? numberDecimalDigits
  +_GCWDoubleTextFieldState createState()
}

"gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField" o-- "null::void Function(DoubleText)"
"gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_double_textinputformatter.dart::GCWDoubleTextInputFormatter"
"gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::GCWDoubleTextField"

class "gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::_GCWDoubleTextFieldState" {
  -GCWDoubleTextInputFormatter _doubleInputFormatter
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::_GCWDoubleTextFieldState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_double_textinputformatter.dart::GCWDoubleTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::textfields::gcw_double_textfield.dart::_GCWDoubleTextFieldState"

class "gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::GCWIntegerListTextField" {
  +TextEditingController? controller
  +void Function(IntegerListText) onChanged
  +String? hintText
  +_GCWIntegerListTextFieldState createState()
}

"gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::GCWIntegerListTextField" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::GCWIntegerListTextField" o-- "null::void Function(IntegerListText)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::GCWIntegerListTextField"

class "gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::_GCWIntegerListTextFieldState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::textfields::gcw_integer_list_textfield.dart::_GCWIntegerListTextFieldState"

class "gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField" {
  +TextEditingController? controller
  +void Function(IntegerText) onChanged
  +TextInputFormatter? textInputFormatter
  +String? hintText
  +int? min
  +int? max
  +FocusNode? focusNode
  +_GCWIntegerTextFieldState createState()
}

"gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField" o-- "null::void Function(IntegerText)"
"gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField" o-- "flutter::src::services::text_formatter.dart::TextInputFormatter"
"gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::GCWIntegerTextField"

class "gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::_GCWIntegerTextFieldState" {
  -GCWIntegerTextInputFormatter _integerInputFormatter
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::_GCWIntegerTextFieldState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::textfields::gcw_integer_textfield.dart::_GCWIntegerTextFieldState"

class "gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" {
  +TextEditingController? controller
  +void Function(String)? onChanged
  +String? Function(String?)? validate
  +List<TextInputFormatter>? inputFormatters
  +TextInputType? keyboardType
  +String? hintText
  +Color? hintColor
  +String? labelText
  +FocusNode? focusNode
  +bool? autofocus
  +Widget? icon
  +bool? filled
  +int? maxLength
  +int? maxLines
  +double? fontSize
  +String title
  +TextStyle? style
  +_GCWTextFieldState createState()
}

"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "null::void Function(String)"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "null::String Function(String)"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "flutter::src::services::text_input.dart::TextInputType"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "dart::ui::Color"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::textfields::gcw_textfield.dart::GCWTextField"

class "gc_wizard::common_widgets::textfields::gcw_textfield.dart::_GCWTextFieldState" {
  -TextEditingController _controller
  +void initState()
  +Widget build()
}

"gc_wizard::common_widgets::textfields::gcw_textfield.dart::_GCWTextFieldState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::textfields::gcw_textfield.dart::_GCWTextFieldState"

class "gc_wizard::common_widgets::text_input_formatters::gcw_bearing_textinputformatter.dart::GCWBearingTextInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"gc_wizard::common_widgets::text_input_formatters::gcw_double_textinputformatter.dart::GCWDoubleTextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_bearing_textinputformatter.dart::GCWBearingTextInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_double_textinputformatter.dart::GCWDoubleTextInputFormatter" {
  -RegExp _exp
  +double? min
  +double? max
  +int? numberDecimalDigits
  -int? _maxIntegerLength
  -int? _minIntegerLength
  +TextEditingValue formatEditUpdate()
  -String _buildIntegerRegex()
  -bool _checkBounds()
  -double _truncateDigits()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_double_textinputformatter.dart::GCWDoubleTextInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter" {
  -RegExp _exp
  +int? min
  +int? max
  +TextEditingValue formatEditUpdate()
  -String _buildRegex()
  -bool _checkBounds()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_minutesseconds_textinputformatter.dart::GCWMinutesSecondsTextInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_minutesseconds_textinputformatter.dart::GCWMinutesSecondsTextInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_only01andspace_textinputformatter.dart::GCWOnly01AndSpaceInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_only01andspace_textinputformatter.dart::GCWOnly01AndSpaceInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_onlydigitsandcomma_textinputformatter.dart::GCWOnlyDigitsAndCommaInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_onlydigitsandcomma_textinputformatter.dart::GCWOnlyDigitsAndCommaInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_onlydigitsandspace_textinputformatter.dart::GCWOnlyDigitsAndSpaceInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_onlydigitsandspace_textinputformatter.dart::GCWOnlyDigitsAndSpaceInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::gcw_onlyhexdigitsandspace_textinputformatter.dart::GCWOnlyHexDigitsAndSpaceInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::gcw_onlyhexdigitsandspace_textinputformatter.dart::GCWOnlyHexDigitsAndSpaceInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::variablestring_textinputformatter.dart::VariableStringTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::variablestring_textinputformatter.dart::VariableStringTextInputFormatter"

class "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter" {
  +String? mask
  +Map<String, RegExp>? filter
  -MaskTextInputFormatter _formatter
  +String getMaskedText()
  +void clear()
  +TextEditingValue formatEditUpdate()
}

"gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter" o-- "mask_text_input_formatter::mask_text_input_formatter.dart::MaskTextInputFormatter"
"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"

class "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue" {
  +T value
  +UnitPrefix prefix
}

"gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix"

class "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnits" {
  +UnitCategory<T> unitCategory
  +void Function(GCWUnitsValue<T>) onChanged
  +bool onlyShowUnitSymbols
  +bool onlyShowPrefixSymbols
  +GCWUnitsValue<Unit>? value
  +_GCWUnitsState<Unit> createState()
}

"gc_wizard::common_widgets::units::gcw_units.dart::GCWUnits" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<T>"
"gc_wizard::common_widgets::units::gcw_units.dart::GCWUnits" o-- "null::void Function(GCWUnitsValue<T>)"
"gc_wizard::common_widgets::units::gcw_units.dart::GCWUnits" o-- "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue<Unit>"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnits"

class "gc_wizard::common_widgets::units::gcw_units.dart::_GCWUnitsState" {
  -UnitPrefix _currentPrefix
  -T _currentUnit
  +Widget build()
  -void _emitOnChange()
}

"gc_wizard::common_widgets::units::gcw_units.dart::_GCWUnitsState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::units::gcw_units.dart::_GCWUnitsState"

class "gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDown" {
  +void Function(T) onChanged
  +T value
  +List<T>? unitList
  +UnitCategory<Unit>? unitCategory
  +bool onlyShowSymbols
  +GCWUnitDropDownState<T> createState()
}

"gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDown" o-- "null::void Function(T)"
"gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDown" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<Unit>"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDown"

class "gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDownState" {
  -T _currentUnit
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::units::gcw_unit_dropdown.dart::GCWUnitDropDownState"

class "gc_wizard::common_widgets::units::gcw_unit_input.dart::GCWUnitInput" {
  +double min
  +double max
  +int? numberDecimalDigits
  +double value
  +List<T>? unitList
  +UnitCategory<T>? unitCategory
  +String? title
  +T? initialUnit
  +bool suppressOverflow
  +void Function(double) onChanged
  +_GCWUnitInputState<T> createState()
}

"gc_wizard::common_widgets::units::gcw_unit_input.dart::GCWUnitInput" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<T>"
"gc_wizard::common_widgets::units::gcw_unit_input.dart::GCWUnitInput" o-- "null::void Function(double)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::units::gcw_unit_input.dart::GCWUnitInput"

class "gc_wizard::common_widgets::units::gcw_unit_input.dart::_GCWUnitInputState" {
  -T _currentUnit
  -double _currentValue
  -List<T> _unitList
  +void initState()
  +Widget build()
  -void _convertToReferenceAndEmitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::units::gcw_unit_input.dart::_GCWUnitInputState"

class "gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::GCWUnitPrefixDropDown" {
  +void Function(UnitPrefix) onChanged
  +UnitPrefix value
  +bool onlyShowSymbols
  +_GCWUnitPrefixDropDownState createState()
}

"gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::GCWUnitPrefixDropDown" o-- "null::void Function(UnitPrefix)"
"gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::GCWUnitPrefixDropDown" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::GCWUnitPrefixDropDown"

class "gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::_GCWUnitPrefixDropDownState" {
  -UnitPrefix _currentPrefix
  +Widget build()
  -String _longText()
}

"gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::_GCWUnitPrefixDropDownState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::common_widgets::units::gcw_unit_prefix_dropdown.dart::_GCWUnitPrefixDropDownState"

class "gc_wizard::main.dart::App" {
  +AppLanguage appLanguage
  +Widget build()
}

"gc_wizard::main.dart::App" o-- "gc_wizard::application::i18n::logic::app_language.dart::AppLanguage"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "gc_wizard::main.dart::App"

class "gc_wizard::tools::coords::antipodes::widget::antipodes.dart::Antipodes" {
  +_AntipodesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::antipodes::widget::antipodes.dart::Antipodes"

class "gc_wizard::tools::coords::antipodes::widget::antipodes.dart::_AntipodesState" {
  -BaseCoordinate _currentCoords
  -List<LatLng> _currentValues
  -List<GCWMapPoint> _currentMapPoints
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::antipodes::widget::antipodes.dart::_AntipodesState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::antipodes::widget::antipodes.dart::_AntipodesState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::antipodes::widget::antipodes.dart::_AntipodesState"

class "gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::CenterThreePoints" {
  +_CenterThreePointsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::CenterThreePoints"

class "gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState" {
  -LatLng _currentCenter
  -double _currentDistance
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -BaseCoordinate _currentCoords3
  -CoordinateFormat _currentOutputFormat
  -Length _currentOutputUnit
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::centerpoint::center_three_points::widget::center_three_points.dart::_CenterThreePointsState"

class "gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::CenterTwoPoints" {
  +_CenterTwoPointsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::CenterTwoPoints"

class "gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState" {
  -LatLng _currentCenter
  -double _currentDistance
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -CoordinateFormat _currentOutputFormat
  -Length _currentOutputUnit
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::centerpoint::center_two_points::widget::center_two_points.dart::_CenterTwoPointsState"

class "gc_wizard::tools::coords::centerpoint::logic::centerpoint.dart::CenterPointJobData" {
  +LatLng coord1
  +LatLng coord2
  +LatLng coord3
  +Ellipsoid ellipsoid
}

"gc_wizard::tools::coords::centerpoint::logic::centerpoint.dart::CenterPointJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::centerpoint::logic::centerpoint.dart::CenterPointJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::centerpoint::logic::centerpoint.dart::CenterPointDistance" {
  +LatLng centerPoint
  +double distance
}

"gc_wizard::tools::coords::centerpoint::logic::centerpoint.dart::CenterPointDistance" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::centroid::centroid_arithmetic_mean::widget::centroid_arithmetic_mean.dart::CentroidArithmeticMean" {
  +_CentroidArithmeticMeanState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::centroid::centroid_arithmetic_mean::widget::centroid_arithmetic_mean.dart::CentroidArithmeticMean"

class "gc_wizard::tools::coords::centroid::centroid_arithmetic_mean::widget::centroid_arithmetic_mean.dart::_CentroidArithmeticMeanState" {
  -int _currentCountCoords
  -List<BaseCoordinate> _currentCoords
  -List<LatLng> _currentValues
  -List<GCWMapPoint> _currentMapPoints
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::centroid::centroid_arithmetic_mean::widget::centroid_arithmetic_mean.dart::_CentroidArithmeticMeanState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::centroid::centroid_arithmetic_mean::widget::centroid_arithmetic_mean.dart::_CentroidArithmeticMeanState"

class "gc_wizard::tools::coords::centroid::centroid_center_of_gravity::widget::centroid_center_of_gravity.dart::CentroidCenterOfGravity" {
  +_CentroidCenterOfGravityState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::centroid::centroid_center_of_gravity::widget::centroid_center_of_gravity.dart::CentroidCenterOfGravity"

class "gc_wizard::tools::coords::centroid::centroid_center_of_gravity::widget::centroid_center_of_gravity.dart::_CentroidCenterOfGravityState" {
  -int _currentCountCoords
  -List<BaseCoordinate> _currentCoords
  -List<LatLng> _currentValues
  -List<GCWMapPoint> _currentMapPoints
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::centroid::centroid_center_of_gravity::widget::centroid_center_of_gravity.dart::_CentroidCenterOfGravityState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::centroid::centroid_center_of_gravity::widget::centroid_center_of_gravity.dart::_CentroidCenterOfGravityState"

class "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::CoordinateAveraging" {
  +_CoordinateAveragingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::CoordinateAveraging"

class "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_CoordinateAveragingState" {
  -bool? _currentLocationPermissionGranted
  -StreamSubscription<LocationData>? _locationSubscription
  -Location _currentLocation
  -Length _DEFAULT_LENGTH_UNIT
  -bool _isMeasuring
  -List<_AveragedLocation> _averagedLocations
  -List<_MeasuredLocation> _measuredValues
  +double averageAccuracy
  +double weightedLatSum
  +double weightedLonSum
  +double invertedAccuracySum
  +double distanceFromAverageCoordsSum
  +void initState()
  +void dispose()
  -void _clearMeasurements()
  -void _cancelLocationSubscription()
  -String _formatLength()
  +Widget build()
  -void _toggleLocationListening()
  -void _addAveragedLocation()
}

"gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_CoordinateAveragingState" o-- "dart::async::StreamSubscription<LocationData>"
"gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_CoordinateAveragingState" o-- "location::location.dart::Location"
"gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_CoordinateAveragingState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_CoordinateAveragingState"

class "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_AveragedLocation" {
  +LatLng coord
  +double accuracy
}

"gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_AveragedLocation" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_MeasuredLocation" {
  +LatLng coord
  +double accuracy
}

"gc_wizard::tools::coords::coordinate_averaging::widget::coordinate_averaging.dart::_MeasuredLocation" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::CrossBearing" {
  +_CrossBearingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::CrossBearing"

class "gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState" {
  -LatLng? _currentIntersection
  -BaseCoordinate _currentCoords1
  -DoubleText _currentBearing1
  -BaseCoordinate _currentCoords2
  -DoubleText _currentBearing2
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -GCWMapPoint _getStartLine1()
  -GCWMapPoint _getStartLine2()
  -GCWMapPoint _getEndLine1()
  -GCWMapPoint _getEndLine2()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::cross_bearing::widget::cross_bearing.dart::_CrossBearingState"

class "gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::DistanceBearing" {
  +_DistanceBearingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::DistanceBearing"

class "gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::_DistanceBearingState" {
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -Length _currentOutputUnit
  -DistanceBearingData _currentValue
  -List<GCWOutputText> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +void initState()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::_DistanceBearingState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::_DistanceBearingState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::_DistanceBearingState" o-- "gc_wizard::tools::coords::_common::logic::distance_bearing.dart::DistanceBearingData"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::distance_and_bearing::widget::distance_and_bearing.dart::_DistanceBearingState"

class "gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::DMMOffset" {
  +_DMMOffsetState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::DMMOffset"

class "gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::_DMMOffsetState" {
  -BaseCoordinate _currentCoords
  -List<LatLng> _currentValues
  -List<GCWMapPoint> _currentMapPoints
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -int _currentAddLatitude
  -int _currentAddLongitude
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::_DMMOffsetState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::_DMMOffsetState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::dmm_offset::widget::dmm_offset.dart::_DMMOffsetState"

class "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::_Vector" {
  +double x
  +double y
  +double z
}

class "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::_Matrix" {
  +List<List<double>> M
  +_Vector multiply()
}

class "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::EllipsoidTransformation" {
  +_Vector mRParam
  +_Vector mTParam
  +double mDeformation
  +Ellipsoid srcElls
  +Ellipsoid dstElls
  +EllipsoidTransformation invert()
  +_Matrix RotationMatrix()
}

"gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::EllipsoidTransformation" o-- "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::_Vector"
"gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::EllipsoidTransformation" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::TransformableDate" {
  +String name
  +int? transformationIndex
  +Ellipsoid ellipsoid
}

"gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::TransformableDate" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::_TransformationData" {
  +String from
  +String to
  +double ex
  +double ey
  +double ez
  +double dx
  +double dy
  +double dz
  +double m
}

class "gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::EllipsoidTransform" {
  +_EllipsoidTransformState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::EllipsoidTransform"

class "gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::_EllipsoidTransformState" {
  -BaseCoordinate _currentCoords
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -TransformableDate _currentFromDate
  -TransformableDate _currentToDate
  +void initState()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::_EllipsoidTransformState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::_EllipsoidTransformState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::_EllipsoidTransformState" o-- "gc_wizard::tools::coords::ellipsoid_transform::logic::ellipsoid_transform.dart::TransformableDate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::ellipsoid_transform::widget::ellipsoid_transform.dart::_EllipsoidTransformState"

class "gc_wizard::tools::coords::equilateral_triangle::logic::equilateral_triangle.dart::EquilateralTriangleJobData" {
  +LatLng coord1
  +LatLng coord2
  +Ellipsoid ells
}

"gc_wizard::tools::coords::equilateral_triangle::logic::equilateral_triangle.dart::EquilateralTriangleJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::equilateral_triangle::logic::equilateral_triangle.dart::EquilateralTriangleJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::EquilateralTriangle" {
  +_EquilateralTriangleState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::EquilateralTriangle"

class "gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::_EquilateralTriangleState" {
  -List<LatLng> _currentIntersections
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::_EquilateralTriangleState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::_EquilateralTriangleState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::equilateral_triangle::widget::equilateral_triangle.dart::_EquilateralTriangleState"

class "gc_wizard::tools::coords::format_converter::api_mapper::format_converter.dart::FormatConverterAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::coords::format_converter::api_mapper::format_converter.dart::FormatConverterAPIMapper"

class "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::FormatConverter" {
  +_FormatConverterState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::FormatConverter"

class "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState" {
  -BaseCoordinate _currentCoords
  -String _currentOutput
  -GCWMapPoint _currentMapPoint
  -CoordinateFormat _currentOutputFormat
  -Widget _currentAllOutput
  +void initState()
  +Widget build()
  -Widget _buildOutput()
  -void _calculateOutput()
  -Widget _calculateAllOutput()
}

"gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint"
"gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_FormatConverterState"

class "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_GCWCoordsFormatSelectorAll" {
  +List<GCWDropDownMenuItem<CoordinateFormatKey>> getDropDownItems()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::GCWCoordsFormatSelector" <|-- "gc_wizard::tools::coords::format_converter::widget::format_converter.dart::_GCWCoordsFormatSelectorAll"

class "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::Geohashing" {
  +int latitude
  +int longitude
  +DateTime date
  +double dowJonesIndex
  +LatLng? location
  +ErrorCode errorCode
  +dynamic toLatLng()
  {static} +Geohashing? parse()
  +String toString()
}

"gc_wizard::tools::coords::geohashing::logic::geohashing.dart::Geohashing" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::geohashing::logic::geohashing.dart::Geohashing" o-- "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::ErrorCode"

class "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::ErrorCode" {
  +int index
  {static} +List<ErrorCode> values
  {static} +ErrorCode Ok
  {static} +ErrorCode futureDate
  {static} +ErrorCode invalidDate
}

"gc_wizard::tools::coords::geohashing::logic::geohashing.dart::ErrorCode" o-- "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::ErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::ErrorCode"

class "gc_wizard::tools::coords::geohashing::widget::geohashing.dart::Geohashing" {
  +_GeohashingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::geohashing::widget::geohashing.dart::Geohashing"

class "gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" {
  -TextEditingController _LongitudeController
  -TextEditingController _LatitudeController
  -TextEditingController _DowJonesIndexController
  -TextEditingController _yearController
  -TextEditingController _monthController
  -TextEditingController _dayController
  -DateTime _currentDate
  -Location _location
  -bool _isOnLocationAccess
  -IntegerText _currentLatitude
  -IntegerText _currentLongitude
  -GCWSwitchPosition _currentOnline
  -double _currentDowJonesIndex
  -CoordinateFormat _currentOutputFormat
  -List<GCWMapPoint> _currentMapPoints
  -List<String> _currentOutput
  -Geohashing? _geohashing
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -Row _buildTrailingButtons()
  -void _setCoords()
  -void _calculateOutput()
  -bool _W30RuleNecessary()
  -Geohashing _buildGeohashing()
  -void _setUserLocationCoords()
}

"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "location::location.dart::Location"
"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerText"
"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState" o-- "gc_wizard::tools::coords::geohashing::logic::geohashing.dart::Geohashing"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::geohashing::widget::geohashing.dart::_GeohashingState"

class "gc_wizard::tools::coords::intersection::logic::intersection.dart::IntersectionJobData" {
  +LatLng coord1
  +double alpha
  +LatLng coord2
  +double beta
  +Ellipsoid ells
}

"gc_wizard::tools::coords::intersection::logic::intersection.dart::IntersectionJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersection::logic::intersection.dart::IntersectionJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersection::widget::intersection.dart::Intersection" {
  +_IntersectionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersection::widget::intersection.dart::Intersection"

class "gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState" {
  -List<LatLng?> _currentIntersections
  -BaseCoordinate _currentCoords1
  -DoubleText _currentAngle1
  -BaseCoordinate _currentCoords2
  -DoubleText _currentAngle2
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -Ellipsoid _ellipsoid
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersection::widget::intersection.dart::_IntersectionState"

class "gc_wizard::tools::coords::intersect_bearing_and_circle::logic::intersect_geodetic_and_circle.dart::IntersectGeodeticAndCircleJobData" {
  +LatLng startGeodetic
  +double bearingGeodetic
  +LatLng centerPoint
  +double radiusCircle
  +Ellipsoid ells
}

"gc_wizard::tools::coords::intersect_bearing_and_circle::logic::intersect_geodetic_and_circle.dart::IntersectGeodeticAndCircleJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_bearing_and_circle::logic::intersect_geodetic_and_circle.dart::IntersectGeodeticAndCircleJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::IntersectGeodeticAndCircle" {
  +_IntersectBearingAndCircleState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::IntersectGeodeticAndCircle"

class "gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::_IntersectBearingAndCircleState" {
  -List<LatLng> _currentIntersections
  -BaseCoordinate _currentCoordsStart
  -DoubleText _currentBearingStart
  -BaseCoordinate _currentCoordsCircle
  -double _currentRadiusCircle
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -GCWMapPoint _getEndPoint()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::_IntersectBearingAndCircleState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::_IntersectBearingAndCircleState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::_IntersectBearingAndCircleState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersect_bearing_and_circle::widget::intersect_bearing_and_circle.dart::_IntersectBearingAndCircleState"

class "gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::IntersectBearings" {
  +_IntersectBearingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::IntersectBearings"

class "gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState" {
  -LatLng? _currentIntersection
  -BaseCoordinate _currentCoords1
  -DoubleText _currentBearing1
  -BaseCoordinate _currentCoords2
  -DoubleText _currentBearing2
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  +Widget build()
  -GCWMapPoint _getEndLine1()
  -GCWMapPoint _getEndLine2()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersect_lines::intersect_bearings::widget::intersect_bearings.dart::_IntersectBearingsState"

class "gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::IntersectFourPoints" {
  +_IntersectFourPointsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::IntersectFourPoints"

class "gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::_IntersectFourPointsState" {
  -LatLng? _currentIntersection
  -BaseCoordinate _currentCoords11
  -BaseCoordinate _currentCoords12
  -BaseCoordinate _currentCoords21
  -BaseCoordinate _currentCoords22
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::_IntersectFourPointsState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::_IntersectFourPointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::_IntersectFourPointsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersect_lines::intersect_four_points::widget::intersect_four_points.dart::_IntersectFourPointsState"

class "gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectBearingJobData" {
  +LatLng coord1
  +double az13
  +LatLng coord2
  +double az23
  +Ellipsoid ells
  +bool crossbearing
}

"gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectBearingJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectBearingJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectFourPointsJobData" {
  +LatLng coord11
  +LatLng coord12
  +LatLng coord21
  +LatLng coord22
  +Ellipsoid ells
}

"gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectFourPointsJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_lines::logic::intersect_lines.dart::IntersectFourPointsJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersect_three_circles::logic::intersect_three_circles.dart::IntersectThreeCirclesJobData" {
  +LatLng coord1
  +double dist14
  +LatLng coord2
  +double dist24
  +LatLng coord3
  +double dist34
  +double accuracy
  +Ellipsoid ells
}

"gc_wizard::tools::coords::intersect_three_circles::logic::intersect_three_circles.dart::IntersectThreeCirclesJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_three_circles::logic::intersect_three_circles.dart::IntersectThreeCirclesJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersect_three_circles::logic::intersect_three_circles.dart::Intersect" {
  +LatLng coords
  +double accuracy
}

"gc_wizard::tools::coords::intersect_three_circles::logic::intersect_three_circles.dart::Intersect" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::IntersectThreeCircles" {
  +_IntersectThreeCirclesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::IntersectThreeCircles"

class "gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::_IntersectThreeCirclesState" {
  -List<Intersect> _currentIntersections
  -BaseCoordinate _currentCoords1
  -double _currentRadius1
  -BaseCoordinate _currentCoords2
  -double _currentRadius2
  -BaseCoordinate _currentCoords3
  -double _currentRadius3
  -CoordinateFormat _currentOutputFormat
  -Length _currentOutputUnit
  -List<String> _currentOutput
  -List<String> _currentCopyableOutput
  -List<GCWMapPoint> _currentMapPoints
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::_IntersectThreeCirclesState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::_IntersectThreeCirclesState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::_IntersectThreeCirclesState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersect_three_circles::widget::intersect_three_circles.dart::_IntersectThreeCirclesState"

class "gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesJobData" {
  +LatLng coord1
  +double radius1
  +LatLng coord2
  +double radius2
  +Ellipsoid ells
}

"gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::_IntersectTwoCirclesCalculator" {
  +bool checkCell()
}

"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" <|-- "gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::_IntersectTwoCirclesCalculator"

class "gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesParameters" {
  +LatLng coordinate1
  +double radius1
  +LatLng coordinate2
  +double radius2
}

"gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesParameters" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculatorParameters" <|-- "gc_wizard::tools::coords::intersect_two_circles::logic::intersect_two_circles.dart::IntersectTwoCirclesParameters"

class "gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::IntersectTwoCircles" {
  +_IntersectTwoCirclesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::IntersectTwoCircles"

class "gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::_IntersectTwoCirclesState" {
  -List<LatLng> _currentIntersections
  -BaseCoordinate _currentCoords1
  -double _currentRadius1
  -BaseCoordinate _currentCoords2
  -double _currentRadius2
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::_IntersectTwoCirclesState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::_IntersectTwoCirclesState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::intersect_two_circles::widget::intersect_two_circles.dart::_IntersectTwoCirclesState"

class "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" {
  +String? uuid
  +LatLng point
  +String? markerText
  +Color color
  +CoordinateFormat? coordinateFormat
  +bool isEditable
  +GCWMapCircle? circle
  +bool circleColorSameAsPointColor
  +bool isVisible
  +bool hasCircle()
  +void update()
}

"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" o-- "dart::ui::Color"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapCircle"

abstract class "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapSimpleGeometry" {
}

class "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapLine" {
  +GCWMapPolyline parent
  +GCWMapPoint start
  +GCWMapPoint? end
  +double length
  +double bearingAB
  +double bearingBA
  +List<LatLng> shape
  -void _calculateGeodetic()
}

"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapLine" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPolyline"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapLine" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapSimpleGeometry" <|-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapLine"

class "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPolyline" {
  +String? uuid
  +List<GCWMapPoint> points
  +Color color
  +List<GCWMapLine> lines
  +double length
  +void update()
}

"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPolyline" o-- "dart::ui::Color"

class "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapCircle" {
  +LatLng centerPoint
  +double radius
  +Color color
  +List<LatLng> shape
  -void _update()
}

"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapCircle" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapCircle" o-- "dart::ui::Color"
"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapSimpleGeometry" <|-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapCircle"

class "gc_wizard::tools::coords::map_view::persistence::mapview_persistence_adapter.dart::MapViewPersistenceAdapter" {
  +GCWMapView mapWidget
  -MapViewDAO _mapViewDAO
  {static} +MapPointDAO gcwMapPointToMapPointDAO()
  -GCWMapPoint _mapPointDAOToGCWMapPoint()
  {static} +MapPolylineDAO gcwMapPolylineToMapPolylineDAO()
  -GCWMapPolyline _mapPolylineDAOToGCWMapPolyline()
  -void _initializeMapView()
  -void _restoreMapViewDAO()
  +GCWMapPoint addMapPoint()
  -MapPointDAO _mapPointDAOByUUID()
  -MapPolylineDAO _mapPolylineDAOByUUID()
  +void updateMapPoint()
  +void updateMapPolyline()
  +void removeMapPointFromMapPolyline()
  +void removeMapPoint()
  +void removeMapPolyline()
  +void clearMapView()
  +GCWMapPolyline createMapPolyline()
  +void addMapPointIntoPolyline()
  +String getJsonMapViewData()
  +bool setJsonMapViewData()
  +void addViewData()
  -String _replaceJsonMarker()
  -String _removeEmptyElements()
  -String _restoreUUIDs()
  -void _addMapViewDAO()
}

"gc_wizard::tools::coords::map_view::persistence::mapview_persistence_adapter.dart::MapViewPersistenceAdapter" o-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::GCWMapView"
"gc_wizard::tools::coords::map_view::persistence::mapview_persistence_adapter.dart::MapViewPersistenceAdapter" o-- "gc_wizard::tools::coords::map_view::persistence::model.dart::MapViewDAO"

class "gc_wizard::tools::coords::map_view::persistence::model.dart::MapViewDAO" {
  +int? id
  +String? name
  +List<MapPointDAO> points
  +List<MapPolylineDAO> polylines
  +Map<String, Object?> toMap()
  +String toString()
}

class "gc_wizard::tools::coords::map_view::persistence::model.dart::MapPointDAO" {
  +String uuid
  +String? name
  +double latitude
  +double longitude
  +String coordinateFormat
  +bool isVisible
  +String color
  +double? radius
  +bool circleColorSameAsColor
  +String? circleColor
  +bool? isEditable
  +Map<String, Object?> toMap()
  +String toString()
}

class "gc_wizard::tools::coords::map_view::persistence::model.dart::MapPolylineDAO" {
  +String uuid
  +List<String> pointUUIDs
  +String color
  +Map<String, Object?> toMap()
  +String toString()
}

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::GCWMapView" {
  +List<GCWMapPoint> points
  +List<GCWMapPolyline> polylines
  +bool isEditable
  +_GCWMapViewState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::GCWMapView"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" {
  -MapController _mapController
  -_GCWMapPopupController _popupLayerController
  -_LayerType _currentLayer
  -String? _mapBoxToken
  -bool? _currentLocationPermissionGranted
  -StreamSubscription<LocationData>? _locationSubscription
  -Location _location
  -LatLng? _currentPosition
  -double? _currentAccuracy
  -bool _manuallyToggledPosition
  -bool _isPolylineDrawing
  -MapViewPersistenceAdapter? _persistanceAdapter
  +Length defaultLengthUnitGCWMapView
  -LatLngBounds _getBounds()
  -dynamic _loadToken()
  +void initState()
  +void dispose()
  -void _cancelLocationSubscription()
  -void _toggleLocationListening()
  -String _formatLengthOutput()
  -String _formatBearingOutput()
  +Widget build()
  -List<Widget> _buildLinesAndMarkersLayers()
  -void _showPolylineDialog()
  -bool _isOwnPosition()
  -List<_GCWMarker> _buildMarkers()
  -Widget _createDragableIcon()
  -Widget _createIconButtonIcons()
  -List<Widget> _buildEditButtons()
  -List<GCWIconButton> _buildLayerButtons()
  +void handleSignal()
  -String? _buildPopupCoordinateText()
  -String? _buildPopupCoordinateDescription()
  -Widget _buildPopup()
  -void _updateMapPoint()
  -List<Polyline> _addPolylines()
  -List<Polyline> _addCircles()
  -List<BaseCoordinate>? _parseCoords()
  -bool _importGpxKml()
  -void _loadCoordinatesFile()
}

"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "flutter_map::src::map::controller.dart::MapController"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapPopupController"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_LayerType"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "dart::async::StreamSubscription<LocationData>"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "location::location.dart::Location"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "gc_wizard::tools::coords::map_view::persistence::mapview_persistence_adapter.dart::MapViewPersistenceAdapter"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapViewState"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMarker" {
  +String? coordinateText
  +String? coordinateDescription
  +GCWMapPoint mapPoint
}

"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMarker" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint"
"flutter_map::src::layer::marker_layer.dart::Marker" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMarker"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWTappablePolyline" {
  +GCWMapSimpleGeometry child
}

"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWTappablePolyline" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapSimpleGeometry"
"flutter_map_tappable_polyline::flutter_map_tappable_polyline.dart::TaggedPolyline" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWTappablePolyline"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapPopupController" {
  +MapController? mapController
  +PopupController popupController
  +void hidePopup()
}

"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapPopupController" o-- "flutter_map::src::map::controller.dart::MapController"
"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWMapPopupController" o-- "flutter_map_marker_popup::src::controller::popup_controller.dart::PopupController"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWOwnLocationMapPoint" {
}

"gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_GCWOwnLocationMapPoint"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::CachedNetworkTileProvider" {
  +ImageProvider<Object> getImage()
}

"flutter_map::src::layer::tile_layer::tile_provider::base_tile_provider.dart::TileProvider" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::CachedNetworkTileProvider"

class "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_LayerType" {
  +int index
  {static} +List<_LayerType> values
  {static} +_LayerType OPENSTREETMAP_MAPNIK
  {static} +_LayerType MAPBOX_SATELLITE
}

"gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_LayerType" o-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_LayerType"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::map_view::widget::gcw_mapview.dart::_LayerType"

class "gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::MapPointEditor" {
  +GCWMapPoint mapPoint
  +Length lengthUnit
  +_MapPointEditorState createState()
}

"gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::MapPointEditor" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPoint"
"gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::MapPointEditor" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::MapPointEditor"

class "gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::_MapPointEditorState" {
  -TextEditingController _nameController
  -double _currentRadius
  -HSVColor _currentMarkerColorPickerColor
  -HSVColor _currentCircleColorPickerColor
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::_MapPointEditorState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::_MapPointEditorState" o-- "flutter::src::painting::colors.dart::HSVColor"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::map_view::widget::mappoint_editor.dart::_MapPointEditorState"

class "gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::MapPolylineEditor" {
  +GCWMapPolyline polyline
  +_MapPolylineEditorState createState()
}

"gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::MapPolylineEditor" o-- "gc_wizard::tools::coords::map_view::logic::map_geometries.dart::GCWMapPolyline"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::MapPolylineEditor"

class "gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::_MapPolylineEditorState" {
  -HSVColor _currentColorPickerColor
  +void initState()
  +Widget build()
}

"gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::_MapPolylineEditorState" o-- "flutter::src::painting::colors.dart::HSVColor"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::map_view::widget::mappolyline_editor.dart::_MapPolylineEditorState"

class "gc_wizard::tools::coords::map_view::widget::map_view.dart::MapView" {
  +_MapViewState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::map_view::widget::map_view.dart::MapView"

class "gc_wizard::tools::coords::map_view::widget::map_view.dart::_MapViewState" {
  +List<GCWMapPoint> points
  +List<GCWMapPolyline> polyGeodetics
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::map_view::widget::map_view.dart::_MapViewState"

class "gc_wizard::tools::coords::resection::logic::resection.dart::ResectionJobData" {
  +LatLng coord1
  +double angle12
  +LatLng coord2
  +double angle23
  +LatLng coord3
  +Ellipsoid ells
}

"gc_wizard::tools::coords::resection::logic::resection.dart::ResectionJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::resection::logic::resection.dart::ResectionJobData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::resection::logic::resection.dart::_ResectionCalculator" {
  -Interval _adjustInterval()
  -bool _overlap()
  +bool checkCell()
}

"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" <|-- "gc_wizard::tools::coords::resection::logic::resection.dart::_ResectionCalculator"

class "gc_wizard::tools::coords::resection::logic::resection.dart::ResectionParameters" {
  +LatLng coordinate1
  +double angle12
  +LatLng coordinate2
  +double angle23
  +LatLng coordinate3
}

"gc_wizard::tools::coords::resection::logic::resection.dart::ResectionParameters" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculatorParameters" <|-- "gc_wizard::tools::coords::resection::logic::resection.dart::ResectionParameters"

class "gc_wizard::tools::coords::resection::widget::resection.dart::Resection" {
  +_ResectionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::resection::widget::resection.dart::Resection"

class "gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState" {
  -List<LatLng> _currentIntersections
  -BaseCoordinate _currentCoords1
  -DoubleText _currentAngle12
  -BaseCoordinate _currentCoords2
  -DoubleText _currentAngle23
  -BaseCoordinate _currentCoords3
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -Ellipsoid _ellipsoid
  +Widget build()
  -Widget _buildSubmitButton()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::resection::widget::resection.dart::_ResectionState"

class "gc_wizard::tools::coords::segment_bearings::logic::segment_bearings.dart::SegmentedAngle" {
  +List<LatLng> points
  +double segmentAngle
}

class "gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::SegmentBearings" {
  +_SegmentBearingsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::SegmentBearings"

class "gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState" {
  -BaseCoordinate _currentCoordsStart
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -GCWSwitchPosition _currentInput1Mode
  -GCWSwitchPosition _currentInput2Mode
  -double _currentBearing1
  -double _currentBearing2
  -int _currentSegmentCount
  -double _currentDistance
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutputs
  -Widget _currentBearingOutput
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::segment_bearings::widget::segment_bearings.dart::_SegmentBearingsState"

class "gc_wizard::tools::coords::segment_line::logic::segment_line.dart::SegmentedLine" {
  +List<LatLng> points
  +double segmentLength
}

class "gc_wizard::tools::coords::segment_line::widget::segment_line.dart::SegmentLine" {
  +_SegmentLineState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::segment_line::widget::segment_line.dart::SegmentLine"

class "gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState" {
  -BaseCoordinate _currentCoords1
  -BaseCoordinate _currentCoords2
  -int _currentSegmentCount
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -Length _currentOutputUnit
  -CoordinateFormat _currentOutputFormat
  -List<String> _currentOutputs
  -Widget _currentDistanceOutput
  +void initState()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::segment_line::widget::segment_line.dart::_SegmentLineState"

class "gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::_ParsedCoordinates" {
  +BaseCoordinate coordinate
  +DMMCoordinate? leftPadCoordinate
}

"gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::_ParsedCoordinates" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::_ParsedCoordinates" o-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate"

class "gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::VariableCoordinateSingleResult" {
  +LatLng coordinate
  +Map<String, String>? variables
  +String toString()
}

"gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::VariableCoordinateSingleResult" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::variable_coordinate::logic::variable_latlon.dart::VariableCoordinateResults" {
  +List<VariableCoordinateSingleResult> coordinates
  +List<VariableCoordinateSingleResult> leftPadCoordinates
}

class "gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::ProjectionData" {
  +String distance
  +Length distanceUnit
  +String bearing
  +bool reverse
  +Ellipsoid? ellipsoid
  +Map<String, Object?> toMap()
  +String toString()
}

"gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::ProjectionData" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::ProjectionData" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::VariableCoordinateFormula" {
  +String formula
  +ProjectionData? projection
  +List<FormulaValue> values
  +Map<String, Object?> toMap()
  {static} +VariableCoordinateFormula fromJson()
  +String toString()
}

"gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::VariableCoordinateFormula" o-- "gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::ProjectionData"
"gc_wizard::tools::formula_solver::persistence::model.dart::FormulaBase" <|-- "gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::VariableCoordinateFormula"

class "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::VariableCoordinate" {
  +VariableCoordinateFormula formula
  +_VariableCoordinateState createState()
}

"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::VariableCoordinate" o-- "gc_wizard::tools::coords::variable_coordinate::persistence::model.dart::VariableCoordinateFormula"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::VariableCoordinate"

class "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" {
  -Widget _output
  -GCWSwitchPosition _currentCoordMode
  -Length _currentLengthUnit
  -bool _currentProjectionMode
  -CoordinateFormat _currentOutputFormat
  -TextEditingController _inputController
  -TextEditingController _bearingController
  -TextEditingController _distanceController
  -String _currentInput
  -String _currentBearingInput
  -String _currentDistanceInput
  -bool _currentReverseBearing
  -String _currentFromInput
  -String _currentToInput
  -List<Object> _currentOutput
  -List<GCWMapPoint> _currentMapPoints
  -bool _isOnLocationAccess
  -Location _location
  +void initState()
  +void dispose()
  -void _updateNewEntry()
  -void _addEntry()
  -void _updateEntry()
  +Widget build()
  -Widget _buildVariablesEditor()
  -Widget _buildProjectionInput()
  -Map<String, String> _getSubstitutions()
  -void _calculateOutput()
  -String _formatVariables()
  -void _buildOutput()
  -void _setUserLocationCoords()
}

"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState" o-- "location::location.dart::Location"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate.dart::_VariableCoordinateState"

class "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate_formulas.dart::VariableCoordinateFormulas" {
  +_VariableCoordinateFormulasState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate_formulas.dart::VariableCoordinateFormulas"

class "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate_formulas.dart::_VariableCoordinateFormulasState" {
  +void initState()
  +Widget build()
  -String _createImportName()
  -void _importFromClipboard()
  -void _addNewFormula()
  -GCWTool? _buildNavigateGCWTool()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::variable_coordinate::widget::variable_coordinate_formulas.dart::_VariableCoordinateFormulasState"

class "gc_wizard::tools::coords::waypoint_projection::logic::projection.dart::_ReverseProjectionCalculator" {
  +bool checkCell()
}

"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" <|-- "gc_wizard::tools::coords::waypoint_projection::logic::projection.dart::_ReverseProjectionCalculator"

class "gc_wizard::tools::coords::waypoint_projection::logic::projection.dart::ReverseProjectionParameters" {
  +LatLng coordinate
  +double bearing
  +double distance
}

"gc_wizard::tools::coords::waypoint_projection::logic::projection.dart::ReverseProjectionParameters" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculatorParameters" <|-- "gc_wizard::tools::coords::waypoint_projection::logic::projection.dart::ReverseProjectionParameters"

class "gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::WaypointProjection" {
  +_WaypointProjectionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::WaypointProjection"

class "gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::_WaypointProjectionState" {
  -BaseCoordinate _currentCoords
  -double _currentDistance
  -DoubleText _currentBearing
  -bool _currentReverse
  -List<LatLng> _currentValues
  -List<GCWMapPoint> _currentMapPoints
  -List<GCWMapPolyline> _currentMapPolylines
  -List<String> _currentOutput
  -CoordinateFormat _currentOutputFormat
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::_WaypointProjectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::_WaypointProjectionState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::_WaypointProjectionState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::waypoint_projection::widget::waypoint_projection.dart::_WaypointProjectionState"

class "gc_wizard::tools::coords::_common::formats::dec::logic::dec.dart::DECCoordinate" {
  +CoordinateFormat format
  {static} +DECCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +DECCoordinate fromLatLon()
  {static} +DECCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dec::logic::dec.dart::DECCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::dec::logic::dec.dart::DECCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dec::logic::dec.dart::DECCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::dec::logic::dec.dart::DECCoordinate"

class "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::_FormattedDMMPart" {
  +IntegerText sign
  +String degrees
  +String minutes
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::_FormattedDMMPart" o-- "gc_wizard::utils::complex_return_types.dart::IntegerText"

class "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::_DMMPart" {
  +int sign
  +int degrees
  +double minutes
  -_FormattedDMMPart _formatParts()
  -String _format()
  +String toString()
}

class "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLatitude" {
  {static} +DMMLatitude from()
  +_FormattedDMMPart formatParts()
  +String format()
}

"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::_DMMPart" <|-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLatitude"

class "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLongitude" {
  {static} +DMMLongitude from()
  +_FormattedDMMPart formatParts()
  +String format()
}

"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::_DMMPart" <|-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLongitude"

class "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate" {
  +DMMLatitude dmmLatitude
  +DMMLongitude dmmLongitude
  +CoordinateFormat format
  {static} +DMMCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +DMMCoordinate fromLatLon()
  {static} +DMMCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLatitude"
"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMLongitude"
"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::dmm::logic::dmm.dart::DMMCoordinate"

class "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::_FormattedDMSPart" {
  +IntegerText sign
  +String degrees
  +String minutes
  +String seconds
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::_FormattedDMSPart" o-- "gc_wizard::utils::complex_return_types.dart::IntegerText"

class "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::_DMSPart" {
  +int sign
  +int degrees
  +int minutes
  +double seconds
  -_FormattedDMSPart _formatParts()
  -String _format()
  +String toString()
}

class "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLatitude" {
  {static} +DMSLatitude from()
  +_FormattedDMSPart formatParts()
  +String format()
}

"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::_DMSPart" <|-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLatitude"

class "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLongitude" {
  {static} +DMSLongitude from()
  +_FormattedDMSPart formatParts()
  +String format()
}

"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::_DMSPart" <|-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLongitude"

class "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate" {
  +DMSLatitude dmsLatitude
  +DMSLongitude dmsLongitude
  +CoordinateFormat format
  {static} +DMSCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +DMSCoordinate fromLatLon()
  {static} +DMSCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLatitude"
"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSLongitude"
"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::dms::logic::dms.dart::DMSCoordinate"

class "gc_wizard::tools::coords::_common::formats::dutchgrid::logic::dutchgrid.dart::DutchGridCoordinate" {
  +double x
  +double y
  +CoordinateFormat format
  {static} +DutchGridCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +DutchGridCoordinate fromLatLon()
  {static} +DutchGridCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::dutchgrid::logic::dutchgrid.dart::DutchGridCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::dutchgrid::logic::dutchgrid.dart::DutchGridCoordinate" o-- "gc_wizard::tools::coords::_common::formats::dutchgrid::logic::dutchgrid.dart::DutchGridCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::dutchgrid::logic::dutchgrid.dart::DutchGridCoordinate"

class "gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate" {
  -CoordinateFormat _format
  +double easting
  +double northing
  {static} -String _ERROR_INVALID_SUBTYPE
  +CoordinateFormat format
  {static} +GaussKruegerCoordinate defaultCoordinate
  +CoordinateFormatKey defaultSubtype
  +LatLng toLatLng()
  {static} +GaussKruegerCoordinate fromLatLon()
  {static} +GaussKruegerCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate" o-- "gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate"
"gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes" <|-- "gc_wizard::tools::coords::_common::formats::gausskrueger::logic::gauss_krueger.dart::GaussKruegerCoordinate"

class "gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::Geo3x3Coordinate" {
  +String text
  +CoordinateFormat format
  {static} +Geo3x3Coordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +Geo3x3Coordinate fromLatLon()
  {static} +Geo3x3Coordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::Geo3x3Coordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::Geo3x3Coordinate" o-- "gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::Geo3x3Coordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::Geo3x3Coordinate"

class "gc_wizard::tools::coords::_common::formats::geo3x3::logic::geo3x3.dart::_Geo3x3" {
  {static} +String encode()
  {static} +List<double>? decode()
}

class "gc_wizard::tools::coords::_common::formats::geohash::logic::geohash.dart::GeohashCoordinate" {
  +String text
  +CoordinateFormat format
  {static} +GeohashCoordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +GeohashCoordinate fromLatLon()
  {static} +GeohashCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::geohash::logic::geohash.dart::GeohashCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::geohash::logic::geohash.dart::GeohashCoordinate" o-- "gc_wizard::tools::coords::_common::formats::geohash::logic::geohash.dart::GeohashCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::geohash::logic::geohash.dart::GeohashCoordinate"

class "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::GeoHexCoordinate" {
  +String text
  +CoordinateFormat format
  {static} +GeoHexCoordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +GeoHexCoordinate fromLatLon()
  {static} +GeoHexCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::GeoHexCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::GeoHexCoordinate" o-- "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::GeoHexCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::GeoHexCoordinate"

class "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::_Zone" {
  +double lat
  +double lon
  +int x
  +int y
  +String code
  +int getLevel()
  +double getHexSize()
  +List<_Loc> getHexCoords()
}

class "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::_XY" {
  +double x
  +double y
}

class "gc_wizard::tools::coords::_common::formats::geohex::logic::geohex.dart::_Loc" {
  +double lat
  +double lon
}

class "gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate" {
  -CoordinateFormat _format
  +double easting
  +double northing
  {static} -String _ERROR_INVALID_SUBTYPE
  +CoordinateFormat format
  {static} +LambertCoordinate defaultCoordinate
  +CoordinateFormatKey defaultSubtype
  +LatLng toLatLng()
  {static} +LambertCoordinate fromLatLon()
  {static} +LambertCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate" o-- "gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate"
"gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes" <|-- "gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::LambertCoordinate"

class "gc_wizard::tools::coords::_common::formats::lambert::logic::lambert.dart::_LambertDefinition" {
  +double centralMeridian
  +double latitudeOfOrigin
  +double standardParallel1
  +double standardParallel2
  +double falseEasting
  +double falseNorthing
}

class "gc_wizard::tools::coords::_common::formats::maidenhead::logic::maidenhead.dart::MaidenheadCoordinate" {
  +String text
  +CoordinateFormat format
  {static} +MaidenheadCoordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +MaidenheadCoordinate fromLatLon()
  {static} +MaidenheadCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::maidenhead::logic::maidenhead.dart::MaidenheadCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::maidenhead::logic::maidenhead.dart::MaidenheadCoordinate" o-- "gc_wizard::tools::coords::_common::formats::maidenhead::logic::maidenhead.dart::MaidenheadCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::maidenhead::logic::maidenhead.dart::MaidenheadCoordinate"

class "gc_wizard::tools::coords::_common::formats::makaney::logic::makaney.dart::MakaneyCoordinate" {
  +String text
  +CoordinateFormat format
  {static} +MakaneyCoordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +MakaneyCoordinate fromLatLon()
  {static} +MakaneyCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::makaney::logic::makaney.dart::MakaneyCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::makaney::logic::makaney.dart::MakaneyCoordinate" o-- "gc_wizard::tools::coords::_common::formats::makaney::logic::makaney.dart::MakaneyCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::makaney::logic::makaney.dart::MakaneyCoordinate"

class "gc_wizard::tools::coords::_common::formats::mercator::logic::mercator.dart::MercatorCoordinate" {
  +double easting
  +double northing
  +CoordinateFormat format
  {static} +MercatorCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +MercatorCoordinate fromLatLon()
  {static} +MercatorCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::mercator::logic::mercator.dart::MercatorCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::mercator::logic::mercator.dart::MercatorCoordinate" o-- "gc_wizard::tools::coords::_common::formats::mercator::logic::mercator.dart::MercatorCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::mercator::logic::mercator.dart::MercatorCoordinate"

class "gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate" {
  +UTMZone utmZone
  +String digraph
  +double easting
  +double northing
  +CoordinateFormat format
  {static} +MGRSCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +MGRSCoordinate fromLatLon()
  {static} +MGRSCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate" o-- "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMZone"
"gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate" o-- "gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::mgrs_utm::logic::mgrs.dart::MGRSCoordinate"

class "gc_wizard::tools::coords::_common::formats::natural_area_code::logic::natural_area_code.dart::NaturalAreaCodeCoordinate" {
  +String x
  +String y
  +CoordinateFormat format
  {static} +NaturalAreaCodeCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +NaturalAreaCodeCoordinate fromLatLon()
  {static} +NaturalAreaCodeCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::natural_area_code::logic::natural_area_code.dart::NaturalAreaCodeCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::natural_area_code::logic::natural_area_code.dart::NaturalAreaCodeCoordinate" o-- "gc_wizard::tools::coords::_common::formats::natural_area_code::logic::natural_area_code.dart::NaturalAreaCodeCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::natural_area_code::logic::natural_area_code.dart::NaturalAreaCodeCoordinate"

class "gc_wizard::tools::coords::_common::formats::openlocationcode::logic::open_location_code.dart::OpenLocationCodeCoordinate" {
  +String text
  +CoordinateFormat format
  {static} +OpenLocationCodeCoordinate defaultCoordinate
  +LatLng? toLatLng()
  {static} +OpenLocationCodeCoordinate fromLatLon()
  {static} +OpenLocationCodeCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::openlocationcode::logic::open_location_code.dart::OpenLocationCodeCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::openlocationcode::logic::open_location_code.dart::OpenLocationCodeCoordinate" o-- "gc_wizard::tools::coords::_common::formats::openlocationcode::logic::open_location_code.dart::OpenLocationCodeCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::openlocationcode::logic::open_location_code.dart::OpenLocationCodeCoordinate"

class "gc_wizard::tools::coords::_common::formats::quadtree::logic::quadtree.dart::QuadtreeCoordinate" {
  +List<int> coords
  +CoordinateFormat format
  {static} +QuadtreeCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +QuadtreeCoordinate? parse()
  {static} +QuadtreeCoordinate fromLatLon()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::quadtree::logic::quadtree.dart::QuadtreeCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::quadtree::logic::quadtree.dart::QuadtreeCoordinate" o-- "gc_wizard::tools::coords::_common::formats::quadtree::logic::quadtree.dart::QuadtreeCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::quadtree::logic::quadtree.dart::QuadtreeCoordinate"

class "gc_wizard::tools::coords::_common::formats::reversewherigo_day1976::logic::reverse_wherigo_day1976.dart::ReverseWherigoDay1976Coordinate" {
  +String s
  +String t
  +CoordinateFormat format
  {static} +ReverseWherigoDay1976Coordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +ReverseWherigoDay1976Coordinate fromLatLon()
  {static} +ReverseWherigoDay1976Coordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::reversewherigo_day1976::logic::reverse_wherigo_day1976.dart::ReverseWherigoDay1976Coordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::reversewherigo_day1976::logic::reverse_wherigo_day1976.dart::ReverseWherigoDay1976Coordinate" o-- "gc_wizard::tools::coords::_common::formats::reversewherigo_day1976::logic::reverse_wherigo_day1976.dart::ReverseWherigoDay1976Coordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::reversewherigo_day1976::logic::reverse_wherigo_day1976.dart::ReverseWherigoDay1976Coordinate"

class "gc_wizard::tools::coords::_common::formats::reversewherigo_waldmeister::logic::reverse_wherigo_waldmeister.dart::ReverseWherigoWaldmeisterCoordinate" {
  +int a
  +int b
  +int c
  +CoordinateFormat format
  {static} +ReverseWherigoWaldmeisterCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +ReverseWherigoWaldmeisterCoordinate fromLatLon()
  {static} +ReverseWherigoWaldmeisterCoordinate? parse()
  -String _leftPadComponent()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::reversewherigo_waldmeister::logic::reverse_wherigo_waldmeister.dart::ReverseWherigoWaldmeisterCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::reversewherigo_waldmeister::logic::reverse_wherigo_waldmeister.dart::ReverseWherigoWaldmeisterCoordinate" o-- "gc_wizard::tools::coords::_common::formats::reversewherigo_waldmeister::logic::reverse_wherigo_waldmeister.dart::ReverseWherigoWaldmeisterCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::reversewherigo_waldmeister::logic::reverse_wherigo_waldmeister.dart::ReverseWherigoWaldmeisterCoordinate"

class "gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate" {
  -CoordinateFormat _format
  +double x
  +double y
  {static} -String _ERROR_INVALID_SUBTYPE
  +CoordinateFormat format
  {static} +SlippyMapCoordinate defaultCoordinate
  +CoordinateFormatKey defaultSubtype
  +LatLng toLatLng()
  {static} +SlippyMapCoordinate fromLatLon()
  {static} +SlippyMapCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate" o-- "gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate"
"gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes" <|-- "gc_wizard::tools::coords::_common::formats::slippymap::logic::slippy_map.dart::SlippyMapCoordinate"

class "gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate" {
  +double easting
  +double northing
  +CoordinateFormat format
  {static} +SwissGridCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +SwissGridCoordinate fromLatLon()
  {static} +SwissGridCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate" o-- "gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate"

class "gc_wizard::tools::coords::_common::formats::swissgridplus::logic::swissgridplus.dart::SwissGridPlusCoordinate" {
  +CoordinateFormat format
  {static} +SwissGridPlusCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +SwissGridPlusCoordinate fromLatLon()
  {static} +SwissGridPlusCoordinate? parse()
}

"gc_wizard::tools::coords::_common::formats::swissgridplus::logic::swissgridplus.dart::SwissGridPlusCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::swissgridplus::logic::swissgridplus.dart::SwissGridPlusCoordinate" o-- "gc_wizard::tools::coords::_common::formats::swissgridplus::logic::swissgridplus.dart::SwissGridPlusCoordinate"
"gc_wizard::tools::coords::_common::formats::swissgrid::logic::swissgrid.dart::SwissGridCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::swissgridplus::logic::swissgridplus.dart::SwissGridPlusCoordinate"

class "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate" {
  +UTMZone zone
  +double easting
  +double northing
  +CoordinateFormat format
  +HemisphereLatitude hemisphere
  {static} +UTMREFCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +UTMREFCoordinate fromLatLon()
  {static} +UTMREFCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate" o-- "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMZone"
"gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLatitude"
"gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate" o-- "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMREFCoordinate"

class "gc_wizard::tools::coords::_common::formats::utm::logic::utm.dart::UTMZone" {
  +int lonZone
  +int lonZoneRegular
  +String latZone
}

class "gc_wizard::tools::coords::_common::formats::xyz::logic::xyz.dart::XYZCoordinate" {
  +double x
  +double y
  +double z
  +CoordinateFormat format
  {static} +XYZCoordinate defaultCoordinate
  +LatLng toLatLng()
  {static} +XYZCoordinate fromLatLon()
  {static} +XYZCoordinate? parse()
  +String toString()
}

"gc_wizard::tools::coords::_common::formats::xyz::logic::xyz.dart::XYZCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::formats::xyz::logic::xyz.dart::XYZCoordinate" o-- "gc_wizard::tools::coords::_common::formats::xyz::logic::xyz.dart::XYZCoordinate"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::formats::xyz::logic::xyz.dart::XYZCoordinate"

abstract class "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" {
  +double latitude
  +double longitude
  +CoordinateFormat format
  {static} +BaseCoordinate defaultCoordinate
  +LatLng? toLatLng()
  +String toString()
}

"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"

abstract class "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes" {
  +CoordinateFormatKey? defaultSubtype
}

"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate" <|-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinateWithSubtypes"

class "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLatitude" {
  +int index
  {static} +List<HemisphereLatitude> values
  {static} +HemisphereLatitude North
  {static} +HemisphereLatitude South
}

"gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLatitude" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLatitude"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLatitude"

class "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLongitude" {
  +int index
  {static} +List<HemisphereLongitude> values
  {static} +HemisphereLongitude East
  {static} +HemisphereLongitude West
}

"gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLongitude" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLongitude"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::HemisphereLongitude"

class "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat" {
  +CoordinateFormatKey type
  +CoordinateFormatKey? subtype
  {static} +CoordinateFormat fromPersistenceKey()
  +String toString()
}

"gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"

class "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatDefinition" {
  +CoordinateFormatKey type
  +BaseCoordinate defaultCoordinate
  +String persistenceKey
}

"gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatDefinition" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatDefinition" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"

class "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatWithSubtypesDefinition" {
  +List<CoordinateFormatDefinition> subtypes
}

"gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatDefinition" <|-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormatWithSubtypesDefinition"

class "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey" {
  +int index
  {static} +List<CoordinateFormatKey> values
  {static} +CoordinateFormatKey ALL
  {static} +CoordinateFormatKey DEC
  {static} +CoordinateFormatKey DMM
  {static} +CoordinateFormatKey DMS
  {static} +CoordinateFormatKey UTM
  {static} +CoordinateFormatKey MGRS
  {static} +CoordinateFormatKey XYZ
  {static} +CoordinateFormatKey SWISS_GRID
  {static} +CoordinateFormatKey SWISS_GRID_PLUS
  {static} +CoordinateFormatKey DUTCH_GRID
  {static} +CoordinateFormatKey GAUSS_KRUEGER
  {static} +CoordinateFormatKey LAMBERT
  {static} +CoordinateFormatKey MAIDENHEAD
  {static} +CoordinateFormatKey MERCATOR
  {static} +CoordinateFormatKey NATURAL_AREA_CODE
  {static} +CoordinateFormatKey SLIPPY_MAP
  {static} +CoordinateFormatKey GEOHASH
  {static} +CoordinateFormatKey GEO3X3
  {static} +CoordinateFormatKey GEOHEX
  {static} +CoordinateFormatKey OPEN_LOCATION_CODE
  {static} +CoordinateFormatKey MAKANEY
  {static} +CoordinateFormatKey QUADTREE
  {static} +CoordinateFormatKey REVERSE_WIG_WALDMEISTER
  {static} +CoordinateFormatKey REVERSE_WIG_DAY1976
  {static} +CoordinateFormatKey GAUSS_KRUEGER_GK1
  {static} +CoordinateFormatKey GAUSS_KRUEGER_GK2
  {static} +CoordinateFormatKey GAUSS_KRUEGER_GK3
  {static} +CoordinateFormatKey GAUSS_KRUEGER_GK4
  {static} +CoordinateFormatKey GAUSS_KRUEGER_GK5
  {static} +CoordinateFormatKey LAMBERT93
  {static} +CoordinateFormatKey LAMBERT2008
  {static} +CoordinateFormatKey ETRS89LCC
  {static} +CoordinateFormatKey LAMBERT72
  {static} +CoordinateFormatKey LAMBERT93_CC42
  {static} +CoordinateFormatKey LAMBERT93_CC43
  {static} +CoordinateFormatKey LAMBERT93_CC44
  {static} +CoordinateFormatKey LAMBERT93_CC45
  {static} +CoordinateFormatKey LAMBERT93_CC46
  {static} +CoordinateFormatKey LAMBERT93_CC47
  {static} +CoordinateFormatKey LAMBERT93_CC48
  {static} +CoordinateFormatKey LAMBERT93_CC49
  {static} +CoordinateFormatKey LAMBERT93_CC50
  {static} +CoordinateFormatKey SLIPPYMAP_0
  {static} +CoordinateFormatKey SLIPPYMAP_1
  {static} +CoordinateFormatKey SLIPPYMAP_2
  {static} +CoordinateFormatKey SLIPPYMAP_3
  {static} +CoordinateFormatKey SLIPPYMAP_4
  {static} +CoordinateFormatKey SLIPPYMAP_5
  {static} +CoordinateFormatKey SLIPPYMAP_6
  {static} +CoordinateFormatKey SLIPPYMAP_7
  {static} +CoordinateFormatKey SLIPPYMAP_8
  {static} +CoordinateFormatKey SLIPPYMAP_9
  {static} +CoordinateFormatKey SLIPPYMAP_10
  {static} +CoordinateFormatKey SLIPPYMAP_11
  {static} +CoordinateFormatKey SLIPPYMAP_12
  {static} +CoordinateFormatKey SLIPPYMAP_13
  {static} +CoordinateFormatKey SLIPPYMAP_14
  {static} +CoordinateFormatKey SLIPPYMAP_15
  {static} +CoordinateFormatKey SLIPPYMAP_16
  {static} +CoordinateFormatKey SLIPPYMAP_17
  {static} +CoordinateFormatKey SLIPPYMAP_18
  {static} +CoordinateFormatKey SLIPPYMAP_19
  {static} +CoordinateFormatKey SLIPPYMAP_20
  {static} +CoordinateFormatKey SLIPPYMAP_21
  {static} +CoordinateFormatKey SLIPPYMAP_22
  {static} +CoordinateFormatKey SLIPPYMAP_23
  {static} +CoordinateFormatKey SLIPPYMAP_24
  {static} +CoordinateFormatKey SLIPPYMAP_25
  {static} +CoordinateFormatKey SLIPPYMAP_26
  {static} +CoordinateFormatKey SLIPPYMAP_27
  {static} +CoordinateFormatKey SLIPPYMAP_28
  {static} +CoordinateFormatKey SLIPPYMAP_29
  {static} +CoordinateFormatKey SLIPPYMAP_30
}

"gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"

class "gc_wizard::tools::coords::_common::logic::coordinate_format_metadata.dart::CoordinateFormatMetadata" {
  +CoordinateFormatKey type
  +String persistenceKey
  +String name
  +List<CoordinateFormatMetadata>? subtypes
  +String example
}

"gc_wizard::tools::coords::_common::logic::coordinate_format_metadata.dart::CoordinateFormatMetadata" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"

class "gc_wizard::tools::coords::_common::logic::distance_bearing.dart::DistanceBearingData" {
  +double distance
  +double bearingAToB
  +double bearingBToA
  +double bearingAToBInRadian
  +double bearingBToAInRadian
  +String toString()
}

class "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid" {
  +String? name
  +double a
  +double invf
  +EllipsoidType type
  +double b
  +double sphereRad
  +double f
  +double e
  +double e2
  +String toString()
}

"gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::EllipsoidType"

class "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::EllipsoidType" {
  +int index
  {static} +List<EllipsoidType> values
  {static} +EllipsoidType STANDARD
  {static} +EllipsoidType USER_DEFINED
}

"gc_wizard::tools::coords::_common::logic::ellipsoid.dart::EllipsoidType" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::EllipsoidType"
"dart::core::Enum" <|-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::EllipsoidType"

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_GeoMath" {
  {static} +int digits
  {static} +double sq()
  {static} +double asinh()
  {static} +double pi()
  {static} +double degree()
  {static} +double log1p()
  {static} +double atanh()
  {static} +void norm()
  {static} +void sum()
  {static} +double hypot()
  {static} +double expm1()
  {static} +double polyval()
  {static} +double AngRound()
  {static} +double remainder()
  {static} +double AngNormalize()
  {static} +double LatFix()
  {static} +void AngDiff()
  {static} +void sincosd()
  {static} +double atan2d()
  {static} +bool isfinite()
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::Geodesic" {
  {static} +int GEOGRAPHICLIB_GEODESIC_ORDER
  {static} +int nA1_
  {static} +int nC1_
  {static} +int nC1p_
  {static} +int nA2_
  {static} +int nC2_
  {static} +int nA3_
  {static} +int nA3x_
  {static} +int nC3_
  {static} +int nC3x_
  {static} +int nC4_
  {static} +int nC4x_
  {static} -int _maxit1_
  {static} -int _maxit2_
  {static} +double tiny_
  {static} -double _tol0_
  {static} -double _tol1_
  {static} -double _tol2_
  {static} -double _tolb_
  {static} -double _xthresh_
  +double a
  +double f
  +double f1
  +double e2
  +double ep2
  +double b
  +double c2
  -double _n
  -double _etol2
  -List<double> _A3x
  -List<double> _C3x
  -List<double> _C4x
  +GeodesicData direct()
  -GeodesicData _direct()
  +GeodesicData inverse()
  -_InverseData _inverseInt()
  -GeodesicData _inverse()
  {static} +double SinCosSeries()
  -void _Lengths()
  {static} -double _Astroid()
  -_InverseStartV _InverseStart()
  -void _Lambda12()
  +double A3f()
  +void C3f()
  +void C4f()
  {static} +double A1m1f()
  {static} +void C1f()
  {static} +void C1pf()
  {static} +double A2m1f()
  {static} +void C2f()
  +void A3coeff()
  +void C3coeff()
  +void C4coeff()
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_InverseData" {
  -GeodesicData _g
  -double _salp1
  -double _calp1
  -double _salp2
  -double _calp2
}

"gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_InverseData" o-- "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::GeodesicData"

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_LengthsV" {
  -double _s12b
  -double _m12b
  -double _m0
  -double _M12
  -double _M21
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_Lambda12V" {
  +double lam12
  +double salp2
  +double calp2
  +double sig12
  +double ssig1
  +double csig1
  +double ssig2
  +double csig2
  +double eps
  +double domg12
  +double dlam12
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_InverseStartV" {
  -double _sig12
  -double _salp1
  -double _calp1
  -double? _salp2
  -double? _calp2
  -double? _dnm
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::GeodesicData" {
  +double lat1
  +double lon1
  +double azi1
  +double lat2
  +double lon2
  +double azi2
  +double s12
  +double a12
  +double m12
  +double M12
  +double M21
  +double S12
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_GeodesicLine" {
  {static} -int _nC1_
  {static} -int _nC1p_
  {static} -int _nC2_
  {static} -int _nC3_
  {static} -int _nC4_
  -double _lat1
  -double _lon1
  -double _azi1
  -double _a
  -double _f
  -double _b
  -double _c2
  -double _f1
  -double _salp0
  -double _calp0
  -double _k2
  -double _salp1
  -double _calp1
  -double _ssig1
  -double _csig1
  -double _dn1
  -double _stau1
  -double _ctau1
  -double _somg1
  -double _comg1
  -double _A1m1
  -double _A2m1
  -double _A3c
  -double _B11
  -double _B21
  -double _B31
  -double _A4
  -double _B41
  -List<double> _C1a
  -List<double> _C1pa
  -List<double> _C2a
  -List<double> _C3a
  -List<double> _C4a
  -int _caps
  -void _LineInit()
  +GeodesicData Position()
  -bool _Init()
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_GeodesicMask" {
  {static} +int CAP_NONE
  {static} +int CAP_C1
  {static} +int CAP_C1p
  {static} +int CAP_C2
  {static} +int CAP_C3
  {static} +int CAP_C4
  {static} +int OUT_MASK
  {static} +int NONE
  {static} +int LATITUDE
  {static} +int LONGITUDE
  {static} +int AZIMUTH
  {static} +int DISTANCE
  {static} +int STANDARD
  {static} +int DISTANCE_IN
  {static} +int REDUCEDLENGTH
  {static} +int GEODESICSCALE
  {static} +int AREA
  {static} +int LONG_UNROLL
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::LambertConformalConic" {
  -double _a
  -double _f
  -double _fm
  -double _e2
  -double _e
  -double _e2m
  -double _sign
  -double _n
  -double _nc
  -double _t0nm1
  -double _scale
  -double _k0
  -double _scbet0
  -double _tchi0
  -double _scchi0
  -double _psi0
  -double _nrho0
  {static} +double eps_
  {static} +double epsx_
  {static} +double tol_
  {static} +double ahypover_
  {static} +int numit_
  {static} +double hyp()
  +double eatanhe()
  {static} +double Dhyp()
  {static} +double Dsn()
  {static} +double Dlog1p()
  {static} +double Dexp()
  {static} +double Dsinh()
  {static} +double Dasinh()
  +double Deatanhe()
  -void _init()
  +GeographicLibLambert forward()
  +GeographicLibLambertLatLon Reverse()
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::GeographicLibLambert" {
  +double x
  +double y
  +double gamma
  +double k
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::GeographicLibLambertLatLon" {
  +double lat
  +double lon
  +double gamma
  +double k
}

class "gc_wizard::tools::coords::_common::logic::external_libs::net.sf.geographic_lib::geographic_lib.dart::_Pair" {
  +double first
  +double second
}

class "gc_wizard::tools::coords::_common::logic::geoarc_intercept.dart::_PerpInterceptValue" {
  +LatLng coordinate
  +double distance
  +double bearing
}

"gc_wizard::tools::coords::_common::logic::geoarc_intercept.dart::_PerpInterceptValue" o-- "latlong2::latlong.dart::LatLng"

class "gc_wizard::tools::coords::_common::logic::gpx_kml_export.dart::_GpxWriter" {
  +String asString()
  +XmlNode asXml()
  -XmlNode _build()
  -void _writePoint()
  -void _writeLines()
  -void _writeElement()
  -void _writeAttribute()
}

class "gc_wizard::tools::coords::_common::logic::gpx_kml_export.dart::_KmlWriter" {
  +List<String> elementNames
  +String asString()
  +XmlNode asXml()
  -XmlNode _build()
  -String _checkName()
  -void _writePoint()
  -void _writeLines()
  -void _writeElement()
  -String _ColorCode()
}

class "gc_wizard::tools::coords::_common::logic::gpx_kml_import.dart::_GpxReader" {
  -MapViewDAO? _parse()
  -GCWMapPoint? _readPoint()
  -GCWMapPolyline _readLine()
}

class "gc_wizard::tools::coords::_common::logic::gpx_kml_import.dart::_KmlReader" {
  -MapViewDAO? _parse()
  -List<GCWMapPolyline> _readPoints()
  -GCWMapPoint _readPointStyleMap()
  -GCWMapPoint _readPointStyle()
  -void _restorePoints()
  -Color _ColorCode()
}

class "gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::Interval" {
  +double a
  +double b
  +bool equals()
  +String toString()
}

class "gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::CoordinateCell" {
  +Interval latInterval
  +Interval lonInterval
  +Ellipsoid ellipsoid
  -LatLng? _cellCenter
  +LatLng cellCenter
  +double maxHeight
  +double maxWidth
  +double approxMaxRadius
  +String toString()
  +Interval distanceTo()
  +Interval bearingTo()
}

"gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::CoordinateCell" o-- "gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::Interval"
"gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::CoordinateCell" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"
"gc_wizard::tools::coords::_common::logic::intervals::coordinate_cell.dart::CoordinateCell" o-- "latlong2::latlong.dart::LatLng"

abstract class "gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculatorParameters" {
}

abstract class "gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" {
  -int _MAX_CELLCOUNT
  -double _deltaResults
  +List<LatLng> results
  +List<CoordinateCell> cells
  +IntervalCalculatorParameters parameters
  +Ellipsoid ells
  +double eps
  -bool _overlap
  +bool checkCell()
  -bool _resultExists()
  -void _divideCell()
  -void _initializeCells()
  +List<LatLng> check()
}

"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" o-- "gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculatorParameters"
"gc_wizard::tools::coords::_common::logic::intervals::interval_calculator.dart::IntervalCalculator" o-- "gc_wizard::tools::coords::_common::logic::ellipsoid.dart::Ellipsoid"

class "gc_wizard::tools::coords::_common::widget::coord_format_inputs::degrees_lat_textinputformatter.dart::DegreesLatTextInputFormatter" {
  +bool allowNegativeValues
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::coord_format_inputs::degrees_lat_textinputformatter.dart::DegreesLatTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::coord_format_inputs::degrees_lon_textinputformatter.dart::DegreesLonTextInputFormatter" {
  +bool allowNegativeValues
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::coord_format_inputs::degrees_lon_textinputformatter.dart::DegreesLonTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoords" {
  +void Function(BaseCoordinate) onChanged
  +LatLng? coordinates
  +CoordinateFormat coordsFormat
  +String? title
  +bool? notitle
  +_GCWCoordsState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoords" o-- "null::void Function(BaseCoordinate)"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoords" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoords" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoords"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsState" {
  -BaseCoordinate _currentCoords
  -bool _hasSetCoords
  -bool _resetCoords
  -Widget? _currentWidget
  -Location _location
  -bool _isOnLocationAccess
  +void initState()
  -BaseCoordinate _buildCoord()
  +Widget build()
  -GCWCoordsFormatSelector _buildInputFormatSelector()
  -Row _buildTrailingButtons()
  -void _setCurrentValueAndEmitOnChange()
  -void _setCoords()
  -void _setUserLocationCoords()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsState" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsState" o-- "location::location.dart::Location"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsState"

abstract class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" {
  +bool initialize
  +BaseCoordinate coordinates
  +void Function(BaseCoordinate?) onChanged
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" o-- "null::void Function(BaseCoordinate)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget"

abstract class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"

abstract class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetWithSubtypeInfo" {
  +List<_GCWCoordWidgetSubtypeInfo> subtypes
  +Widget inputWidget()
  +Widget outputWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetWithSubtypeInfo"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetSubtypeInfo" {
  +CoordinateFormatKey type
  +String name
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetSubtypeInfo" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDEC" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDEC" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDEC"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDEC" {
  +_GCWCoordsDECState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDEC"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDECState" {
  -TextEditingController _LatDegreesController
  -TextEditingController _LatMilliDegreesController
  -TextEditingController _LonDegreesController
  -TextEditingController _LonMilliDegreesController
  -FocusNode _latMilliDegreesFocusNode
  -FocusNode _lonMilliDegreesFocusNode
  -int _currentLatSign
  -int _currentLonSign
  -String _currentLatDegrees
  -String _currentLatMilliDegrees
  -String _currentLonDegrees
  -String _currentLonMilliDegrees
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDECState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDECState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDECState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMM" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMM" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMM"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMM" {
  +_GCWCoordsDMMState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMM"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMMState" {
  -TextEditingController _LatDegreesController
  -TextEditingController _LatMinutesController
  -TextEditingController _LatMilliMinutesController
  -TextEditingController _LonDegreesController
  -TextEditingController _LonMinutesController
  -TextEditingController _LonMilliMinutesController
  -int _currentLatSign
  -int _currentLonSign
  -String _currentLatDegrees
  -String _currentLatMinutes
  -String _currentLatMilliMinutes
  -String _currentLonDegrees
  -String _currentLonMinutes
  -String _currentLonMilliMinutes
  -FocusNode _latMinutesFocusNode
  -FocusNode _latMilliMinutesFocusNode
  -FocusNode _lonMinutesFocusNode
  -FocusNode _lonMilliMinutesFocusNode
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMMState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMMState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMMState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMS" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMS" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDMS"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMS" {
  +_GCWCoordsDMSState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMS"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMSState" {
  -TextEditingController _LatDegreesController
  -TextEditingController _LatMinutesController
  -TextEditingController _LatSecondsController
  -TextEditingController _LatMilliSecondsController
  -TextEditingController _LonDegreesController
  -TextEditingController _LonMinutesController
  -TextEditingController _LonSecondsController
  -TextEditingController _LonMilliSecondsController
  -FocusNode _latMinutesFocusNode
  -FocusNode _latSecondsFocusNode
  -FocusNode _latMilliSecondsFocusNode
  -FocusNode _lonMinutesFocusNode
  -FocusNode _lonSecondsFocusNode
  -FocusNode _lonMilliSecondsFocusNode
  -int _currentLatSign
  -int _currentLonSign
  -String _currentLatDegrees
  -String _currentLatMinutes
  -String _currentLatSeconds
  -String _currentLatMilliSeconds
  -String _currentLonDegrees
  -String _currentLonMinutes
  -String _currentLonSeconds
  -String _currentLonMilliSeconds
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMSState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMSState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDMSState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDutchGrid" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDutchGrid" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoDutchGrid"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGrid" {
  +_GCWCoordsDutchGridState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGrid"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGridState" {
  -TextEditingController _xController
  -TextEditingController _yController
  -DoubleText _currentX
  -DoubleText _currentY
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGridState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGridState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsDutchGridState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGaussKrueger" {
  +List<_GCWCoordWidgetSubtypeInfo> subtypes
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
  +Widget inputWidget()
  +Widget outputWidget()
  -Widget _buildSubtypeWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGaussKrueger" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetWithSubtypeInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGaussKrueger"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKrueger" {
  +_GCWCoordsGaussKruegerState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKrueger"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKruegerState" {
  -TextEditingController _eastingController
  -TextEditingController _northingController
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  -CoordinateFormatKey _currentSubtype
  +void initState()
  +void dispose()
  +Widget build()
  -bool _subtypeChanged()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKruegerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKruegerState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKruegerState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGaussKruegerState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoLambert" {
  +List<_GCWCoordWidgetSubtypeInfo> subtypes
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
  +Widget inputWidget()
  +Widget outputWidget()
  -Widget _buildSubtypeWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoLambert" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetWithSubtypeInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoLambert"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambert" {
  +_GCWCoordsLambertState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambert"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambertState" {
  -TextEditingController _eastingController
  -TextEditingController _northingController
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  -CoordinateFormatKey _currentSubtype
  +void initState()
  +void dispose()
  +Widget build()
  -bool _subtypeChanged()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambertState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambertState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambertState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsLambertState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMercator" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMercator" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMercator"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercator" {
  +_GCWCoordsMercatorState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercator"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercatorState" {
  -TextEditingController _EastingController
  -TextEditingController _NorthingController
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercatorState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercatorState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMercatorState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoOpenLocationCode" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoOpenLocationCode" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoOpenLocationCode"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCode" {
  +_GCWCoordsOpenLocationCodeState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCode"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCodeState" {
  -TextEditingController _controller
  -String _currentCoord
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCodeState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsOpenLocationCodeState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoQuadtree" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoQuadtree" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoQuadtree"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtree" {
  +_GCWCoordsQuadtreeState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtree"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtreeState" {
  -TextEditingController _controller
  -String _currentCoord
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtreeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtreeState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsQuadtreeState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoDay1976" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoDay1976" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoDay1976"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976" {
  +_GCWCoordsReverseWherigoDay1976State createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976State" {
  -TextEditingController _ControllerA
  -TextEditingController _ControllerB
  -FocusNode _FocusNodeA
  -FocusNode _FocusNodeB
  -String _currentA
  -String _currentB
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976State" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976State" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoDay1976State"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoWaldmeister" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoWaldmeister" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoReverseWherigoWaldmeister"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeister" {
  +_GCWCoordsReverseWherigoWaldmeisterState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeister"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeisterState" {
  -TextEditingController _ControllerA
  -TextEditingController _ControllerB
  -TextEditingController _ControllerC
  -FocusNode _FocusNodeA
  -FocusNode _FocusNodeB
  -FocusNode _FocusNodeC
  -int _currentA
  -int _currentB
  -int _currentC
  -GCWIntegerTextInputFormatter _integerInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeisterState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeisterState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeisterState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsReverseWherigoWaldmeisterState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSlippyMap" {
  +List<_GCWCoordWidgetSubtypeInfo> subtypes
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
  +Widget inputWidget()
  +Widget outputWidget()
  -Widget _buildSubtypeWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSlippyMap" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetWithSubtypeInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSlippyMap"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMap" {
  +_GCWCoordsSlippyMapState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMap"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMapState" {
  -TextEditingController _xController
  -TextEditingController _yController
  -DoubleText _currentX
  -DoubleText _currentY
  -int _currentZoom
  +void initState()
  +void dispose()
  +Widget build()
  -bool _subtypeChanged()
  -int _slippyMapZoom()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMapState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMapState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSlippyMapState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGrid" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGrid" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGrid"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGrid" {
  +_GCWCoordsSwissGridState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGrid"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridState" {
  -TextEditingController _EastingController
  -TextEditingController _NorthingController
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGridPlus" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGridPlus" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoSwissGridPlus"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlus" {
  +_GCWCoordsSwissGridPlusState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlus"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlusState" {
  -TextEditingController _EastingController
  -TextEditingController _NorthingController
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlusState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlusState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsSwissGridPlusState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoXYZ" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoXYZ" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoXYZ"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsXYZ" {
  +_GCWCoordsXYZState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsXYZ"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsXYZState" {
  -TextEditingController _ControllerX
  -TextEditingController _ControllerY
  -TextEditingController _ControllerZ
  -double _currentX
  -double _currentY
  -double _currentZ
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsXYZState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsXYZState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeo3x3" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeo3x3" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeo3x3"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeo3x3" {
  +_GCWCoordsGeo3x3State createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeo3x3"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeo3x3State" {
  -TextEditingController _controller
  -String _currentCoord
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeo3x3State" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeo3x3State"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_Geo3x3TextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_Geo3x3TextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeohash" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeohash" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeohash"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeohash" {
  +_GCWCoordsGeohashState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeohash"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeohashState" {
  -TextEditingController _controller
  -String _currentCoord
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeohashState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeohashState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GeohashTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GeohashTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeoHex" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeoHex" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoGeoHex"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeoHex" {
  +_GCWCoordsGeoHexState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeoHex"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeoHexState" {
  -TextEditingController _controller
  -String _currentCoord
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeoHexState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsGeoHexState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GeoHexTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GeoHexTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMaidenhead" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMaidenhead" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMaidenhead"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMaidenhead" {
  +_GCWCoordsMaidenheadState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMaidenhead"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMaidenheadState" {
  -TextEditingController _controller
  -String _currentCoord
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMaidenheadState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMaidenheadState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_MaidenheadTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_MaidenheadTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMakaney" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMakaney" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMakaney"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMakaney" {
  +_GCWCoordsMakaneyState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMakaney"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMakaneyState" {
  -TextEditingController _controller
  -String _currentCoord
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMakaneyState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMakaneyState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_MakaneyTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_MakaneyTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMGRS" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMGRS" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoMGRS"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRS" {
  +_GCWCoordsMGRSState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRS"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRSState" {
  -TextEditingController _LonZoneController
  -TextEditingController _EastingController
  -TextEditingController _NorthingController
  -String _currentLatZone
  -String _currentDigraphEasting
  -String _currentDigraphNorthing
  -IntegerText _currentLonZone
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRSState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRSState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerText"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRSState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsMGRSState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoUTM" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoUTM" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoUTM"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTM" {
  +_GCWCoordsUTMState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTM"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTMState" {
  -TextEditingController _LonZoneController
  -TextEditingController _EastingController
  -TextEditingController _NorthingController
  -String _currentLatZone
  -IntegerText _currentLonZone
  -DoubleText _currentEasting
  -DoubleText _currentNorthing
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTMState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTMState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerText"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTMState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsUTMState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_UTMLonZoneTextInputFormatter" {
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_UTMLonZoneTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoNaturalAreaCode" {
  +CoordinateFormatKey type
  +String i18nKey
  +String name
  +String example
  +_GCWCoordWidget mainWidget()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoNaturalAreaCode" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::GCWCoordWidgetInfo" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidgetInfoNaturalAreaCode"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsNaturalAreaCode" {
  +_GCWCoordsNaturalAreaCodeState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsNaturalAreaCode"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsNaturalAreaCodeState" {
  -TextEditingController _controllerX
  -TextEditingController _controllerY
  -String _currentX
  -String _currentY
  +void initState()
  +void dispose()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsNaturalAreaCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_GCWCoordsNaturalAreaCodeState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_NaturalAreaCodeTextInputFormatter" {
  -RegExp _exp
  +TextEditingValue formatEditUpdate()
}

"flutter::src::services::text_formatter.dart::TextInputFormatter" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords.dart::_NaturalAreaCodeTextInputFormatter"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::GCWAngle" {
  +void Function(DoubleText) onChanged
  +String? hintText
  +_GCWAngleState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::GCWAngle" o-- "null::void Function(DoubleText)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::GCWAngle"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::_GCWAngleState" {
  -TextEditingController _angleController
  -DoubleText _currentAngle
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::_GCWAngleState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::_GCWAngleState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_angle.dart::_GCWAngleState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::_CompassDirection" {
  +String symbol
  +String name
  +double value
  +int level
}

class "gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::GCWBearing" {
  +void Function(DoubleText) onChanged
  +String? hintText
  +_GCWBearingState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::GCWBearing" o-- "null::void Function(DoubleText)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::GCWBearing"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::_GCWBearingState" {
  -TextEditingController _bearingController
  -DoubleText _currentBearing
  -String? _currentCompassValue
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::_GCWBearingState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::_GCWBearingState" o-- "gc_wizard::utils::complex_return_types.dart::DoubleText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_bearing.dart::_GCWBearingState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::GCWCoordsFormatSelector" {
  +void Function(CoordinateFormat) onChanged
  +CoordinateFormat format
  +bool input
  +_GCWCoordsFormatSelectorState createState()
  +List<GCWDropDownMenuItem<CoordinateFormatKey>> getDropDownItems()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::GCWCoordsFormatSelector" o-- "null::void Function(CoordinateFormat)"
"gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::GCWCoordsFormatSelector" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::GCWCoordsFormatSelector"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::_GCWCoordsFormatSelectorState" {
  -CoordinateFormatKey _currentFormat
  -CoordinateFormatKey? _currentSubtype
  +Widget build()
  -Widget _buildSubtype()
  -void _emitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::_GCWCoordsFormatSelectorState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_formatselector.dart::_GCWCoordsFormatSelectorState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_output.dart::GCWCoordsOutput" {
  +List<Object> outputs
  +List<String>? copyTexts
  +List<GCWMapPoint> points
  +List<GCWMapPolyline> polylines
  +bool? mapButtonTop
  +String? title
  +_GCWCoordsOutputState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_output.dart::GCWCoordsOutput"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_output.dart::_GCWCoordsOutputState" {
  +Widget build()
  -void _openInMap()
  -dynamic _exportCoordinates()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_output.dart::_GCWCoordsOutputState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::GCWCoordsOutputFormat" {
  +CoordinateFormat coordFormat
  +void Function(CoordinateFormat) onChanged
  +_GCWCoordsOutputFormatState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::GCWCoordsOutputFormat" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::GCWCoordsOutputFormat" o-- "null::void Function(CoordinateFormat)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::GCWCoordsOutputFormat"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::_GCWCoordsOutputFormatState" {
  -CoordinateFormat _currentFormat
  +Widget build()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::_GCWCoordsOutputFormatState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat.dart::_GCWCoordsOutputFormatState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistanceValue" {
  +CoordinateFormat format
  +Length lengthUnit
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistanceValue" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistanceValue" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistance" {
  +CoordinateFormat coordFormat
  +void Function(GCWCoordsOutputFormatDistanceValue) onChanged
  +_GCWCoordsOutputFormatDistanceState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistance" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistance" o-- "null::void Function(GCWCoordsOutputFormatDistanceValue)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistance"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::_GCWCoordsOutputFormatDistanceState" {
  -CoordinateFormat _currentCoordFormat
  -Length _currentLengthUnit
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::_GCWCoordsOutputFormatDistanceState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format.dart::CoordinateFormat"
"gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::_GCWCoordsOutputFormatDistanceState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::_GCWCoordsOutputFormatDistanceState"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::GCWCoordsPasteButton" {
  +void Function(List<BaseCoordinate>) onPasted
  +IconButtonSize size
  +_GCWCoordsPasteButtonState createState()
}

"gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::GCWCoordsPasteButton" o-- "null::void Function(List<BaseCoordinate>)"
"gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::GCWCoordsPasteButton" o-- "gc_wizard::common_widgets::buttons::gcw_iconbutton.dart::IconButtonSize"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::GCWCoordsPasteButton"

class "gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::_GCWCoordsPasteButtonState" {
  +Widget build()
  -void _parseClipboardAndSetCoords()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::coords::_common::widget::gcw_coords_paste_button.dart::_GCWCoordsPasteButtonState"

class "gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::Abaddon" {
  +_AbaddonState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::Abaddon"

class "gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::_AbaddonState" {
  -TextEditingController _inputController
  -TextEditingController _aController
  -TextEditingController _bController
  -TextEditingController _cController
  -String _currentInput
  -String _currentA
  -String _currentB
  -String _currentC
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildInputButtons()
  -void _addCharacter()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::_AbaddonState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::_AbaddonState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::abaddon::widget::abaddon.dart::_AbaddonState"

class "gc_wizard::tools::crypto_and_encodings::adfgvx::logic::adfgvx.dart::ADFGVXReturnType" {
  +String? output
  +String? polybiosGrid
}

class "gc_wizard::tools::crypto_and_encodings::adfgvx::logic::adfgvx.dart::_ADFGVXMode" {
  +int index
  {static} +List<_ADFGVXMode> values
  {static} +_ADFGVXMode ADFGX
  {static} +_ADFGVXMode ADFGVX
}

"gc_wizard::tools::crypto_and_encodings::adfgvx::logic::adfgvx.dart::_ADFGVXMode" o-- "gc_wizard::tools::crypto_and_encodings::adfgvx::logic::adfgvx.dart::_ADFGVXMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::adfgvx::logic::adfgvx.dart::_ADFGVXMode"

class "gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::ADFGVX" {
  +_ADFGVXState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::ADFGVX"

class "gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::_ADFGVXState" {
  -TextEditingController _inputController
  -TextEditingController _substitutionKeyController
  -TextEditingController _transpositionKeyController
  -TextEditingController _alphabetController
  -String _currentInput
  -String _currentSubstitutionKey
  -String _currentTranspositionKey
  -GCWSwitchPosition _currentADFGVXMode
  -PolybiosMode _currentPolybiosMode
  -String _currentAlphabet
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::_ADFGVXState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::_ADFGVXState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::_ADFGVXState" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::adfgvx::widget::adfgvx.dart::_ADFGVXState"

class "gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::Affine" {
  +_AffineState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::Affine"

class "gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::_AffineState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  -int _currentKeyAIndex
  -int _currentKeyBIndex
  +List<int> aKeys
  +List<int> bKeys
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::_AffineState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::_AffineState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::affine::widget::affine.dart::_AffineState"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::api_mapper::alphabet_values.dart::AlphabetValuesAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::api_mapper::alphabet_values.dart::AlphabetValuesAPIMapper"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::logic::alphabet_values.dart::AlphabetValues" {
  -Map<String, String> _alphabet
  -String _toUpperCase()
  +List<int?> textToValues()
  +String valuesToText()
}

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::AlphabetValues" {
  +_AlphabetValuesState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::AlphabetValues"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesState" {
  -List<Alphabet> _alphabets
  -TextEditingController _controller
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -String _currentAlphabetKey
  -Map<String, String> _currentAlphabet
  -List<KeyValueBase>? _currentCustomizedAlphabet
  -bool _currentIsEditingAlphabet
  -GCWSwitchPosition _currentReverseAlphabet
  -String _reverseSwitchTitleLeft
  -String _reverseSwitchTitleRight
  -int _currentOffset
  -GCWSwitchPosition _currentCustomizeAlphabet
  -String _currentCustomAlphabetName
  -List<String> _storedAlphabets
  +void initState()
  +void dispose()
  -Alphabet _getAlphabetByKey()
  -void _setAlphabet()
  -void _setReverseLabels()
  -String _setValueOffset()
  -Map<String, String> _setOffset()
  -List<KeyValueBase> _setOffsetList()
  -Map<String, String> _setReverse()
  -List<KeyValueBase> _setReverseList()
  +Widget build()
  -String _generateItemDescription()
  -Widget _buildEditingAlphabet()
  -List<KeyValueBase> _convertToEditingAlphabet()
  -Map<String, String> _convertFromEditingAlphabet()
  -Widget _buildEditingAlphabetCustomizing()
  -Widget _buildEditingAlphabetAdjusting()
  -void _removeAlphabet()
  -void _saveAlphabet()
  -Map<String, String> _getFinalAlphabet()
  -Widget _buildCrossTotals()
  -String _calculateOutput()
  -GCWKeyValueItem _createNewItem()
}

"gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesState"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesKeyValueInput" {
  +GCWKeyValueInputState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesKeyValueInput"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_GCWKeyValueAlphabetNewEntryState" {
  +Widget build()
  -bool _isAddAndAdjustEnabled()
  -Widget _alphabetAddLetterButton()
  -Widget _alphabetAddAndAdjustLetterButton()
  -void _addNewLetter()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_GCWKeyValueAlphabetNewEntryState"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesKeyValueItem" {
  +GCWKeyValueItemState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_AlphabetValuesKeyValueItem"

class "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_GCWKeyValueAlphabetEntryState" {
  +void removeEntry()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState" <|-- "gc_wizard::tools::crypto_and_encodings::alphabet_values::widget::alphabet_values.dart::_GCWKeyValueAlphabetEntryState"

class "gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::AmscoOutput" {
  +String output
  +String grid
  +ErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::AmscoOutput" o-- "gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::ErrorCode" {
  +int index
  {static} +List<ErrorCode> values
  {static} +ErrorCode OK
  {static} +ErrorCode Key
}

"gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::ErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::ErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::amsco::logic::amsco.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::Amsco" {
  +_AmscoState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::Amsco"

class "gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::_AmscoState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -String _currentInput
  -String _currentKey
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentOneCharStart
  -GCWMaskTextInputFormatter _maskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::_AmscoState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::_AmscoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::_AmscoState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::amsco::widget::amsco.dart::_AmscoState"

class "gc_wizard::tools::crypto_and_encodings::atbash::widget::atbash.dart::Atbash" {
  +_AtbashState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::atbash::widget::atbash.dart::Atbash"

class "gc_wizard::tools::crypto_and_encodings::atbash::widget::atbash.dart::_AtbashState" {
  -TextEditingController _controller
  -String _currentInput
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::tools::crypto_and_encodings::atbash::widget::atbash.dart::_AtbashState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::atbash::widget::atbash.dart::_AtbashState"

class "gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMaria" {
  +AveMariaState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMaria"

class "gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMariaState" {
  -TextEditingController _decodeController
  -TextEditingController _encodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMariaState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMariaState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::avemaria::widget::avemaria.dart::AveMariaState"

class "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::BabylonNumbers" {
  +_BabylonNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::BabylonNumbers"

class "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersState" {
  -int _currentEncodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersState"

class "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::babylon_numbers::widget::babylon_numbers.dart::_BabylonNumbersSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::bacon::logic::bacon.dart::BaconType" {
  +int index
  {static} +List<BaconType> values
  {static} +BaconType ORIGINAL
  {static} +BaconType FULL
}

"gc_wizard::tools::crypto_and_encodings::bacon::logic::bacon.dart::BaconType" o-- "gc_wizard::tools::crypto_and_encodings::bacon::logic::bacon.dart::BaconType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::bacon::logic::bacon.dart::BaconType"

class "gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::Bacon" {
  +_BaconState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::Bacon"

class "gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::_BaconState" {
  -TextEditingController _controller
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _binaryMode
  -GCWSwitchPosition _typeMode
  -bool _inversMode
  -String _output
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::_BaconState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::_BaconState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::bacon::widget::bacon.dart::_BaconState"

class "gc_wizard::tools::crypto_and_encodings::base::base122::widget::base122.dart::Base122" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base122::widget::base122.dart::Base122"

class "gc_wizard::tools::crypto_and_encodings::base::base16::widget::base16.dart::Base16" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base16::widget::base16.dart::Base16"

class "gc_wizard::tools::crypto_and_encodings::base::base32::widget::base32.dart::Base32" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base32::widget::base32.dart::Base32"

class "gc_wizard::tools::crypto_and_encodings::base::base58::widget::base58.dart::Base58" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base58::widget::base58.dart::Base58"

class "gc_wizard::tools::crypto_and_encodings::base::base64::widget::base64.dart::Base64" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base64::widget::base64.dart::Base64"

class "gc_wizard::tools::crypto_and_encodings::base::base85::widget::base85.dart::Base85" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base85::widget::base85.dart::Base85"

class "gc_wizard::tools::crypto_and_encodings::base::base91::widget::base91.dart::Base91" {
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" <|-- "gc_wizard::tools::crypto_and_encodings::base::base91::widget::base91.dart::Base91"

abstract class "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" {
  +String Function(String) encode
  +String Function(String) decode
  +bool searchMultimedia
  +String apiSpecification
  +_AbstractBaseState createState()
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase" o-- "null::String Function(String)"
"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::AbstractBase"

class "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState" {
  -int _MAX_LENGTH_BASE_INPUT
  -TextEditingController _inputController
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -_AsyncBaseDecodeReturn? _decodeAsyncBaseData
  -_AsyncBaseDecodeOutput? _outData
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -bool _calcAsync()
  -dynamic _exportFile()
  -dynamic _buildJobData()
  -void _showOutput()
  -void _decodeBaseAsync()
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState" o-- "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeReturn"
"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState" o-- "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeOutput"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AbstractBaseState"

class "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeParameters" {
  +String Function(String) decode
  +String input
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeParameters" o-- "null::String Function(String)"

class "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeReturn" {
  +String plainText
}

class "gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeOutput" {
  +Uint8List? fileData
  +String? plainText
}

"gc_wizard::tools::crypto_and_encodings::base::_common::widget::base.dart::_AsyncBaseDecodeOutput" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcd1of10::widget::bcd1of10.dart::BCD1of10" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcd1of10::widget::bcd1of10.dart::BCD1of10"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcd20f5postnet::widget::bcd20f5postnet.dart::BCD2of5Postnet" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcd20f5postnet::widget::bcd20f5postnet.dart::BCD2of5Postnet"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcd2of5::widget::bcd2of5.dart::BCD2of5" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcd2of5::widget::bcd2of5.dart::BCD2of5"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcd2of5planet::widget::bcd2of5planet.dart::BCD2of5Planet" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcd2of5planet::widget::bcd2of5planet.dart::BCD2of5Planet"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdaiken::widget::bcdaiken.dart::BCDAiken" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdaiken::widget::bcdaiken.dart::BCDAiken"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdbiquinary::widget::bcdbiquinary.dart::BCDBiquinary" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdbiquinary::widget::bcdbiquinary.dart::BCDBiquinary"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdglixon::widget::bcdglixon.dart::BCDGlixon" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdglixon::widget::bcdglixon.dart::BCDGlixon"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdgray::widget::bcdgray.dart::BCDGray" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdgray::widget::bcdgray.dart::BCDGray"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdgrayexcess::widget::bcdgrayexcess.dart::BCDGrayExcess" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdgrayexcess::widget::bcdgrayexcess.dart::BCDGrayExcess"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdhamming::widget::bcdhamming.dart::BCDHamming" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdhamming::widget::bcdhamming.dart::BCDHamming"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdlibawcraig::widget::bcdlibawcraig.dart::BCDLibawCraig" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdlibawcraig::widget::bcdlibawcraig.dart::BCDLibawCraig"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdobrien::widget::bcdobrien.dart::BCDOBrien" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdobrien::widget::bcdobrien.dart::BCDOBrien"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdoriginal::widget::bcdoriginal.dart::BCDOriginal" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdoriginal::widget::bcdoriginal.dart::BCDOriginal"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdpetherick::widget::bcdpetherick.dart::BCDPetherick" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdpetherick::widget::bcdpetherick.dart::BCDPetherick"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdstibitz::widget::bcdstibitz.dart::BCDStibitz" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdstibitz::widget::bcdstibitz.dart::BCDStibitz"

class "gc_wizard::tools::crypto_and_encodings::bcd::bcdtompkins::widget::bcdtompkins.dart::BCDTompkins" {
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::bcdtompkins::widget::bcdtompkins.dart::BCDTompkins"

class "gc_wizard::tools::crypto_and_encodings::bcd::_common::logic::bcd.dart::BCDType" {
  +int index
  {static} +List<BCDType> values
  {static} +BCDType ORIGINAL
  {static} +BCDType AIKEN
  {static} +BCDType STIBITZ
  {static} +BCDType GRAY
  {static} +BCDType GLIXON
  {static} +BCDType OBRIEN
  {static} +BCDType PETHERICK
  {static} +BCDType TOMPKINS
  {static} +BCDType LIBAWCRAIG
  {static} +BCDType GRAYEXCESS
  {static} +BCDType TWOOFFIVE
  {static} +BCDType ONEOFTEN
  {static} +BCDType PLANET
  {static} +BCDType POSTNET
  {static} +BCDType HAMMING
  {static} +BCDType BIQUINARY
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::logic::bcd.dart::BCDType" o-- "gc_wizard::tools::crypto_and_encodings::bcd::_common::logic::bcd.dart::BCDType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::_common::logic::bcd.dart::BCDType"

abstract class "gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" {
  +BCDType type
  +_AbstractBCDState createState()
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD" o-- "gc_wizard::tools::crypto_and_encodings::bcd::_common::logic::bcd.dart::BCDType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::AbstractBCD"

class "gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::_AbstractBCDState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -GCWMaskTextInputFormatter _encodeMaskFormatter
  -GCWMaskTextInputFormatter _decode4DigitsMaskFormatter
  -GCWMaskTextInputFormatter _decode5DigitsMaskFormatter
  -GCWMaskTextInputFormatter _decode7DigitsMaskFormatter
  -GCWMaskTextInputFormatter _decode10DigitsMaskFormatter
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildDecode()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::_AbstractBCDState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::_AbstractBCDState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::_AbstractBCDState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::bcd::_common::widget::bcd.dart::_AbstractBCDState"

class "gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::Beghilos" {
  +_BeghilosState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::Beghilos"

class "gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState" {
  -TextEditingController _inputControllerDecode
  -TextEditingController _inputControllerEncode
  -IntegerListText _currentInputEncode
  -String _currentInputDecode
  -GCWSwitchPosition _currentMode
  -Segments _currentDisplays
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerListText"
"gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::beghilos::widget::beghilos.dart::_BeghilosState"

class "gc_wizard::tools::crypto_and_encodings::bifid::logic::bifid.dart::BifidOutput" {
  +String state
  +String output
  +String? grid
}

class "gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::Bifid" {
  +_BifidState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::Bifid"

class "gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState" {
  -TextEditingController _inputController
  -TextEditingController _alphabetController
  -GCWSwitchPosition _currentMode
  -String _currentInput
  -String _currentAlphabet
  -PolybiosMode _currentBifidMode
  -AlphabetModificationMode _currentModificationMode
  -GCWSwitchPosition _currentMatrixMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::bifid::widget::bifid.dart::_BifidState"

class "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::_wordClass" {
  +int sectionIndex
  +int rowIndex
  +int wordIndex
  +String text
}

class "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::searchFormat" {
  +int index
  {static} +List<searchFormat> values
  {static} +searchFormat SectionRowWord
  {static} +searchFormat SectionCharacter
  {static} +searchFormat RowWord
  {static} +searchFormat Word
  {static} +searchFormat SectionRowWordCharacter
  {static} +searchFormat RowWordCharacter
  {static} +searchFormat RowCharacter
  {static} +searchFormat WordCharacter
  {static} +searchFormat Character
}

"gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::searchFormat" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::searchFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::searchFormat"

class "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::decodeOutFormat" {
  +int index
  {static} +List<decodeOutFormat> values
  {static} +decodeOutFormat SectionRowWord
  {static} +decodeOutFormat RowWord
  {static} +decodeOutFormat Word
}

"gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::decodeOutFormat" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::decodeOutFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::decodeOutFormat"

class "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::encodeOutFormat" {
  +int index
  {static} +List<encodeOutFormat> values
  {static} +encodeOutFormat SectionRowWordCharacter
  {static} +encodeOutFormat RowWordCharacter
  {static} +encodeOutFormat WordCharacter
  {static} +encodeOutFormat Character
}

"gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::encodeOutFormat" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::encodeOutFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::encodeOutFormat"

class "gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::BookCipher" {
  +_BookCipherState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::BookCipher"

class "gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" {
  -String _currentInput
  -GCWSwitchPosition _currentSearchMode
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentSimpleMode
  -bool _spacesOn
  -bool _emptyLinesOn
  -bool _ignoreSymbolsOn
  -String _ignoreSymbols
  -bool _diacriticsOn
  -bool _azOn
  -bool _numbersOn
  -bool _onlyFirstWordLetter
  -String _currentText
  -String _currentWord
  -String _currentPositions
  -searchFormat _currentSearchFormat
  -decodeOutFormat _currentDecodeOutFormat
  -encodeOutFormat _currentEncodeOutFormat
  -TextEditingController _textController
  -TextEditingController _wordController
  -TextEditingController _positionsController
  -TextEditingController _ignoreSymbolsController
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildDecodeModusControl()
  -Widget _buildDecodeInputControl()
  -Widget _buildDecodeFormatDividerControl()
  -Widget _buildDecodeFormatControl()
  -Widget _buildEncodeInputControl()
  -Widget _buildEncodeFormatDividerControl()
  -Widget _buildAdvancedModeControl()
  -Widget _buildEncodeFormatControl()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::searchFormat"
"gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::decodeOutFormat"
"gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" o-- "gc_wizard::tools::crypto_and_encodings::book_cipher::logic::book_cipher.dart::encodeOutFormat"
"gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::book_cipher::widget::book_cipher.dart::_BookCipherState"

class "gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::Braille" {
  +_BrailleState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::Braille"

class "gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -BrailleLanguage _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
  -String _normalizeChars()
}

"gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState" o-- "gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::braille::braille::widget::braille.dart::_BrailleState"

class "gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::BrailleDotNumbers" {
  +_BrailleDotNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::BrailleDotNumbers"

class "gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -BrailleLanguage _currentLanguage
  -GCWSwitchPosition _currentMode
  -GCWMaskTextInputFormatter _decodeInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -Widget _buildDigitalOutput()
}

"gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState" o-- "gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage"
"gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::braille::braille_dot_numbers::widget::braille_dot_numbers.dart::_BrailleDotNumbersState"

class "gc_wizard::tools::crypto_and_encodings::braille::braille_euro_segment_display::widget::braille_euro_segment_display.dart::BrailleEuroSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::braille::braille_euro_segment_display::widget::braille_euro_segment_display.dart::BrailleEuroSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage" {
  +int index
  {static} +List<BrailleLanguage> values
  {static} +BrailleLanguage BASIC
  {static} +BrailleLanguage SIMPLE
  {static} +BrailleLanguage STD
  {static} +BrailleLanguage DEU
  {static} +BrailleLanguage ENG
  {static} +BrailleLanguage FRA
  {static} +BrailleLanguage EUR
}

"gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage" o-- "gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::braille::logic::braille.dart::BrailleLanguage"

class "gc_wizard::tools::crypto_and_encodings::braille::widget::braille_segment_display.dart::BrailleSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::braille::widget::braille_segment_display.dart::BrailleSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTable" {
  +List<String> xAxis
  +List<String> yAxis
  +List<String> Content
  +Map<String, List<String>>? Encoding
}

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationOutput" {
  +List<String> ResponseCode
  +List<String>? Tupel1
  +List<String>? Tupel2
  +List<String>? Tupel3
  +String? Number
  +String? Details
}

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTableType" {
  +int index
  {static} +List<BundeswehrTalkingBoardAuthentificationTableType> values
  {static} +BundeswehrTalkingBoardAuthentificationTableType AUTHENTIFICATIONTABLE
  {static} +BundeswehrTalkingBoardAuthentificationTableType NUMERALCODE
}

"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTableType" o-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTableType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTableType"

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentification" {
  +_BundeswehrTalkingBoardAuthentificationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentification"

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState" {
  -TextEditingController _inputAuthController
  -TextEditingController _callSignController
  -TextEditingController _letterControllerAuth
  -TextEditingController _letterControllerCallSign
  -TextEditingController _authTableCustom
  -TextEditingController _numeralCodeCustomXaxis
  -TextEditingController _numeralCodeCustomYaxis
  -String _currentAuthInput
  -String _currentCallSign
  -String _currentLetterAuth
  -int _currentLetterAuthIndex
  -String _currentLetterCallSign
  -String _currentNumeralCodeXaxisCustom
  -String _currentNumeralCodeYaxisCustom
  -String _currentAuthTableCustom
  -BundeswehrTalkingBoardAuthentificationTable _tableNumeralCode
  -BundeswehrTalkingBoardAuthentificationTable _tableAuthentificationCode
  -String _authTableString
  -String _numeralCodeString
  -GCWMaskTextInputFormatter _authTableMaskFormatter
  -GCWMaskTextInputFormatter _authCodeMaskFormatter
  -GCWMaskTextInputFormatter _numeralCodeXAxisCodeMaskFormatter
  -GCWMaskTextInputFormatter _numeralCodeYAxisCodeMaskFormatter
  -GCWMaskTextInputFormatter _callsignLetterMaskFormatter
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentTableMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _calculateOutput()
  -String _buildResponse()
  -void _buildAuthTable()
  -void _buildNumeralCode()
  -bool _invalidSingleAxisTitle()
  -bool _invalidAxisDescription()
}

"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState" o-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTable"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::widget::bundeswehr_auth.dart::_BundeswehrTalkingBoardAuthentificationState"

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::logic::bundeswehr_code.dart::BundeswehrTalkingBoardCodingOutput" {
  +String ResponseCode
  +String Details
}

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::BundeswehrTalkingBoardObfuscation" {
  +_BundeswehrTalkingBoardObfuscationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::BundeswehrTalkingBoardObfuscation"

class "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -TextEditingController _numeralCodeCustomXaxis
  -TextEditingController _numeralCodeCustomYaxis
  -String _currentEncode
  -String _currentDecode
  -String _currentNumeralCodeXaxisCustom
  -String _currentNumeralCodeYaxisCustom
  -BundeswehrTalkingBoardAuthentificationTable? _tableNumeralCode
  -String _numeralCodeString
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentTableMode
  -GCWMaskTextInputFormatter _cryptedTextMaskFormatter
  -GCWMaskTextInputFormatter _numeralCodeyXAxisCodeMaskFormatter
  -GCWMaskTextInputFormatter _numeralCodeYAxisCodeMaskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _calculateOutput()
  -void _buildNumeralCode()
  -bool _invalidSingleAxisTitle()
  -bool _invalidAxisDescription()
}

"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState" o-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_auth::logic::bundeswehr_auth.dart::BundeswehrTalkingBoardAuthentificationTable"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::bundeswehr_talkingboard::bundeswehr_code::widget::bundeswehr_code.dart::_BundeswehrTalkingBoardObfuscationState"

class "gc_wizard::tools::crypto_and_encodings::burrows_wheeler::logic::burrows_wheeler.dart::BWTOutput" {
  +String text
  +String index
}

class "gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::BurrowsWheeler" {
  +_BurrowsWheelerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::BurrowsWheeler"

class "gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::_BurrowsWheelerState" {
  +TextEditingController plainController
  +TextEditingController cipherController
  +TextEditingController indexCharacterController
  +GCWSwitchPosition currentMode
  +GCWSwitchPosition currentIndexType
  +String currentInputPlain
  +String currentInputCipher
  +String currentIndexSymbol
  +int currentIndexPosition
  +int currentInputLen
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::_BurrowsWheelerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::_BurrowsWheelerState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::_BurrowsWheelerState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::burrows_wheeler::widget::burrows_wheeler.dart::_BurrowsWheelerState"

class "gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::Caesar" {
  +_CaesarState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::Caesar"

class "gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::_CaesarState" {
  -TextEditingController _controller
  -String _currentInput
  -int _currentKey
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::_CaesarState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::_CaesarState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::caesar::widget::caesar.dart::_CaesarState"

class "gc_wizard::tools::crypto_and_encodings::chao::logic::chao.dart::ChaoAlphabet" {
  +int index
  {static} +List<ChaoAlphabet> values
  {static} +ChaoAlphabet AZ
  {static} +ChaoAlphabet ZA
  {static} +ChaoAlphabet CUSTOM
}

"gc_wizard::tools::crypto_and_encodings::chao::logic::chao.dart::ChaoAlphabet" o-- "gc_wizard::tools::crypto_and_encodings::chao::logic::chao.dart::ChaoAlphabet"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::chao::logic::chao.dart::ChaoAlphabet"

class "gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::Chao" {
  +_ChaoState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::Chao"

class "gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::_ChaoState" {
  -TextEditingController _inputController
  -TextEditingController _alphabetControllerPlain
  -TextEditingController _alphabetControllerChiffre
  -GCWSwitchPosition _currentMode
  -String _currentInput
  -String _currentOutput
  -String _currentAlphabetPlain
  -String _currentAlphabetChiffre
  -ChaoAlphabet _currentAlphabetTypePlain
  -ChaoAlphabet _currentAlphabetTypeChiffre
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::_ChaoState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::_ChaoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::_ChaoState" o-- "gc_wizard::tools::crypto_and_encodings::chao::logic::chao.dart::ChaoAlphabet"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::chao::widget::chao.dart::_ChaoState"

class "gc_wizard::tools::crypto_and_encodings::charsets::ascii_values::widget::ascii_values.dart::ASCIIValues" {
}

"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::GeneralCharsetValues" <|-- "gc_wizard::tools::crypto_and_encodings::charsets::ascii_values::widget::ascii_values.dart::ASCIIValues"

class "gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::GeneralCharsetValues" {
  +List<int> Function(String) encode
  +String Function(List<int>) decode
  +String charsetName
  +_GeneralCharsetValuesState createState()
}

"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::GeneralCharsetValues" o-- "null::List<int> Function(String)"
"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::GeneralCharsetValues" o-- "null::String Function(List<int>)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::GeneralCharsetValues"

class "gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::_GeneralCharsetValuesState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentSimpleMode
  -int _currentRadix
  -GCWSwitchPosition _currentBlockSizeMode
  -int _currentBlockSize
  -IntegerListText? _currentDecoded
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildAdvancedWidgets()
  -Widget _buildCrossTotals()
  -int _getRadix()
  -int? _getBlockSize()
  -IntegerListText _calculateDecoded()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::_GeneralCharsetValuesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::_GeneralCharsetValuesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::_GeneralCharsetValuesState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerListText"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::charsets::general_charset_values::widget::general_charset_values.dart::_GeneralCharsetValuesState"

class "gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::CipherWheel" {
  +_CipherWheelState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::CipherWheel"

class "gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::_CipherWheelState" {
  -TextEditingController _controller
  -String _currentInput
  -int _currentKey
  -String _output
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::_CipherWheelState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::_CipherWheelState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::cipher_wheel::widget::cipher_wheel.dart::_CipherWheelState"

class "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::CistercianNumbers" {
  +_CistercianNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::CistercianNumbers"

class "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersState" {
  -List<String> _DEFAULT_SEGMENT
  -TextEditingController _inputEncodeController
  -String _currentEncodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersState"

class "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::cistercian_numbers::widget::cistercian_numbers.dart::_CistercianNumbersSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::enclosed_areas::widget::enclosed_areas.dart::EnclosedAreas" {
  +_EnclosedAreasState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::enclosed_areas::widget::enclosed_areas.dart::EnclosedAreas"

class "gc_wizard::tools::crypto_and_encodings::enclosed_areas::widget::enclosed_areas.dart::_EnclosedAreasState" {
  -String _currentInput
  -GCWSwitchPosition _with4On
  -GCWSwitchPosition _currentSimpleMode
  -bool _onlyNumbers
  +Widget build()
  -Widget _buildAdvancedModeControl()
}

"gc_wizard::tools::crypto_and_encodings::enclosed_areas::widget::enclosed_areas.dart::_EnclosedAreasState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::enclosed_areas::widget::enclosed_areas.dart::_EnclosedAreasState"

class "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotor" {
  +String name
  +String alphabet
  +String turnovers
  +EnigmaRotorType type
  +String toString()
}

"gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotor" o-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType"

class "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorConfiguration" {
  +EnigmaRotor rotor
  +int offset
  +int setting
  +int settingWithOffset
  +EnigmaRotorConfiguration clone()
  +String toString()
}

"gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorConfiguration" o-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotor"

class "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaKey" {
  +List<EnigmaRotorConfiguration> rotorConfigurations
  +Map<String, String> plugboard
  -void _createPlugboard()
  +String toString()
}

class "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType" {
  +int index
  {static} +List<EnigmaRotorType> values
  {static} +EnigmaRotorType STANDARD
  {static} +EnigmaRotorType ENTRY_ROTOR
  {static} +EnigmaRotorType REFLECTOR
}

"gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType" o-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType"

class "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::Enigma" {
  +_EnigmaState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::Enigma"

class "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaState" {
  -TextEditingController _inputController
  -TextEditingController _plugboardController
  -String _currentInput
  -String _currentPlugboard
  -bool _currentEntryRotorMode
  -bool _currentReflectorMode
  -EnigmaRotorConfiguration _currentEntryRotor
  -EnigmaRotorConfiguration _currentReflector
  -bool _isTextChange
  -int _currentNumberRotors
  -List<EnigmaRotorDropDown> _currentRotors
  -List<EnigmaRotorConfiguration> _currentRotorsConfigurations
  -int _currentRotorInformation
  -GCWMaskTextInputFormatter _plugboardMaskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -String _rotorType()
  -Widget _buildRotorInformation()
  -Widget _buildRotors()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaState" o-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorConfiguration"
"gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaState"

class "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::EnigmaRotorDropDown" {
  +void Function(Tuple2<int, EnigmaRotorConfiguration>) onChanged
  +EnigmaRotorType type
  +int position
  +_EnigmaRotorDropDownState createState()
}

"gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::EnigmaRotorDropDown" o-- "null::void Function(Tuple2<int, EnigmaRotorConfiguration>)"
"gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::EnigmaRotorDropDown" o-- "gc_wizard::tools::crypto_and_encodings::enigma::logic::enigma.dart::EnigmaRotorType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::EnigmaRotorDropDown"

class "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaRotorDropDownState" {
  -String _currentRotor
  -int _currentOffset
  -int _currentSetting
  +void initState()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::enigma::widget::enigma.dart::_EnigmaRotorDropDownState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::logic::beatnik_language.dart::BeatnikOutput" {
  +List<String> output
  +List<String> scrabble
  +List<String> assembler
  +List<String> mnemonic
  +List<DebugOutput> debug
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::logic::beatnik_language.dart::DebugOutput" {
  +String pc
  +String command
  +String stack
  +String output
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::logic::beatnik_language.dart::_BeatnikStack" {
  -List<int> _stack
  +void push()
  +int peek()
  +int pop()
  +int size()
  +void add()
  +void sub()
  +void swap()
  +void double()
  +String getContent()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::Beatnik" {
  +_BeatnikState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::Beatnik"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::_BeatnikState" {
  -TextEditingController _programmController
  -TextEditingController _inputController
  -TextEditingController _outputController
  -String _currentProgram
  -String _currentInput
  -String _currentOutput
  -String _currentScrabbleVersion
  -bool _currentShowScrabble
  -bool _currentShowDebug
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::_BeatnikState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::_BeatnikState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::beatnik_language::widget::beatnik_language.dart::_BeatnikState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::logic::befunge.dart::BefungeOutput" {
  +String Output
  +String Error
  +String Iteration
  +String curPosX
  +String curPosY
  +List<String> BefungeStack
  +List<String> PC
  +List<String> Command
  +List<String> Mnemonic
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::logic::befunge.dart::BefungeStack" {
  +List<BigInt> content
  +void push()
  +BigInt pop()
  +bool isEmpty()
  +String toString()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::Befunge" {
  +_BefungeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::Befunge"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::_BefungeState" {
  -TextEditingController _befungeGenerateController
  -CodeController _befungeInterpretCodeController
  -TextEditingController _inputController
  -TextEditingController _codeGenerateController
  -String _currentGenerate
  -String _currentInterpret
  -String _currentInput
  -String _sourceCodeGenerated
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::_BefungeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::_BefungeState" o-- "code_text_field::src::code_field::code_controller.dart::CodeController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::_BefungeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::befunge::widget::befunge.dart::_BefungeState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::logic::brainfk_derivative.dart::BrainfkDerivatives" {
  +Map<String, String> substitutions
  +String? outputCommandDelimiter
  +int? fixedSize
  +bool isCaseSensitive
  +String Function(String)? convertToBrainfk
  +String convertBrainfkDerivativeToBrainfk()
  +String interpretBrainfkDerivatives()
  +String generateBrainfkDerivative()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::logic::brainfk_derivative.dart::BrainfkDerivatives" o-- "null::String Function(String)"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::Brainfk" {
  +String Function(String, {String? input})? interpret
  +String Function(String)? generate
  +_BrainfkState createState()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::Brainfk" o-- "null::String Function(String, {String input})"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::Brainfk" o-- "null::String Function(String)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::Brainfk"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::_BrainfkState" {
  -TextEditingController _textController
  -TextEditingController _inputController
  -TextEditingController _inputController_shiftRight
  -TextEditingController _inputController_shiftLeft
  -TextEditingController _inputController_increaseValue
  -TextEditingController _inputController_decreaseValue
  -TextEditingController _inputController_output
  -TextEditingController _inputController_input
  -TextEditingController _inputController_startLoop
  -TextEditingController _inputController_endLoop
  -BrainfkDerivatives _currentDerivate
  -String _currentText
  -String _currentInput
  -String _currentInput_shiftRight
  -String _currentInput_shiftLeft
  -String _currentInput_increaseValue
  -String _currentInput_decreaseValue
  -String _currentInput_output
  -String _currentInput_input
  -String _currentInput_startLoop
  -String _currentInput_endLoop
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentOriginal
  +void initState()
  +void dispose()
  +Widget build()
  -Object _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::_BrainfkState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::_BrainfkState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::logic::brainfk_derivative.dart::BrainfkDerivatives"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::_BrainfkState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::_BrainfkState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Chef" {
  +Map<String, _Recipe> recipes
  +_Recipe? mainrecipe
  +List<String> error
  +bool valid
  +List<String> meal
  +bool liquefyMissing
  -String _parseTitle()
  -void _addError()
  -String _structHint()
  -String _progressToExpected()
  +void bake()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Chef" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Recipe"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_textId" {
  +int index
  {static} +List<_CHEF_textId> values
  {static} +_CHEF_textId Put
  {static} +_CHEF_textId Ingredients
  {static} +_CHEF_textId Cooking_time
  {static} +_CHEF_textId Pre_heat_oven
  {static} +_CHEF_textId Method
  {static} +_CHEF_textId Liquefy_contents
  {static} +_CHEF_textId Liquefy
  {static} +_CHEF_textId Pour
  {static} +_CHEF_textId Serves
  {static} +_CHEF_textId Serve_with
  {static} +_CHEF_textId Clean
  {static} +_CHEF_textId Add
  {static} +_CHEF_textId Combine
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_textId" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_textId"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_textId"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_Method" {
  +int index
  {static} +List<_CHEF_Method> values
  {static} +_CHEF_Method Take
  {static} +_CHEF_Method Put
  {static} +_CHEF_Method Fold
  {static} +_CHEF_Method Add
  {static} +_CHEF_Method Remove
  {static} +_CHEF_Method Combine
  {static} +_CHEF_Method Divide
  {static} +_CHEF_Method AddDry
  {static} +_CHEF_Method Liquefy
  {static} +_CHEF_Method LiquefyBowl
  {static} +_CHEF_Method Stir
  {static} +_CHEF_Method StirInto
  {static} +_CHEF_Method Mix
  {static} +_CHEF_Method Clean
  {static} +_CHEF_Method Pour
  {static} +_CHEF_Method Verb
  {static} +_CHEF_Method VerbUntil
  {static} +_CHEF_Method SetAside
  {static} +_CHEF_Method Serve
  {static} +_CHEF_Method Refrigerate
  {static} +_CHEF_Method Remember
  {static} +_CHEF_Method Invalid
  {static} +_CHEF_Method Nehmen
  {static} +_CHEF_Method Geben
  {static} +_CHEF_Method Unterheben
  {static} +_CHEF_Method Dazugeben
  {static} +_CHEF_Method Abschoepfen
  {static} +_CHEF_Method Kombinieren
  {static} +_CHEF_Method Teilen
  {static} +_CHEF_Method FestesHinzugeben
  {static} +_CHEF_Method Schmelzen
  {static} +_CHEF_Method SchuesselErhitzen
  {static} +_CHEF_Method ZutatRuehren
  {static} +_CHEF_Method SchuessselRuehren
  {static} +_CHEF_Method Mischen
  {static} +_CHEF_Method Saeubern
  {static} +_CHEF_Method Ausgiessen
  {static} +_CHEF_Method Wiederholen
  {static} +_CHEF_Method WiederholenBis
  {static} +_CHEF_Method BeiseiteStellen
  {static} +_CHEF_Method Servieren
  {static} +_CHEF_Method Gefrieren
  {static} +_CHEF_Method Erinnern
  {static} +_CHEF_Method Unbekannt
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_Method" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_Method"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_Method"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Component" {
  -_State _state
  -int _value
  -String _name
  +int getValue()
  +void setValue()
  +_State getState()
  +void setState()
  +String getName()
  +void setName()
  +_Component clone()
  +void liquefy()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Component" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Container" {
  -List<_Component> _contents
  +void push()
  +_Component peek()
  +_Component? pop()
  +int size()
  +void combine()
  +void liquefy()
  +void clean()
  +String serve()
  +List<String> getContent()
  +List<String> getContentAsList()
  +void shuffle()
  +void stir()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Ingredient" {
  -String? _name
  -int? _amount
  -_State? _state
  -bool _error
  -List<String> _errorList
  +int? getAmount()
  +void setAmount()
  +_State? getState()
  +void setState()
  +void liquefy()
  +void dry()
  +String? getName()
  +void setName()
  +bool isValid()
  +List<String> getError()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Ingredient" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State" {
  +int index
  {static} +List<_State> values
  {static} +_State Dry
  {static} +_State Liquid
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_State"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Kitchen" {
  +List<_Container> mixingbowls
  +List<_Container> bakingdishes
  +Map<String, _Recipe> recipes
  +_Recipe recipe
  +bool valid
  +bool exception
  +List<String> meal
  +List<String> error
  +bool liquefyMissing
  +_Container? cook()
  -bool _sameVerb()
  -void _serve()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Kitchen" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Recipe"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_LoopData" {
  +int from
  +int to
  +String verb
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Method" {
  +String? ingredient
  +int? mixingbowl
  +int? bakingdish
  +String? auxrecipe
  +int? time
  +String? verb
  +_CHEF_Method? type
  +int? n
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Method" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_CHEF_Method"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::logic::chef_language.dart::_Recipe" {
  +String title
  +Map<String, _Ingredient> ingredients
  +String? comment
  +int? cookingtime
  +int? oventemp
  +int? gasmark
  +List<_Method>? methods
  +int serves
  +bool error
  +List<String> errorList
  +void setIngredients()
  +void setComments()
  +void setMethod()
  +void setCookingTime()
  +void setOvenTemp()
  +void setServes()
  +int getServes()
  +String getTitle()
  +int? getIngredientValue()
  +void setIngredientValue()
  +_Method? getMethod()
  +List<_Method>? getMethods()
  +Map<String, _Ingredient> getIngredients()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::Chef" {
  +_ChefState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::Chef"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::_ChefState" {
  -TextEditingController _recipeController
  -TextEditingController _inputController
  -TextEditingController _titleController
  -TextEditingController _remarkController
  -TextEditingController _timeController
  -TextEditingController _temperatureController
  -TextEditingController _outputController
  -String _currentRecipe
  -String _currentInput
  -String _currentTitle
  -String _currentRemark
  -String _currentTime
  -String _currentTemperature
  -String _currentOutput
  +GCWMaskTextInputFormatter TimeInputFormatter
  +GCWMaskTextInputFormatter TemperatureInputFormatter
  +GCWMaskTextInputFormatter DigitSpacesInputFormatter
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentLanguage
  -bool _auxilaryRecipes
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -GCWSwitchPosition _defaultLanguage()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::_ChefState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::_ChefState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::_ChefState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::chef_language::widget::chef_language.dart::_ChefState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::logic::cow.dart::CowOutput" {
  +String output
  +String error
  +List<String> debug
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::Cow" {
  +_CowState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::Cow"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::_CowState" {
  -TextEditingController _textController
  -TextEditingController _inputController
  -String _currentText
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::_CowState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::_CowState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::cow::widget::cow.dart::_CowState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::deadfish::widget::deadfish.dart::Deadfish" {
  +_DeadfishState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::deadfish::widget::deadfish.dart::Deadfish"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::deadfish::widget::deadfish.dart::_DeadfishState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDeadfishMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::deadfish::widget::deadfish.dart::_DeadfishState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::deadfish::widget::deadfish.dart::_DeadfishState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::logic::hohoho.dart::HohohoOutput" {
  +String output
  +String error
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::Hohoho" {
  +_HohohoState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::Hohoho"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::_HohohoState" {
  -TextEditingController _textEncodeController
  -TextEditingController _textDecodeController
  -TextEditingController _inputController
  -String _currentEncodeText
  -String _currentDecodeText
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::_HohohoState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::_HohohoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::hohoho::widget::hohoho.dart::_HohohoState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::KAREL_LANGUAGES" {
  +int index
  {static} +List<KAREL_LANGUAGES> values
  {static} +KAREL_LANGUAGES DEU
  {static} +KAREL_LANGUAGES ENG
  {static} +KAREL_LANGUAGES FRA
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::KAREL_LANGUAGES" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::KAREL_LANGUAGES"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::KAREL_LANGUAGES"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::_KAROL_DIRECTION" {
  +int index
  {static} +List<_KAROL_DIRECTION> values
  {static} +_KAROL_DIRECTION SOUTH
  {static} +_KAROL_DIRECTION NORTH
  {static} +_KAROL_DIRECTION EAST
  {static} +_KAROL_DIRECTION WEST
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::_KAROL_DIRECTION" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::_KAROL_DIRECTION"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::_KAROL_DIRECTION"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::KarolRobot" {
  +_KarolRobotState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::KarolRobot"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" {
  -TextEditingController _decodeController
  -TextEditingController _encodeController
  -String _currentDecode
  -String _currentEncode
  -Uint8List? _outEncodeData
  -Uint8List? _outDecodeData
  -String _output
  -GCWMaskTextInputFormatter _MASKINPUTFORMATTER_ENCODE
  -GCWMaskTextInputFormatter _MASKINPUTFORMATTER_DECODE
  -GCWSwitchPosition _currentMode
  -KAREL_LANGUAGES _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -void _createDecodeOutput()
  -Widget _buildGraphicDecodeOutput()
  -void _createEncodeOutput()
  -Widget _buildGraphicEncodeOutput()
  -dynamic _exportFile()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::logic::karol_robot.dart::KAREL_LANGUAGES"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::karol_robot::widget::karol_robot.dart::_KarolRobotState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::logic::malbolge.dart::malbolgeOutput" {
  +List<String> output
  +List<String> assembler
  +List<String> mnemonic
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::Malbolge" {
  +_MalbolgeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::Malbolge"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::_MalbolgeState" {
  -TextEditingController _programmController
  -TextEditingController _inputController
  -TextEditingController _outputController
  -String _currentProgramm
  -String _currentInput
  -String _currentOutput
  -bool _currentDebug
  -bool _currentStrict
  +malbolgeOutput output
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  +String buildOutputText()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::_MalbolgeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::_MalbolgeState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::logic::malbolge.dart::malbolgeOutput"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::_MalbolgeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::malbolge::widget::malbolge.dart::_MalbolgeState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::ook::widget::ook.dart::Ook" {
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::brainfk::widget::brainfk.dart::Brainfk" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::ook::widget::ook.dart::Ook"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_image_reader.dart::PietImageReader" {
  +List<List<int>>? readImage()
  -List<List<int>> _readImage()
  -int _toRgb()
  -int _estimateCodelSize()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_BaseOperations" {
  -_PietStack _stack
  -_PietBlock Function() _getExitedBlock
  -void Function(int) _toggleDirectionPointer
  -void Function(int) _toggleCodelChooser
  -_PietSession _session
  +void push()
  +int? pop()
  +int add()
  +int subtract()
  +int multiply()
  +int divide()
  +int mod()
  +int not()
  +int greater()
  +void pointer()
  +void switch_()
  +void duplicate()
  +void roll()
  +void inNumber()
  +void inChar()
  +void outNumeric()
  +void outChar()
  +Map<_PietOps, void Function()> getMap()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_BaseOperations" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietStack"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_BaseOperations" o-- "null::_PietBlock Function()"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_BaseOperations" o-- "null::void Function(int)"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_BaseOperations" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietOps" {
  +int index
  {static} +List<_PietOps> values
  {static} +_PietOps Noop
  {static} +_PietOps Push
  {static} +_PietOps Pop
  {static} +_PietOps Add
  {static} +_PietOps Subtract
  {static} +_PietOps Multiply
  {static} +_PietOps Divide
  {static} +_PietOps Mod
  {static} +_PietOps Not
  {static} +_PietOps Greater
  {static} +_PietOps Pointer
  {static} +_PietOps Switch
  {static} +_PietOps Duplicate
  {static} +_PietOps Roll
  {static} +_PietOps InputNumber
  {static} +_PietOps InputChar
  {static} +_PietOps OutputNumber
  {static} +_PietOps OutputChar
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietOps" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietOps"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietOps"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlock" {
  -int _color
  -bool _knownColor
  -Set<Point<int>> _pixels
  +int color
  +bool knownColor
  +int blockCount
  +Point<int> northLeft
  +Point<int> northRight
  +Point<int> eastLeft
  +Point<int> eastRight
  +Point<int> southLeft
  +Point<int> southRight
  +Point<int> westLeft
  +Point<int> westRight
  +bool addPixel()
  +bool containsPixel()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlock" o-- "dart::math::Point<int>"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlockOpResolver" {
  +_PietOps resolve()
  -Tuple2<bool, Tuple2<_HueColor, _Darkness>> _tryResolveColor()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_HueColor" {
  +int index
  {static} +List<_HueColor> values
  {static} +_HueColor Red
  {static} +_HueColor Yellow
  {static} +_HueColor Green
  {static} +_HueColor Cyan
  {static} +_HueColor Blue
  {static} +_HueColor Magenta
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_HueColor" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_HueColor"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_HueColor"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Darkness" {
  +int index
  {static} +List<_Darkness> values
  {static} +_Darkness Light
  {static} +_Darkness Normal
  {static} +_Darkness Dark
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Darkness" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Darkness"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Darkness"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlockerBuilder" {
  -List<List<int>> _data
  -_PietBlock _block
  -Map<Point<int>, _PietBlock> _blockCache
  -int _width
  -int _height
  -_PietBlock _getBlockAt()
  -_PietBlock _buildPietBlock()
  -void _buildPietBlockRec()
  -Set<Point<int>> _addIsValidBlock()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlockerBuilder" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlock"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_colorStack" {
  -List<int> _colorTable
  +int RGB()
  +int pushColor()
  +int writeOutputColor()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::Alignment" {
  +int index
  {static} +List<Alignment> values
  {static} +Alignment topLeft
  {static} +Alignment topRight
  {static} +Alignment bottomLeft
  {static} +Alignment bottomRight
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::Alignment" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::Alignment"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::Alignment"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietNavigator" {
  -_Direction _direction
  -_CodelChoice _codelChooser
  -List<List<int>> _data
  +int white
  +int black
  -int _width
  -int _height
  -Point<int> _currentPoint
  +_Direction direction
  +_CodelChoice codelChooser
  +Point<int> currentPoint
  +Tuple2<bool, Point<int>> tryNavigate()
  -bool _stillInBlock()
  +void rotateDirectionPointer()
  +void toggleCodelChooser()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietNavigator" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Direction"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietNavigator" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_CodelChoice"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietNavigator" o-- "dart::math::Point<int>"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Direction" {
  +int index
  {static} +List<_Direction> values
  {static} +_Direction East
  {static} +_Direction South
  {static} +_Direction West
  {static} +_Direction North
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Direction" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Direction"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_Direction"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_CodelChoice" {
  +int index
  {static} +List<_CodelChoice> values
  {static} +_CodelChoice Left
  {static} +_CodelChoice Right
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_CodelChoice" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_CodelChoice"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_CodelChoice"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::PietResult" {
  +String output
  +bool input_expected
  +bool input_number_expected
  +bool error
  +String errorText
  +bool finished
  +_PietSession? state
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::PietResult" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" {
  -_PietBlock _currentBlock
  -Map<_PietOps, Function> _actionMap
  +List<List<int>> data
  -_PietStack _stack
  -_PietBlockOpResolver _opsResolver
  -_PietBlockerBuilder _builder
  -_PietNavigator _navigator
  +String? input
  -String _output
  -int _timeOut
  -bool _multipleInputs
  -bool _running
  +bool running
  -void _step()
  +void run()
  +void output()
  +int? readInt()
  +String? readChar()
  -bool _inputNeeded()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlock"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietStack"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlockOpResolver"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietBlockerBuilder"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietSession" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietNavigator"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::_PietStack" {
  -List<int> _stack
  +int length
  +bool isNotEmpty
  +void push()
  +int? pop()
  +int add()
  +int subtract()
  +int multiply()
  +int divide()
  +int mod()
  +int m()
  +int not()
  +int greater()
  +void duplicate()
  -int _applyTernary()
  -bool _applyTernaryIf()
  +void roll()
  +Tuple2<bool, int?> tryPop()
  +Tuple2<bool, Tuple2<int?, int?>> tryPop2()
  +bool RotateRight()
  +bool RotateLeft()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::Piet" {
  +GCWFile? file
  +_PietState createState()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::Piet" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::Piet"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" {
  -GCWFile? _originalData
  -String? _currentInterpreterInput
  -String? _currentGeneratorInput
  -PietResult? _currentInterpreterOutput
  -Uint8List? _currentGeneratorOutput
  -bool _isStarted
  -GCWSwitchPosition _currentMode
  -TextEditingController _inputGeneratorController
  +void initState()
  +void dispose()
  -bool _validateData()
  +Widget build()
  -Widget _buildInterpreter()
  -Widget _buildInterpreterOutput()
  -void _calcInterpreterOutput()
  -Widget _buildGenerator()
  -Widget _buildGeneratorOutput()
  -void _calcGeneratorOutput()
  -void _showDialogBox()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::logic::piet_language.dart::PietResult"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::piet::widget::piet.dart::_PietState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceResult" {
  +String output
  +String code
  +bool input_expected
  +bool error
  +String errorText
  +bool finished
  +WhitespaceState? state
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceResult" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceState"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceState" {
  +String code
  +String inp
  +String output
  +List<String> input
  +List<int> stack
  +List<int> return_positions
  +Map<int, int> heap
  +Map<String, int> labels
  +int pos
  +bool loading
  +bool inputNumber
  +int dbgCounter
  +String plainTextCharacter
  +void storeState()
  +void restoreState()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_Interpreter" {
  +DateTime start_time
  {static} -Map<String, String> _IMP
  +void run()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_Stack" {
  {static} -Map<String, String> _STACK_IMP
  +void parse()
  -void _push_num()
  -void _duplicate_nth()
  -void _discard_n()
  -void _discard_top()
  -void _swap()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_IO" {
  {static} -Map<String, String> _IO_IMP
  +void parse()
  -void _output_char()
  -void _output_num()
  -void _input_char()
  -void _input_num()
  -String _input_pop()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_FlowControl" {
  {static} -Map<String, String> _FLOW_IMP
  +void parse()
  -void _exit()
  -void _mark_label()
  -void _jump()
  -void _exit_subroutine()
  -void _call_subroutine()
  -void _return_positions_append()
  -int _return_positions_pop()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_Arithmetic" {
  {static} -Map<String, String> _ARITHMETIC_IMP
  +void parse()
  +void add()
  -void _sub()
  -void _mul()
  -void _floordiv()
  -void _mod()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::_Heap" {
  {static} -Map<String, String> _HEAP_IMP
  +void parse()
  -void _store()
  -void _push()
}

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::WhitespaceLanguage" {
  +_WhitespaceLanguageState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::WhitespaceLanguage"

class "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::_WhitespaceLanguageState" {
  -WhitespaceResult? _currentOutput
  -String _currentCode
  -String _currentInput
  -WhitespaceState? _continueState
  -bool _isStarted
  -GCWSwitchPosition _currentMode
  +Widget build()
  -Widget _buildOutput()
  -void _calcOutput()
  -void _showDialogBox()
}

"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::_WhitespaceLanguageState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceResult"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::_WhitespaceLanguageState" o-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::logic::whitespace_language.dart::WhitespaceState"
"gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::_WhitespaceLanguageState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::esoteric_programming_languages::whitespace_language::widget::whitespace_language.dart::_WhitespaceLanguageState"

class "gc_wizard::tools::crypto_and_encodings::fox::widget::fox.dart::Fox" {
  +_FoxState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::fox::widget::fox.dart::Fox"

class "gc_wizard::tools::crypto_and_encodings::fox::widget::fox.dart::_FoxState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::fox::widget::fox.dart::_FoxState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::fox::widget::fox.dart::_FoxState"

class "gc_wizard::tools::crypto_and_encodings::gade::widget::gade.dart::Gade" {
  +_GadeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::gade::widget::gade.dart::Gade"

class "gc_wizard::tools::crypto_and_encodings::gade::widget::gade.dart::_GadeState" {
  -TextEditingController _GadeInputController
  -String _currentGadeInput
  -bool _currentParseLetters
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::gade::widget::gade.dart::_GadeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::gade::widget::gade.dart::_GadeState"

class "gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::GCCode" {
  +_GCCodeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::GCCode"

class "gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::_GCCodeState" {
  -TextEditingController _gcCodeInputController
  -String _currentGCCodeInput
  -int _currentID
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::_GCCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::_GCCodeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::gc_code::widget::gc_code.dart::_GCCodeState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::persistence::model.dart::MultiDecoderToolEntity" {
  +int id
  +String name
  +String internalToolName
  +List<MultiDecoderToolOption> options
  +Map<String, Object?> toMap()
  +String toString()
}

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::persistence::model.dart::MultiDecoderToolOption" {
  +String name
  +Object? value
  +Map<String, Object?> toMap()
  +String toString()
}

abstract class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" {
  +int id
  +String name
  +String internalToolName
  +Object? Function(String, String) onDecode
  +bool requiresKey
  +bool optionalKey
  +Map<String, Object?> options
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" o-- "null::Object Function(String, String)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::MultiDecoderToolDummy" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::MultiDecoderToolDummy"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderToolDummyState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderToolDummyState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderConfiguration" {
  +_MultiDecoderConfigurationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderConfiguration"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderConfigurationState" {
  -TextEditingController _editingToolNameController
  -int? _currentChosenTool
  -String _editingToolName
  -int? _currentEditId
  -List<String> _sortedToolRegistry
  +List<AbstractMultiDecoderTool> mdtTools
  +void initState()
  +void dispose()
  -bool _nameExists()
  -String _createName()
  -void _addNewTool()
  -void _updateTool()
  -void _deleteTool()
  -void _clearTools()
  -void _refreshMDTTools()
  -void _moveUp()
  -void _moveDown()
  +Widget build()
  -Widget _buildToollist()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderConfigurationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderConfigurationState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::MultiDecoder" {
  +_MultiDecoderState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::MultiDecoder"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderState" {
  -TextEditingController _controller
  +List<AbstractMultiDecoderTool> mdtTools
  -String _currentInput
  -Widget _currentOutput
  -bool _firstBuild
  -bool _currentExpanded
  -String _currentKey
  +void initState()
  +void dispose()
  -void _refreshMDTTools()
  +Widget build()
  -Widget _buildKeyWidget()
  -String _toolTitle()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::_MultiDecoderState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_alphabet_values.dart::MultiDecoderToolAlphabetValues" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_alphabet_values.dart::MultiDecoderToolAlphabetValues"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_alphabet_values.dart::_MultiDecoderToolAlphabetValuesState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_alphabet_values.dart::_MultiDecoderToolAlphabetValuesState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ascii.dart::MultiDecoderToolASCII" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ascii.dart::MultiDecoderToolASCII"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ascii.dart::_MultiDecoderToolASCIIState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ascii.dart::_MultiDecoderToolASCIIState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_atbash.dart::MultiDecoderToolAtbash" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_atbash.dart::MultiDecoderToolAtbash"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_atbash.dart::_MultiDecoderToolAtbashState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_atbash.dart::_MultiDecoderToolAtbashState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bacon.dart::MultiDecoderToolBacon" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bacon.dart::MultiDecoderToolBacon"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bacon.dart::_MultiDecoderToolBaconState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bacon.dart::_MultiDecoderToolBaconState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_base.dart::MultiDecoderToolBase" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_base.dart::MultiDecoderToolBase"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_base.dart::_MultiDecoderToolBaseState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_base.dart::_MultiDecoderToolBaseState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bcd.dart::MultiDecoderToolBCD" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bcd.dart::MultiDecoderToolBCD"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bcd.dart::_MultiDecoderToolBCDState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_bcd.dart::_MultiDecoderToolBCDState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_beghilos.dart::MultiDecoderToolBeghilos" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_beghilos.dart::MultiDecoderToolBeghilos"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_beghilos.dart::_MultiDecoderToolBeghilosState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_beghilos.dart::_MultiDecoderToolBeghilosState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_binary2image.dart::MultiDecoderBinary2Image" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_binary2image.dart::MultiDecoderBinary2Image"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_binary2image.dart::_MultiDecoderBinary2ImageState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_binary2image.dart::_MultiDecoderBinary2ImageState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_braille_dot_numbers.dart::MultiDecoderToolBrailleDotNumbers" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_braille_dot_numbers.dart::MultiDecoderToolBrailleDotNumbers"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_braille_dot_numbers.dart::_MultiDecoderToolBrailleDotNumbersState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_braille_dot_numbers.dart::_MultiDecoderToolBrailleDotNumbersState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt1.dart::MultiDecoderToolCcitt1" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt1.dart::MultiDecoderToolCcitt1"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt1.dart::_MultiDecoderToolCcitt1State" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt1.dart::_MultiDecoderToolCcitt1State"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt2.dart::MultiDecoderToolCcitt2" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt2.dart::MultiDecoderToolCcitt2"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt2.dart::_MultiDecoderToolCcitt2State" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_ccitt2.dart::_MultiDecoderToolCcitt2State"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_chronogram.dart::MultiDecoderToolChronogram" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_chronogram.dart::MultiDecoderToolChronogram"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_chronogram.dart::_MultiDecoderToolChronogramState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_chronogram.dart::_MultiDecoderToolChronogramState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_coordinate_formats.dart::MultiDecoderToolCoordinateFormats" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_coordinate_formats.dart::MultiDecoderToolCoordinateFormats"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_coordinate_formats.dart::_MultiDecoderToolCoordinateFormatsState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_coordinate_formats.dart::_MultiDecoderToolCoordinateFormatsState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_enclosed_areas.dart::MultiDecoderToolEnclosedAreas" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_enclosed_areas.dart::MultiDecoderToolEnclosedAreas"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_enclosed_areas.dart::_MultiDecoderToolEnclosedAreasState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_enclosed_areas.dart::_MultiDecoderToolEnclosedAreasState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_beatnik.dart::MultiDecoderToolEsotericLanguageBeatnik" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_beatnik.dart::MultiDecoderToolEsotericLanguageBeatnik"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_beatnik.dart::_MultiDecoderToolEsotericLanguageBeatnikState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_beatnik.dart::_MultiDecoderToolEsotericLanguageBeatnikState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_brainfk_derivative.dart::MultiDecoderToolEsotericLanguageBrainfkDerivative" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_brainfk_derivative.dart::MultiDecoderToolEsotericLanguageBrainfkDerivative"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_brainfk_derivative.dart::_MultiDecoderToolEsotericLanguageBrainfkDerivateState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_brainfk_derivative.dart::_MultiDecoderToolEsotericLanguageBrainfkDerivateState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_chef.dart::MultiDecoderToolEsotericLanguageChef" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_chef.dart::MultiDecoderToolEsotericLanguageChef"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_chef.dart::_MultiDecoderToolEsotericLanguageChefState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_chef.dart::_MultiDecoderToolEsotericLanguageChefState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_cow.dart::MultiDecoderToolEsotericLanguageCow" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_cow.dart::MultiDecoderToolEsotericLanguageCow"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_cow.dart::_MultiDecoderToolEsotericLanguageCowState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_cow.dart::_MultiDecoderToolEsotericLanguageCowState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_deadfish.dart::MultiDecoderToolEsotericLanguageDeadfish" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_deadfish.dart::MultiDecoderToolEsotericLanguageDeadfish"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_deadfish.dart::_MultiDecoderToolEsotericLanguageDeadfishState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_deadfish.dart::_MultiDecoderToolEsotericLanguageDeadfishState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_hohoho.dart::MultiDecoderToolEsotericLanguageHohoho" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_hohoho.dart::MultiDecoderToolEsotericLanguageHohoho"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_hohoho.dart::_MultiDecoderToolEsotericLanguageHohohoState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_hohoho.dart::_MultiDecoderToolEsotericLanguageHohohoState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_karol_robot.dart::MultiDecoderToolEsotericLanguageKarolRobot" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_karol_robot.dart::MultiDecoderToolEsotericLanguageKarolRobot"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_karol_robot.dart::_MultiDecoderToolEsotericLanguageKarolRobotState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_karol_robot.dart::_MultiDecoderToolEsotericLanguageKarolRobotState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_malbolge.dart::MultiDecoderToolEsotericLanguageMalbolge" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_malbolge.dart::MultiDecoderToolEsotericLanguageMalbolge"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_malbolge.dart::_MultiDecoderToolEsotericLanguageMalbolgeState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_malbolge.dart::_MultiDecoderToolEsotericLanguageMalbolgeState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_whitespace.dart::MultiDecoderToolEsotericLanguageWhitespace" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_whitespace.dart::MultiDecoderToolEsotericLanguageWhitespace"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_whitespace.dart::_MultiDecoderToolEsotericLanguageWhitespaceState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_esoteric_language_whitespace.dart::_MultiDecoderToolEsotericLanguageWhitespaceState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_gc_code.dart::MultiDecoderToolGCCode" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_gc_code.dart::MultiDecoderToolGCCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_gc_code.dart::_MultiDecoderToolGCCodeState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_gc_code.dart::_MultiDecoderToolGCCodeState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_kenny.dart::MultiDecoderToolKenny" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_kenny.dart::MultiDecoderToolKenny"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_kenny.dart::_MultiDecoderToolKennyState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_kenny.dart::_MultiDecoderToolKennyState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_layout.dart::MultiDecoderToolKeyboardLayout" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_layout.dart::MultiDecoderToolKeyboardLayout"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_layout.dart::_MultiDecoderToolKeyboardLayoutState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_layout.dart::_MultiDecoderToolKeyboardLayoutState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_numbers.dart::MultiDecoderToolKeyboardNumbers" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_numbers.dart::MultiDecoderToolKeyboardNumbers"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_numbers.dart::_MultiDecoderToolKeyboardNumbersState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_keyboard_numbers.dart::_MultiDecoderToolKeyboardNumbersState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_numeralbases.dart::MultiDecoderToolNumeralBases" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_numeralbases.dart::MultiDecoderToolNumeralBases"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_numeralbases.dart::_MultiDecoderToolNumeralBasesState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_numeralbases.dart::_MultiDecoderToolNumeralBasesState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_one_time_pad.dart::MultiDecoderToolOneTimePad" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_one_time_pad.dart::MultiDecoderToolOneTimePad"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_one_time_pad.dart::_MultiDecoderToolOneTimePadState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_one_time_pad.dart::_MultiDecoderToolOneTimePadState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_playfair.dart::MultiDecoderToolPlayfair" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_playfair.dart::MultiDecoderToolPlayfair"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_playfair.dart::_MultiDecoderToolPlayfairState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_playfair.dart::_MultiDecoderToolPlayfairState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_pokemon.dart::MultiDecoderToolPokemon" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_pokemon.dart::MultiDecoderToolPokemon"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_pokemon.dart::_MultiDecoderToolPokemonState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_pokemon.dart::_MultiDecoderToolPokemonState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_polybios.dart::MultiDecoderToolPolybios" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_polybios.dart::MultiDecoderToolPolybios"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_polybios.dart::_MultiDecoderToolPolybiosState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_polybios.dart::_MultiDecoderToolPolybiosState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_reverse.dart::MultiDecoderToolReverse" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_reverse.dart::MultiDecoderToolReverse"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_reverse.dart::_MultiDecoderToolReverseState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_reverse.dart::_MultiDecoderToolReverseState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_roman_numbers.dart::MultiDecoderToolRomanNumbers" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_roman_numbers.dart::MultiDecoderToolRomanNumbers"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_roman_numbers.dart::_MultiDecoderToolRomanNumbersState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_roman_numbers.dart::_MultiDecoderToolRomanNumbersState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot18.dart::MultiDecoderToolROT18" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot18.dart::MultiDecoderToolROT18"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot18.dart::_MultiDecoderToolROT18State" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot18.dart::_MultiDecoderToolROT18State"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot47.dart::MultiDecoderToolROT47" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot47.dart::MultiDecoderToolROT47"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot47.dart::_MultiDecoderToolROT47State" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot47.dart::_MultiDecoderToolROT47State"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot5.dart::MultiDecoderToolROT5" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot5.dart::MultiDecoderToolROT5"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot5.dart::_MultiDecoderToolROT5State" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rot5.dart::_MultiDecoderToolROT5State"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rotation.dart::MultiDecoderToolRotation" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rotation.dart::MultiDecoderToolRotation"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rotation.dart::_MultiDecoderToolRotationState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_rotation.dart::_MultiDecoderToolRotationState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_segment_display.dart::MultiDecoderToolSegmentDisplay" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_segment_display.dart::MultiDecoderToolSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_segment_display.dart::_MultiDecoderToolSegmentDisplayState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_segment_display.dart::_MultiDecoderToolSegmentDisplayState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_tapir.dart::MultiDecoderToolTapir" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_tapir.dart::MultiDecoderToolTapir"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_tapir.dart::_MultiDecoderToolTapirState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_tapir.dart::_MultiDecoderToolTapirState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vanity_multitap.dart::MultiDecoderToolVanityMultitap" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vanity_multitap.dart::MultiDecoderToolVanityMultitap"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vanity_multitap.dart::_MultiDecoderToolVanityMultitapState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vanity_multitap.dart::_MultiDecoderToolVanityMultitapState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vigenere.dart::MultiDecoderToolVigenere" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vigenere.dart::MultiDecoderToolVigenere"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vigenere.dart::_MultiDecoderToolVigenereState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_vigenere.dart::_MultiDecoderToolVigenereState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_wasd.dart::MultiDecoderToolWasd" {
  +State<StatefulWidget> createState()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::multi_decoder.dart::AbstractMultiDecoderTool" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_wasd.dart::MultiDecoderToolWasd"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_wasd.dart::_MultiDecoderToolWasdState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::multi_decoder::widget::tools::md_tool_wasd.dart::_MultiDecoderToolWasdState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker.dart::SubstitutionBreakerJobData" {
  +String input
  +Quadgrams? quadgrams
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker.dart::SubstitutionBreakerJobData" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet" {
  +int index
  {static} +List<SubstitutionBreakerAlphabet> values
  {static} +SubstitutionBreakerAlphabet ENGLISH
  {static} +SubstitutionBreakerAlphabet GERMAN
  {static} +SubstitutionBreakerAlphabet DUTCH
  {static} +SubstitutionBreakerAlphabet SPANISH
  {static} +SubstitutionBreakerAlphabet POLISH
  {static} +SubstitutionBreakerAlphabet GREEK
  {static} +SubstitutionBreakerAlphabet FRENCH
  {static} +SubstitutionBreakerAlphabet RUSSIAN
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerErrorCode" {
  +int index
  {static} +List<SubstitutionBreakerErrorCode> values
  {static} +SubstitutionBreakerErrorCode OK
  {static} +SubstitutionBreakerErrorCode MAX_ROUNDS_PARAMETER
  {static} +SubstitutionBreakerErrorCode CONSOLIDATE_PARAMETER
  {static} +SubstitutionBreakerErrorCode TEXT_TOO_SHORT
  {static} +SubstitutionBreakerErrorCode ALPHABET_TOO_LONG
  {static} +SubstitutionBreakerErrorCode WRONG_GENERATE_TEXT
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_result.dart::SubstitutionBreakerResult" {
  +String ciphertext
  +String plaintext
  +String key
  +String alphabet
  +SubstitutionBreakerErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_result.dart::SubstitutionBreakerResult" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerResult" {
  +String ciphertext
  +String plaintext
  +String key
  +String alphabet
  +double fitness
  +int nbr_keys
  +int nbr_rounds
  +double keys_per_second
  +double seconds
  +BreakerErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerResult" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerErrorCode" {
  +int index
  {static} +List<BreakerErrorCode> values
  {static} +BreakerErrorCode OK
  {static} +BreakerErrorCode MAX_ROUNDS_PARAMETER
  {static} +BreakerErrorCode CONSOLIDATE_PARAMETER
  {static} +BreakerErrorCode TEXT_TOO_SHORT
  {static} +BreakerErrorCode ALPHABET_TOO_LONG
  {static} +BreakerErrorCode ALPHABET_TOO_SHORT
  {static} +BreakerErrorCode WRONG_GENERATE_TEXT
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::BreakerKey" {
  -String? _alphabet
  -String? _key
  -Map<String, String>? _encode
  -Map<String, String>? _decode
  {static} +String? check_alphabet()
  {static} +String? check_key()
  +String? decode()
  +String? encode()
  +void decode_file()
  +void encode_file()
  {static} -Map<String, String> _maketrans()
  {static} -String _set()
}

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::_Quadgrams" {
  +String alphabet
  +int nbr_quadgrams
  +String most_frequent_quadgram
  +int max_fitness
  +double average_fitness
}

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::DutchQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::DutchQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::EnglishQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::EnglishQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::FrenchQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::FrenchQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::GermanQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::GermanQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::GreekQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::GreekQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::PolishQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::PolishQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" {
  {static} +int maxAlphabetLength
  +Map<int, List<int>>? quadgramsCompressed
  +String assetLocation
  -List<int>? _quadgrams
  +List<int>? quadgrams()
  {static} +Map<int, List<int>> compressQuadgrams()
  {static} +List<int>? decompressQuadgrams()
  {static} +String quadgramsMapToString()
  {static} +String quadgramsListToString()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::_Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::RussianQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::RussianQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::SpanishQuadgrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::Quadgrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_logic_aggregator.dart::SpanishQuadgrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::SubstitutionBreaker" {
  +_SubstitutionBreakerState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::SubstitutionBreaker"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::_SubstitutionBreakerState" {
  -TextEditingController _controller
  -String _currentInput
  -SubstitutionBreakerAlphabet _currentAlphabet
  -SubstitutionBreakerResult? _currentOutput
  -Map<SubstitutionBreakerAlphabet, Quadgrams> _quadgrams
  -List<bool> _isLoading
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildSubmitButton()
  -Widget _buildOutput()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::_SubstitutionBreakerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::_SubstitutionBreakerState" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::_SubstitutionBreakerState" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_result.dart::SubstitutionBreakerResult"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::widget::substitution_breaker.dart::_SubstitutionBreakerState"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::bigrams.dart::Bigrams" {
  {static} +int maxAlphabetLength
  +String alphabet
  +Map<String, String>? replacementList
  +List<List<int>> bigrams
}

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::english_bigrams.dart::EnglishBigrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::bigrams.dart::Bigrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::english_bigrams.dart::EnglishBigrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::french_bigrams.dart::FrenchBigrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::bigrams.dart::Bigrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::french_bigrams.dart::FrenchBigrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::german_bigrams.dart::GermanBigrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::bigrams.dart::Bigrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::german_bigrams.dart::GermanBigrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::spanish_bigrams.dart::SpanishBigrams" {
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::bigrams.dart::Bigrams" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::bigrams::logic::spanish_bigrams.dart::SpanishBigrams"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::guballa::logic::breaker.dart::BreakerResult" {
  +List<int> key
  +double fitness
}

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerJobData" {
  +String input
  +VigenereBreakerType vigenereBreakerType
  +bool ignoreNonLetters
  +VigenereBreakerAlphabet alphabet
  +int keyLengthMin
  +int keyLengthMax
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerJobData" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerType"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerJobData" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerResult" {
  +String plaintext
  +String key
  +double fitness
  +double fitnessFiltered
  +String alphabet
  +VigenereBreakerErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerResult" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerType" {
  +int index
  {static} +List<VigenereBreakerType> values
  {static} +VigenereBreakerType VIGENERE
  {static} +VigenereBreakerType AUTOKEYVIGENERE
  {static} +VigenereBreakerType BEAUFORT
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerType" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerType"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet" {
  +int index
  {static} +List<VigenereBreakerAlphabet> values
  {static} +VigenereBreakerAlphabet ENGLISH
  {static} +VigenereBreakerAlphabet GERMAN
  {static} +VigenereBreakerAlphabet SPANISH
  {static} +VigenereBreakerAlphabet FRENCH
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerErrorCode" {
  +int index
  {static} +List<VigenereBreakerErrorCode> values
  {static} +VigenereBreakerErrorCode OK
  {static} +VigenereBreakerErrorCode KEY_LENGTH
  {static} +VigenereBreakerErrorCode KEY_TOO_LONG
  {static} +VigenereBreakerErrorCode CONSOLIDATE_PARAMETER
  {static} +VigenereBreakerErrorCode TEXT_TOO_SHORT
  {static} +VigenereBreakerErrorCode ALPHABET_TOO_LONG
  {static} +VigenereBreakerErrorCode NO_ALPHABET
  {static} +VigenereBreakerErrorCode WRONG_GENERATE_TEXT
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerErrorCode"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::VigenereBreaker" {
  +_VigenereBreakerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::VigenereBreaker"

class "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::_VigenereBreakerState" {
  -String _currentInput
  -VigenereBreakerAlphabet _currentAlphabet
  -VigenereBreakerResult? _currentOutput
  -bool _currentAutokey
  -bool _currentNonLetters
  -TextEditingController _minKeyLengthController
  -TextEditingController _maxKeyLengthController
  -int _minKeyLength
  -int _maxKeyLength
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildSubmitButton()
  -Widget _buildOutput()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::_VigenereBreakerState" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerAlphabet"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::_VigenereBreakerState" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::logic::vigenere_breaker.dart::VigenereBreakerResult"
"gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::_VigenereBreakerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::vigenere_breaker::widget::vigenere_breaker.dart::_VigenereBreakerState"

class "gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayOutput" {
  +List<String> decimalOutput
  +List<String> binaryOutput
}

class "gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayMode" {
  +int index
  {static} +List<GrayMode> values
  {static} +GrayMode DECIMAL
  {static} +GrayMode BINARY
}

"gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayMode" o-- "gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayMode"

class "gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::Gray" {
  +_GrayState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::Gray"

class "gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState" {
  -TextEditingController _inputDecimalController
  -TextEditingController _inputBinaryController
  -String _currentDecimalInput
  -String _currentBinaryInput
  -GrayOutput _currentOutput
  -GCWSwitchPosition _currentInputMode
  -GCWSwitchPosition _currentMode
  -GCWMaskTextInputFormatter _decimalMaskFormatter
  -GCWMaskTextInputFormatter _binaryDigitsMaskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState" o-- "gc_wizard::tools::crypto_and_encodings::gray::logic::gray.dart::GrayOutput"
"gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::gray::widget::gray.dart::_GrayState"

class "gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::Gronsfeld" {
  +_GronsfeldState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::Gronsfeld"

class "gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::_GronsfeldState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -String _currentInput
  -String _currentKey
  -int _currentAValue
  -GCWSwitchPosition _currentMode
  -bool _currentAutokey
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::_GronsfeldState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::_GronsfeldState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::gronsfeld::widget::gronsfeld.dart::_GronsfeldState"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" {
  +Function hashFunction
  +bool keyRequired
  +_DefaultHashState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHashState" {
  -String _currentValue
  -String _currentKey
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHashState"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_160" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_160"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_224" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_224"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_384" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_384"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_512" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::BLAKE2b_512"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD2" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD2"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD4" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD4"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD5" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD5"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_128" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_128"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_160" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_160"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_320" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_320"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA1" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA1"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA224" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA224"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA384" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA384"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_224" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_224"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_224" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_224"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_384" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_384"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_512" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_512"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_128" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_128"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_224" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_224"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_256" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_256"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_288" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_288"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_384" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_384"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_512" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Keccak_512"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Tiger_192" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Tiger_192"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Whirlpool_512" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Whirlpool_512"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA1HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA1HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA224HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA224HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA256HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA256HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA384HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA384HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_224HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_224HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_256HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA512_256HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_224HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_224HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_256HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_256HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_384HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_384HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_512HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::SHA3_512HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD2HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD2HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD4HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD4HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD5HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::MD5HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_128HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_128HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_160HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_160HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_256HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_256HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_320HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::RIPEMD_320HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Tiger_192HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Tiger_192HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Whirlpool_512HMac" {
}

"gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::_DefaultHash" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes::widget::hashes.dart::Whirlpool_512HMac"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes_identification::widget::hashes_identification.dart::HashIdentification" {
  +_HashIdentificationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes_identification::widget::hashes_identification.dart::HashIdentification"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes_identification::widget::hashes_identification.dart::_HashIdentificationState" {
  -String _currentValue
  +Widget build()
  -Widget _buildOutput()
  -bool _possibleHash()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes_identification::widget::hashes_identification.dart::_HashIdentificationState"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes_overview::widget::hashes_overview.dart::HashOverview" {
  +_HashOverviewState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes_overview::widget::hashes_overview.dart::HashOverview"

class "gc_wizard::tools::crypto_and_encodings::hashes::hashes_overview::widget::hashes_overview.dart::_HashOverviewState" {
  -String _currentValue
  -String _currentKey
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hashes_overview::widget::hashes_overview.dart::_HashOverviewState"

class "gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::logic::hash_breaker.dart::HashBreakerJobData" {
  +String input
  +String searchMask
  +Map<String, String> substitutions
  +Function hashFunction
}

class "gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::widget::hash_breaker.dart::HashBreaker" {
  +Function? hashFunction
  +_HashBreakerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::widget::hash_breaker.dart::HashBreaker"

class "gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::widget::hash_breaker.dart::_HashBreakerState" {
  -TextEditingController _inputController
  -TextEditingController _maskController
  -String _currentInput
  -String _currentMask
  -String _currentFromInput
  -String _currentToInput
  -int _currentIdCount
  -String _currentOutput
  -Function _currentHashFunction
  -List<KeyValueBase> _currentSubstitutions
  +void initState()
  +void dispose()
  -void _onAddEntry()
  -void _updateNewEntry()
  +Widget build()
  -Widget _buildVariablesEditor()
  -void _onDoCalculation()
  -Widget _buildSubmitButton()
  -Map<String, String> _getSubstitutions()
  -dynamic _buildJobData()
  -void _showOutput()
}

"gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::widget::hash_breaker.dart::_HashBreakerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::hashes::hash_breaker::widget::hash_breaker.dart::_HashBreakerState"

class "gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneOutput" {
  +String output
  +String grid
  +HomophoneErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneOutput" o-- "gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneErrorCode"

class "gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneErrorCode" {
  +int index
  {static} +List<HomophoneErrorCode> values
  {static} +HomophoneErrorCode OK
  {static} +HomophoneErrorCode TABLE
  {static} +HomophoneErrorCode CUSTOM_KEY_COUNT
  {static} +HomophoneErrorCode CUSTOM_KEY_DUPLICATE
}

"gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::homophone::logic::homophone.dart::HomophoneErrorCode"

class "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::Homophone" {
  +_HomophoneState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::Homophone"

class "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" {
  -GCWSwitchPosition _currentMode
  -TextEditingController _currentRotationController
  -TextEditingController _newKeyController
  -GCWMaskTextInputFormatter _keyMaskInputFormatter
  -String _currentInput
  -Alphabet _currentAlphabet
  -_KeyType _currentKeyType
  -int _currentRotation
  -int _currentMultiplierIndex
  -String _currentCustomKeyList
  -List<KeyValueBase> _currentSubstitutions
  -String _mask
  -Map<String, RegExp> _filter
  +List<int> aKeys
  +void initState()
  +void dispose()
  -String _maxLetter()
  -void _addEntry()
  +Widget build()
  -Widget _buildOutput()
  -String? _generateItemDescription()
  -Widget _buildVariablesEditor()
}

"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" o-- "gc_wizard::utils::alphabets.dart::Alphabet"
"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState" o-- "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_KeyType"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_HomophoneState"

class "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_KeyType" {
  +int index
  {static} +List<_KeyType> values
  {static} +_KeyType CUSTOM_KEY_LIST
  {static} +_KeyType CUSTOM_KEY_MAP
  {static} +_KeyType GENERATED
}

"gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_KeyType" o-- "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_KeyType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::homophone::widget::homophone.dart::_KeyType"

class "gc_wizard::tools::crypto_and_encodings::houdini::logic::houdini.dart::HoudiniMode" {
  +int index
  {static} +List<HoudiniMode> values
  {static} +HoudiniMode NUMBERS
  {static} +HoudiniMode LETTERS
}

"gc_wizard::tools::crypto_and_encodings::houdini::logic::houdini.dart::HoudiniMode" o-- "gc_wizard::tools::crypto_and_encodings::houdini::logic::houdini.dart::HoudiniMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::houdini::logic::houdini.dart::HoudiniMode"

class "gc_wizard::tools::crypto_and_encodings::houdini::widget::houdini.dart::Houdini" {
  +_HoudiniState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::houdini::widget::houdini.dart::Houdini"

class "gc_wizard::tools::crypto_and_encodings::houdini::widget::houdini.dart::_HoudiniState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentCryptMode
  +Widget build()
  -HoudiniMode _houdiniMode()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::houdini::widget::houdini.dart::_HoudiniState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::houdini::widget::houdini.dart::_HoudiniState"

class "gc_wizard::tools::crypto_and_encodings::kamasutra::widget::kamasutra.dart::Kamasutra" {
  +_KamasutraState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::kamasutra::widget::kamasutra.dart::Kamasutra"

class "gc_wizard::tools::crypto_and_encodings::kamasutra::widget::kamasutra.dart::_KamasutraState" {
  -String _currentInput
  -String _currentAlphabet
  -GCWSwitchPosition _currentAlphabetMode
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::kamasutra::widget::kamasutra.dart::_KamasutraState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::kamasutra::widget::kamasutra.dart::_KamasutraState"

class "gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::Kenny" {
  +_KennyState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::Kenny"

class "gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::_KennyState" {
  -TextEditingController _inputController
  -TextEditingController _mController
  -TextEditingController _pController
  -TextEditingController _fController
  -String _currentInput
  -bool _currentCaseSensitive
  -String _currentM
  -String _currentP
  -String _currentF
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::_KennyState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::_KennyState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::kenny::widget::kenny.dart::_KennyState"

class "gc_wizard::tools::crypto_and_encodings::language_games::chicken_language::widget::chicken_language.dart::ChickenLanguage" {
  +_ChickenLanguageState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::chicken_language::widget::chicken_language.dart::ChickenLanguage"

class "gc_wizard::tools::crypto_and_encodings::language_games::chicken_language::widget::chicken_language.dart::_ChickenLanguageState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::language_games::chicken_language::widget::chicken_language.dart::_ChickenLanguageState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::chicken_language::widget::chicken_language.dart::_ChickenLanguageState"

class "gc_wizard::tools::crypto_and_encodings::language_games::duck_speak::widget::duck_speak.dart::DuckSpeak" {
  +_DuckSpeakState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::duck_speak::widget::duck_speak.dart::DuckSpeak"

class "gc_wizard::tools::crypto_and_encodings::language_games::duck_speak::widget::duck_speak.dart::_DuckSpeakState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDuckSpeakMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::language_games::duck_speak::widget::duck_speak.dart::_DuckSpeakState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::duck_speak::widget::duck_speak.dart::_DuckSpeakState"

class "gc_wizard::tools::crypto_and_encodings::language_games::pig_latin::widget::pig_latin.dart::PigLatin" {
  +_PigLatinState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::pig_latin::widget::pig_latin.dart::PigLatin"

class "gc_wizard::tools::crypto_and_encodings::language_games::pig_latin::widget::pig_latin.dart::_PigLatinState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::language_games::pig_latin::widget::pig_latin.dart::_PigLatinState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::pig_latin::widget::pig_latin.dart::_PigLatinState"

class "gc_wizard::tools::crypto_and_encodings::language_games::robber_language::widget::robber_language.dart::RobberLanguage" {
  +_RobberLanguageState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::robber_language::widget::robber_language.dart::RobberLanguage"

class "gc_wizard::tools::crypto_and_encodings::language_games::robber_language::widget::robber_language.dart::_RobberLanguageState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::language_games::robber_language::widget::robber_language.dart::_RobberLanguageState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::robber_language::widget::robber_language.dart::_RobberLanguageState"

class "gc_wizard::tools::crypto_and_encodings::language_games::spoon_language::widget::spoon_language.dart::SpoonLanguage" {
  +_SpoonLanguageState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::spoon_language::widget::spoon_language.dart::SpoonLanguage"

class "gc_wizard::tools::crypto_and_encodings::language_games::spoon_language::widget::spoon_language.dart::_SpoonLanguageState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::language_games::spoon_language::widget::spoon_language.dart::_SpoonLanguageState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::language_games::spoon_language::widget::spoon_language.dart::_SpoonLanguageState"

class "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::MayaNumbers" {
  +_MayaNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::MayaNumbers"

class "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::_MayaNumbersState" {
  -int _currentEncodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::_MayaNumbersState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::_MayaNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers.dart::_MayaNumbersState"

class "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers_segment_display.dart::MayaNumbersSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::maya_numbers::widget::maya_numbers_segment_display.dart::MayaNumbersSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::MexicanArmyCipherWheel" {
  +_MexicanArmyCipherWheelState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::MexicanArmyCipherWheel"

class "gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::_MexicanArmyCipherWheelState" {
  -TextEditingController _controller
  -TextEditingController _key4Controller
  -String _currentInput
  -int _currentKey1
  -int _currentKey2
  -int _currentKey3
  -int _currentKey4
  -int _currentLetterValue4
  -String _currentKey4Text
  -String _output
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::_MexicanArmyCipherWheelState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::_MexicanArmyCipherWheelState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::mexican_army_cipher_wheel::widget::mexican_army_cipher_wheel.dart::_MexicanArmyCipherWheelState"

class "gc_wizard::tools::crypto_and_encodings::morse::api_mapper::morse.dart::MorseAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::crypto_and_encodings::morse::api_mapper::morse.dart::MorseAPIMapper"

class "gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::Morse" {
  +_MorseState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::Morse"

class "gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::_MorseState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildMorseButtons()
  -void _addCharacter()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::_MorseState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::_MorseState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::morse::widget::morse.dart::_MorseState"

class "gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::Navajo" {
  +_NavajoState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::Navajo"

class "gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::_NavajoState" {
  -TextEditingController _decodeController
  -TextEditingController _encodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -String _output
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentSource
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::_NavajoState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::_NavajoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::navajo::widget::navajo.dart::_NavajoState"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::NumeralWordsConverter" {
  +_NumeralWordsConverterState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::NumeralWordsConverter"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState" {
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -NumeralWordsLanguage _currentLanguage
  -int _currentNumber
  -SplayTreeMap<String, NumeralWordsLanguage>? _LANGUAGES
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutputEncode()
  -Widget _buildOutputDecode()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState" o-- "dart::collection::SplayTreeMap<String, NumeralWordsLanguage>"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_converter::widget::numeral_words_converter.dart::_NumeralWordsConverterState"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::NumeralWordsIdentifyLanguages" {
  +_NumeralWordsIdentifyLanguagesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::NumeralWordsIdentifyLanguages"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::_NumeralWordsIdentifyLanguagesState" {
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -GCWSwitchPosition _currentDecodeMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::_NumeralWordsIdentifyLanguagesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::_NumeralWordsIdentifyLanguagesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_identify_languages::widget::numeral_words_identify_languages.dart::_NumeralWordsIdentifyLanguagesState"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::NumeralWordsLists" {
  +_NumeralWordsListsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::NumeralWordsLists"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::_NumeralWordsListsState" {
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -NumeralWordsLanguage _currentLanguage
  -int _valueFontsizeOffset
  -bool _setDefaultLanguage
  -SplayTreeMap<String, NumeralWordsLanguage>? _LANGUAGES
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -NumeralWordsLanguage _defaultLanguage()
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::_NumeralWordsListsState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::_NumeralWordsListsState" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::_NumeralWordsListsState" o-- "dart::collection::SplayTreeMap<String, NumeralWordsLanguage>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_lists::widget::numeral_words_lists.dart::_NumeralWordsListsState"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::NumeralWordsTextSearch" {
  +_NumeralWordsTextSearchState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::NumeralWordsTextSearch"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::_NumeralWordsTextSearchState" {
  -TextEditingController _decodeController
  -TextEditingController _codeControllerHighlighted
  -String _currentDecodeInput
  -GCWSwitchPosition _currentDecodeMode
  -NumeralWordsLanguage _currentLanguage
  -bool _setDefaultLanguage
  -Map<String, NumeralWordsLanguage>? _languageList
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -Map<String, TextStyle> _numeralWordsHiglightMap()
  -NumeralWordsLanguage _defaultLanguage()
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::_NumeralWordsTextSearchState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::_NumeralWordsTextSearchState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::_NumeralWordsTextSearchState" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::numeral_words_text_search::widget::numeral_words_text_search.dart::_NumeralWordsTextSearchState"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsDecodeOutput" {
  +String number
  +String numWord
  +String language
}

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsOutput" {
  +bool state
  +String output
  +String? language
}

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertBase" {
  +String numbersystem
  +String nameOfNumberSystem
  +String error
}

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertToNumber" {
  +int number
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertBase" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertToNumber"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertToNumeralWord" {
  +String numeralWord
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertBase" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::OutputConvertToNumeralWord"

class "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage" {
  +int index
  {static} +List<NumeralWordsLanguage> values
  {static} +NumeralWordsLanguage AMH
  {static} +NumeralWordsLanguage BAS
  {static} +NumeralWordsLanguage BRE
  {static} +NumeralWordsLanguage BUL
  {static} +NumeralWordsLanguage BULKYR
  {static} +NumeralWordsLanguage CEQ
  {static} +NumeralWordsLanguage CHI
  {static} +NumeralWordsLanguage CHISYMBOL
  {static} +NumeralWordsLanguage CHIZHUYIN
  {static} +NumeralWordsLanguage CHIFINANCE
  {static} +NumeralWordsLanguage CZE
  {static} +NumeralWordsLanguage DEU
  {static} +NumeralWordsLanguage DNK
  {static} +NumeralWordsLanguage DOT
  {static} +NumeralWordsLanguage ENG
  {static} +NumeralWordsLanguage EPO
  {static} +NumeralWordsLanguage ESP
  {static} +NumeralWordsLanguage FIN
  {static} +NumeralWordsLanguage FRA
  {static} +NumeralWordsLanguage GRC
  {static} +NumeralWordsLanguage GRCLAT
  {static} +NumeralWordsLanguage GRCOLD
  {static} +NumeralWordsLanguage GRCOLDLAT
  {static} +NumeralWordsLanguage HANJA
  {static} +NumeralWordsLanguage HANGULKOR
  {static} +NumeralWordsLanguage HANGULSINOKOR
  {static} +NumeralWordsLanguage IND
  {static} +NumeralWordsLanguage ITA
  {static} +NumeralWordsLanguage JAP
  {static} +NumeralWordsLanguage JAPHIRAGANA
  {static} +NumeralWordsLanguage KLI
  {static} +NumeralWordsLanguage KOR
  {static} +NumeralWordsLanguage KYR
  {static} +NumeralWordsLanguage LOJ
  {static} +NumeralWordsLanguage LAT
  {static} +NumeralWordsLanguage MEG
  {static} +NumeralWordsLanguage MIN
  {static} +NumeralWordsLanguage NAVI
  {static} +NumeralWordsLanguage NLD
  {static} +NumeralWordsLanguage NOR
  {static} +NumeralWordsLanguage POL
  {static} +NumeralWordsLanguage POR
  {static} +NumeralWordsLanguage QUE
  {static} +NumeralWordsLanguage ROU
  {static} +NumeralWordsLanguage RUS
  {static} +NumeralWordsLanguage SCO
  {static} +NumeralWordsLanguage SHA
  {static} +NumeralWordsLanguage SINOKOR
  {static} +NumeralWordsLanguage SOL
  {static} +NumeralWordsLanguage SVK
  {static} +NumeralWordsLanguage SWE
  {static} +NumeralWordsLanguage TAM
  {static} +NumeralWordsLanguage THAI
  {static} +NumeralWordsLanguage THAIRTGS
  {static} +NumeralWordsLanguage TUR
  {static} +NumeralWordsLanguage VOL
  {static} +NumeralWordsLanguage MAP
  {static} +NumeralWordsLanguage UNG
  {static} +NumeralWordsLanguage PER
  {static} +NumeralWordsLanguage VIE
  {static} +NumeralWordsLanguage VIECHUNOM
  {static} +NumeralWordsLanguage VIEHANTU
  {static} +NumeralWordsLanguage VIESINO
  {static} +NumeralWordsLanguage ALL
  {static} +NumeralWordsLanguage NUM
}

"gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"

class "gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::OneTimePad" {
  +_OneTimePadState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::OneTimePad"

class "gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::_OneTimePadState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -String _currentInput
  -String _currentKey
  -int _currentOffset
  -GCWSwitchPosition _currentMode
  -String _mask
  -Map<String, RegExp> _filter
  -GCWMaskTextInputFormatter _inputMaskInputFormatter
  -GCWMaskTextInputFormatter _keyMaskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::_OneTimePadState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::_OneTimePadState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::_OneTimePadState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::one_time_pad::widget::one_time_pad.dart::_OneTimePadState"

class "gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::Playfair" {
  +_PlayfairState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::Playfair"

class "gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::_PlayfairState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -String _currentInput
  -String _currentKey
  -GCWSwitchPosition _currentMode
  -AlphabetModificationMode _currentModificationMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::_PlayfairState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::_PlayfairState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::_PlayfairState" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::playfair::widget::playfair.dart::_PlayfairState"

class "gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::Pokemon" {
  +_PokemonState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::Pokemon"

class "gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::_PokemonState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncode
  -String _currentDecode
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::_PokemonState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::_PokemonState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::pokemon::widget::pokemon.dart::_PokemonState"

class "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosOutput" {
  +String output
  +String grid
}

class "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode" {
  +int index
  {static} +List<PolybiosMode> values
  {static} +PolybiosMode AZ09
  {static} +PolybiosMode ZA90
  {static} +PolybiosMode x90ZA
  {static} +PolybiosMode x09AZ
  {static} +PolybiosMode CUSTOM
}

"gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"

class "gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::Polybios" {
  +_PolybiosState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::Polybios"

class "gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -TextEditingController _alphabetController
  -String _currentInput
  -String _currentKey
  -PolybiosMode _currentPolybiosMode
  -String _currentAlphabet
  -AlphabetModificationMode _currentModificationMode
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::polybios::widget::polybios.dart::_PolybiosState"

class "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::Predator" {
  +_PredatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::Predator"

class "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorState"

class "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::predator::widget::predator.dart::_PredatorSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::PrimeAlphabet" {
  +_PrimeAlphabetState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::PrimeAlphabet"

class "gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::_PrimeAlphabetState" {
  -TextEditingController _encryptInputController
  -TextEditingController _decryptInputController
  -String _currentEncryptInput
  -String _currentDecryptInput
  -GCWSwitchPosition _currentMode
  -int _currentStartIndex
  -int _currentEndIndex
  +void initState()
  +void dispose()
  +Widget build()
  -List<String> _getItemEntries()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::_PrimeAlphabetState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::_PrimeAlphabetState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::prime_alphabet::widget::prime_alphabet.dart::_PrimeAlphabetState"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::RabbitOutput" {
  +String output
  +String? keyHexFormat
  +String? ivHexFormat
  +ErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::RabbitOutput" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::Rabbit" {
  -_context _master
  -_context? _working
  +bool initialized
  -bool _reSeedIV()
  +Uint8List? cryptData()
  +Uint8List? keyStreamBytes()
  -int _uint32()
  -int _rotateLeft()
  -int _fromBytesToUInt32()
  -Uint8List _fromUInt32ToBytes()
  -int _g()
  -void _nextState()
  -void _keySetup()
  -bool _ivSetup()
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::Rabbit" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::_context"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::_context" {
  +int carry
  +Uint32List counters
  +Uint32List state
  +_context clone()
  +void clear()
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::_context" o-- "dart::typed_data::Uint32List"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::InputFormat" {
  +int index
  {static} +List<InputFormat> values
  {static} +InputFormat AUTO
  {static} +InputFormat TEXT
  {static} +InputFormat HEX
  {static} +InputFormat BINARY
  {static} +InputFormat ASCIIVALUES
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::InputFormat" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::InputFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::InputFormat"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::OutputFormat" {
  +int index
  {static} +List<OutputFormat> values
  {static} +OutputFormat TEXT
  {static} +OutputFormat HEX
  {static} +OutputFormat BINARY
  {static} +OutputFormat ASCIIVALUES
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::OutputFormat" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::OutputFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::OutputFormat"

class "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::ErrorCode" {
  +int index
  {static} +List<ErrorCode> values
  {static} +ErrorCode OK
  {static} +ErrorCode INPUT_FORMAT
  {static} +ErrorCode KEY_FORMAT
  {static} +ErrorCode MISSING_KEY
  {static} +ErrorCode IV_FORMAT
}

"gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::ErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::ErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::Rabbit" {
  +_RabbitState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::Rabbit"

class "gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::_RabbitState" {
  -String _currentInput
  -String _currentKey
  -String _currentInitializationVector
  -bool _currentExpanded
  -InputFormat _currentInputFormat
  -InputFormat _currentKeyFormat
  -InputFormat _currentIvFormat
  -OutputFormat _currentOutputFormat
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::_RabbitState" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::InputFormat"
"gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::_RabbitState" o-- "gc_wizard::tools::crypto_and_encodings::rabbit::logic::rabbit.dart::OutputFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rabbit::widget::rabbit.dart::_RabbitState"

class "gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::RailFence" {
  +_RailFenceState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::RailFence"

class "gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::_RailFenceState" {
  -String _currentInput
  -int _currentKey
  -String _currentPassword
  -int _currentOffset
  -GCWSwitchPosition _currentMode
  -GCWMaskTextInputFormatter _maskInputFormatter
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::_RailFenceState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::_RailFenceState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rail_fence::widget::rail_fence.dart::_RailFenceState"

class "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::RC4Output" {
  +String output
  +ErrorCode errorCode
}

"gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::RC4Output" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::InputFormat" {
  +int index
  {static} +List<InputFormat> values
  {static} +InputFormat AUTO
  {static} +InputFormat TEXT
  {static} +InputFormat HEX
  {static} +InputFormat BINARY
  {static} +InputFormat ASCIIVALUES
}

"gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::InputFormat" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::InputFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::InputFormat"

class "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::OutputFormat" {
  +int index
  {static} +List<OutputFormat> values
  {static} +OutputFormat TEXT
  {static} +OutputFormat HEX
  {static} +OutputFormat BINARY
  {static} +OutputFormat ASCIIVALUES
}

"gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::OutputFormat" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::OutputFormat"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::OutputFormat"

class "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::ErrorCode" {
  +int index
  {static} +List<ErrorCode> values
  {static} +ErrorCode OK
  {static} +ErrorCode INPUT_FORMAT
  {static} +ErrorCode KEY_FORMAT
  {static} +ErrorCode MISSING_KEY
}

"gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::ErrorCode" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::ErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::ErrorCode"

class "gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::RC4" {
  +_RC4State createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::RC4"

class "gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::_RC4State" {
  -String _currentInput
  -String _currentKey
  -InputFormat _currentInputFormat
  -InputFormat _currentKeyFormat
  -OutputFormat _currentOutputFormat
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::_RC4State" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::InputFormat"
"gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::_RC4State" o-- "gc_wizard::tools::crypto_and_encodings::rc4::logic::rc4.dart::OutputFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rc4::widget::rc4.dart::_RC4State"

class "gc_wizard::tools::crypto_and_encodings::reverse::api_mapper::reverse.dart::ReverseAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::crypto_and_encodings::reverse::api_mapper::reverse.dart::ReverseAPIMapper"

class "gc_wizard::tools::crypto_and_encodings::reverse::widget::reverse.dart::Reverse" {
  +_ReverseState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::reverse::widget::reverse.dart::Reverse"

class "gc_wizard::tools::crypto_and_encodings::reverse::widget::reverse.dart::_ReverseState" {
  -String _output
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::reverse::widget::reverse.dart::_ReverseState"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::api_mapper::roman_numbers.dart::RomanNumbersAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::api_mapper::roman_numbers.dart::RomanNumbersAPIMapper"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::chronogram::widget::chronogram.dart::Chronogram" {
  +_ChronogramState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::chronogram::widget::chronogram.dart::Chronogram"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::chronogram::widget::chronogram.dart::_ChronogramState" {
  -String _currentInput
  -bool _currentJUToIV
  -bool _currentYToII
  -bool _currentWToVV
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::chronogram::widget::chronogram.dart::_ChronogramState"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::logic::roman_numbers.dart::RomanNumberType" {
  +int index
  {static} +List<RomanNumberType> values
  {static} +RomanNumberType ONLY_ADDITION
  {static} +RomanNumberType USE_SUBTRACTION_RULE
}

"gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::logic::roman_numbers.dart::RomanNumberType" o-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::logic::roman_numbers.dart::RomanNumberType"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::logic::roman_numbers.dart::RomanNumberType"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::RomanNumbers" {
  +_RomanNumbersState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::RomanNumbers"

class "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::_RomanNumbersState" {
  -TextEditingController _decodeController
  -int _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::_RomanNumbersState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::_RomanNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::roman_numbers::roman_numbers::widget::roman_numbers.dart::_RomanNumbersState"

class "gc_wizard::tools::crypto_and_encodings::rotation::api_mapper::rotation.dart::RotatorAPIMapper" {
  +String Key
  +String doLogic()
  +Map<String, String> toMap()
  +String apiSpecification()
}

"gc_wizard::application::webapi::api_mapper.dart::APIMapper" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::api_mapper::rotation.dart::RotatorAPIMapper"

class "gc_wizard::tools::crypto_and_encodings::rotation::logic::rotation.dart::Rotator" {
  {static} +String defaultAlphabetAlpha
  {static} +String defaultAlphabetDigits
  +String alphabet
  +String rotate()
  -String _rotateIgnoreCase()
  +String rot13()
  +String rot5()
  +String rot18()
  +String rot47()
}

class "gc_wizard::tools::crypto_and_encodings::rotation::rot123::widget::rot123.dart::Rot123" {
  +_Rot123State createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot123::widget::rot123.dart::Rot123"

class "gc_wizard::tools::crypto_and_encodings::rotation::rot123::widget::rot123.dart::_Rot123State" {
  -TextEditingController _controller
  -String _currentInput
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::rotation::rot123::widget::rot123.dart::_Rot123State" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot123::widget::rot123.dart::_Rot123State"

class "gc_wizard::tools::crypto_and_encodings::rotation::rot13::widget::rot13.dart::Rot13" {
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot13::widget::rot13.dart::Rot13"

class "gc_wizard::tools::crypto_and_encodings::rotation::rot18::widget::rot18.dart::Rot18" {
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot18::widget::rot18.dart::Rot18"

class "gc_wizard::tools::crypto_and_encodings::rotation::rot47::widget::rot47.dart::Rot47" {
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot47::widget::rot47.dart::Rot47"

class "gc_wizard::tools::crypto_and_encodings::rotation::rot5::widget::rot5.dart::Rot5" {
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rot5::widget::rot5.dart::Rot5"

class "gc_wizard::tools::crypto_and_encodings::rotation::rotation_general::widget::rotation_general.dart::RotationGeneral" {
  +_RotationGeneralState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rotation_general::widget::rotation_general.dart::RotationGeneral"

class "gc_wizard::tools::crypto_and_encodings::rotation::rotation_general::widget::rotation_general.dart::_RotationGeneralState" {
  -TextEditingController _controller
  -String _currentInput
  -int _currentKey
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::rotation::rotation_general::widget::rotation_general.dart::_RotationGeneralState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::rotation_general::widget::rotation_general.dart::_RotationGeneralState"

abstract class "gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" {
  +String Function(String) rotate
  +String apiSpecification
  +_AbstractRotationState createState()
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation" o-- "null::String Function(String)"
"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::AbstractRotation"

class "gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::_AbstractRotationState" {
  -TextEditingController _controller
  -String _currentInput
  +void initState()
  +void dispose()
  +Widget build()
}

"gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::_AbstractRotationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rotation::widget::base_rot.dart::_AbstractRotationState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::RSA" {
  +_RSAState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::RSA"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::_RSAState" {
  -String _currentInput
  -String _currentED
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -GCWSwitchPosition _currentMode
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::_RSAState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::_RSAState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::_RSAState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa::widget::rsa.dart::_RSAState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::RSADCalculator" {
  +_RSADCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::RSADCalculator"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::_RSADCalculatorState" {
  -String _currentE
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::_RSADCalculatorState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::_RSADCalculatorState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_calculator::widget::rsa_d_calculator.dart::_RSADCalculatorState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::RSADChecker" {
  +_RSADCheckerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::RSADChecker"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::_RSADCheckerState" {
  -String _currentD
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::_RSADCheckerState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::_RSADCheckerState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_d_checker::widget::rsa_d_checker.dart::_RSADCheckerState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::RSAEChecker" {
  +_RSAECheckerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::RSAEChecker"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::_RSAECheckerState" {
  -String _currentE
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::_RSAECheckerState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::_RSAECheckerState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_e_checker::widget::rsa_e_checker.dart::_RSAECheckerState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::RSANCalculator" {
  +_RSANCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::RSANCalculator"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::_RSANCalculatorState" {
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::_RSANCalculatorState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::_RSANCalculatorState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_n_calculator::widget::rsa_n_calculator.dart::_RSANCalculatorState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::RSAPhiCalculator" {
  +_RSAPhiCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::RSAPhiCalculator"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::_RSAPhiCalculatorState" {
  -String _currentP
  -String _currentQ
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -Widget? _output
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::_RSAPhiCalculatorState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::_RSAPhiCalculatorState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_phi_calculator::widget::rsa_phi_calculator.dart::_RSAPhiCalculatorState"

class "gc_wizard::tools::crypto_and_encodings::rsa::rsa_primes_calculator::widget::rsa_primes_calculator.dart::RSAPrimesCalculator" {
}

"gc_wizard::tools::science_and_technology::primes::primes_integerfactorization::widget::primes_integerfactorization.dart::IntegerFactorization" <|-- "gc_wizard::tools::crypto_and_encodings::rsa::rsa_primes_calculator::widget::rsa_primes_calculator.dart::RSAPrimesCalculator"

class "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::logic::shadoks_numbers.dart::ShadocksOutput" {
  +List<int> numbers
  +BigInt quaternary
  +String shadoks
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" <|-- "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::logic::shadoks_numbers.dart::ShadocksOutput"

class "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::ShadoksNumbers" {
  +_ShadoksNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::ShadoksNumbers"

class "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersState" {
  {static} -Map<String, String> _segmentToWord
  -int _currentEncodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -Map<String, bool> _currentDisplay
  +Widget build()
  -Widget _buildVisualDecryption()
  -String _segmentsToShadoks()
  -NSegmentDisplay _SanatizedShadoksNumbersSegmentDisplay()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersState"

class "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::crypto_and_encodings::shadoks_numbers::widget::shadoks_numbers.dart::_ShadoksNumbersSegmentDisplay"

class "gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::Skytale" {
  +_SkytaleState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::Skytale"

class "gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::_SkytaleState" {
  -TextEditingController _inputController
  -TextEditingController _columnController
  -String _currentInput
  -int _currentPerimeter
  -int _currentCountColumns
  -int _currentStripWidth
  -int _currentCountColumnsMin
  -bool _fromColumnSpinner
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::_SkytaleState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::_SkytaleState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::skytale::widget::skytale.dart::_SkytaleState"

class "gc_wizard::tools::crypto_and_encodings::solitaire::logic::solitaire.dart::SolitaireOutput" {
  +String output
  +String keyStream
  +String resultDeck
}

class "gc_wizard::tools::crypto_and_encodings::solitaire::widget::solitaire.dart::Solitaire" {
  +_SolitaireState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::solitaire::widget::solitaire.dart::Solitaire"

class "gc_wizard::tools::crypto_and_encodings::solitaire::widget::solitaire.dart::_SolitaireState" {
  -String _currentInput
  -String _currentKey
  -GCWSwitchPosition _currentMode
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::solitaire::widget::solitaire.dart::_SolitaireState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::solitaire::widget::solitaire.dart::_SolitaireState"

class "gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::logic::straddling_checkerboard.dart::StraddlingCheckerboardOutput" {
  +String output
  +String grid
}

class "gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::StraddlingCheckerboard" {
  +_StraddlingCheckerboardState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::StraddlingCheckerboard"

class "gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::_StraddlingCheckerboardState" {
  -TextEditingController _plainTextController
  -TextEditingController _chiffreTextController
  -TextEditingController _KeyController
  -TextEditingController _AlphabetWordController
  -TextEditingController _AlphabetController
  -TextEditingController _ColumnOrderController
  -PolybiosMode _currentAlphabetMode
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDigitMode
  -String _currentPlainText
  -String _currentChiffreText
  -String _currentKey
  -String _currentKeyHint
  -String _currentAlphabet
  -String _currentAlphabetWord
  -String _currentColumnOrder
  -String _output
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::_StraddlingCheckerboardState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::_StraddlingCheckerboardState" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::_StraddlingCheckerboardState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::straddling_checkerboard::widget::straddling_checkerboard.dart::_StraddlingCheckerboardState"

class "gc_wizard::tools::crypto_and_encodings::substitution::widget::substitution.dart::Substitution" {
  +String? input
  +Map<String, String>? substitutions
  +_SubstitutionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::substitution::widget::substitution.dart::Substitution"

class "gc_wizard::tools::crypto_and_encodings::substitution::widget::substitution.dart::_SubstitutionState" {
  -TextEditingController _inputController
  -String _currentInput
  -String _currentFromInput
  -String _currentToInput
  -bool _currentCaseSensitive
  -int _currentIdCount
  -List<KeyValueBase> _currentSubstitutions
  -String _output
  +void initState()
  +void dispose()
  -void _addEntry()
  -void _updateNewEntry()
  -void _updateEntry()
  +Widget build()
  -Widget _buildVariablesEditor()
  -void _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::substitution::widget::substitution.dart::_SubstitutionState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::substitution::widget::substitution.dart::_SubstitutionState"

class "gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::Tapir" {
  +_TapirState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::Tapir"

class "gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::_TapirState" {
  -TextEditingController _inputController
  -TextEditingController _otpController
  -String _currentInput
  -GCWSwitchPosition _currentMode
  -bool _currentOneTimePadMode
  -String _currentOneTimePad
  -GCWMaskTextInputFormatter _maskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::_TapirState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::_TapirState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::_TapirState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::tapir::widget::tapir.dart::_TapirState"

class "gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::TapCode" {
  +_TapCodeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::TapCode"

class "gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState" {
  -TextEditingController _encryptionController
  -TextEditingController _decryptionController
  -String _currentEncryptionInput
  -String _currentDecryptionInput
  -AlphabetModificationMode _currentModificationMode
  -GCWSwitchPosition _currentMode
  -GCWMaskTextInputFormatter _maskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::tap_code::widget::tap_code.dart::_TapCodeState"

class "gc_wizard::tools::crypto_and_encodings::text_analysis::logic::text_analysis.dart::ControlCharacter" {
  +int asciiValue
  +String unicode
  +String name
  +String abbreviation
  +String? escapeCode
  +List<String> symbols
}

class "gc_wizard::tools::crypto_and_encodings::text_analysis::logic::text_analysis.dart::TextAnalysisCharacterCounts" {
  +Map<String, int> letters
  +Map<String, int> numbers
  +Map<String, int> specialChars
  +Map<String, int> whiteSpaces
  +Map<String, int> controlChars
}

class "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::TextAnalysis" {
  +_TextAnalysisState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::TextAnalysis"

class "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_TextAnalysisState" {
  -TextEditingController _inputController
  -String _currentInput
  -bool _currentOptions
  -bool _currentUseLetters
  -bool _currentUseNumbers
  -bool _currentUseSpecialChars
  -bool _currentUseWhitespaceChars
  -bool _currentUseControlChars
  -bool _currentCaseSensitive
  -_SORT_TYPES _currentSort
  +void initState()
  +void dispose()
  +Widget build()
  -String? _buildControlCharName()
  -int _groupCount()
  -TextGroup? _buildGroup()
  -Widget _buildGroupWidget()
  -int _totalCount()
  -Set<String> _recognizedChars()
  -int _totalDistinctCount()
  -int _wordCount()
  -Widget _buildOutput()
  -Column _buildOverallGroupOutput()
  -Column _buildGroupsOutput()
}

"gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_TextAnalysisState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_TextAnalysisState" o-- "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_SORT_TYPES"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_TextAnalysisState"

class "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::TextGroup" {
  +List<List<Object>> common
  +List<List<Object?>> detailed
  +bool isControlCharGroup
}

class "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_SORT_TYPES" {
  +int index
  {static} +List<_SORT_TYPES> values
  {static} +_SORT_TYPES ALPHABETICAL
  {static} +_SORT_TYPES COUNT_GROUP
  {static} +_SORT_TYPES COUNT_OVERALL
}

"gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_SORT_TYPES" o-- "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_SORT_TYPES"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::text_analysis::widget::text_analysis.dart::_SORT_TYPES"

class "gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::TomTom" {
  +_TomTomState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::TomTom"

class "gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::_TomTomState" {
  -TextEditingController _inputEncryptController
  -TextEditingController _inputDecryptController
  -TextEditingController _aController
  -TextEditingController _bController
  -String _currentInputEncrypt
  -String _currentInputDecrypt
  -String _currentA
  -String _currentB
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildButtonBar()
  -void _addCharacter()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::_TomTomState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::_TomTomState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::tomtom::widget::tomtom.dart::_TomTomState"

class "gc_wizard::tools::crypto_and_encodings::trifid::logic::trifid.dart::TrifidOutput" {
  +String output
  +String grid
}

class "gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::Trifid" {
  +_TrifidState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::Trifid"

class "gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::_TrifidState" {
  -TextEditingController _inputController
  -TextEditingController _alphabetController
  -GCWSwitchPosition _currentMode
  -String _currentInput
  -String _currentAlphabet
  -int _currentBlockSize
  -PolybiosMode _currentTrifidMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::_TrifidState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::_TrifidState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::_TrifidState" o-- "gc_wizard::tools::crypto_and_encodings::polybios::logic::polybios.dart::PolybiosMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::trifid::widget::trifid.dart::_TrifidState"

class "gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::Trithemius" {
  +_TrithemiusState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::Trithemius"

class "gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::_TrithemiusState" {
  -TextEditingController _inputController
  -String _currentInput
  -int _currentAValue
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::_TrithemiusState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::_TrithemiusState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::trithemius::widget::trithemius.dart::_TrithemiusState"

class "gc_wizard::tools::crypto_and_encodings::vigenere::logic::vigenere.dart::_KeyOutput" {
  +String key
  +String type
}

class "gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::Vigenere" {
  +_VigenereState createState()
}

"gc_wizard::common_widgets::gcw_web_statefulwidget.dart::GCWWebStatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::Vigenere"

class "gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::_VigenereState" {
  -TextEditingController _inputController
  -TextEditingController _keyController
  -String _currentInput
  -String _currentKey
  -int _currentAValue
  -GCWSwitchPosition _currentMode
  -bool _currentAutokey
  -bool _currentNonLetters
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::_VigenereState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::_VigenereState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::vigenere::widget::vigenere.dart::_VigenereState"

class "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::Offset" {
  +int xOffset
  +int yOffset
  +int leftBorder
}

class "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_TYPE" {
  +int index
  {static} +List<WASD_TYPE> values
  {static} +WASD_TYPE CURSORS
  {static} +WASD_TYPE WASD
  {static} +WASD_TYPE IJMK
  {static} +WASD_TYPE ESDF
  {static} +WASD_TYPE ULDR
  {static} +WASD_TYPE OLUR
  {static} +WASD_TYPE VLZR
  {static} +WASD_TYPE WQSE
  {static} +WASD_TYPE ARROWS
  {static} +WASD_TYPE NWSE
  {static} +WASD_TYPE NWSO
  {static} +WASD_TYPE NUMERIC
  {static} +WASD_TYPE CUSTOM
}

"gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_TYPE" o-- "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_TYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_TYPE"

class "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_DIRECTION" {
  +int index
  {static} +List<WASD_DIRECTION> values
  {static} +WASD_DIRECTION UP
  {static} +WASD_DIRECTION DOWN
  {static} +WASD_DIRECTION LEFT
  {static} +WASD_DIRECTION RIGHT
  {static} +WASD_DIRECTION START
  {static} +WASD_DIRECTION UPLEFT
  {static} +WASD_DIRECTION UPRIGHT
  {static} +WASD_DIRECTION DOWNLEFT
  {static} +WASD_DIRECTION DOWNRIGHT
}

"gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_DIRECTION" o-- "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_DIRECTION"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_DIRECTION"

class "gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::WASD" {
  +_WASDState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::WASD"

class "gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -TextEditingController _upController
  -TextEditingController _upLeftController
  -TextEditingController _upRightController
  -TextEditingController _downController
  -TextEditingController _downLeftController
  -TextEditingController _downRightController
  -TextEditingController _leftController
  -TextEditingController _rightController
  -TextEditingController _currentCustomKeyController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -String _currentUp
  -String _currentLeft
  -String _currentDown
  -String _currentRight
  -String _currentDownLeft
  -String _currentDownRight
  -String _currentUpLeft
  -String _currentUpRight
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentOutputMode
  -WASD_TYPE _currentKeyboardControls
  -int _keyboardLayout
  -GCWMaskTextInputFormatter _maskInputFormatter
  -Uint8List? _outDecodeData
  -Uint8List? _outEncodeData
  +void initState()
  +void dispose()
  -String _defaultCursorForWASDDirection()
  -Widget _buildCustomInput()
  -Widget _buildButton()
  -List<String> _controlSet()
  -void _updateDrawing()
  -Widget _buildControlSet()
  -void _addInput()
  +Widget build()
  -void _createGraphicOutputDecodeData()
  -Widget _buildGraphicDecodeOutput()
  -void _createGraphicOutputEncodeData()
  -Widget _buildGraphicEncodeOutput()
  -dynamic _exportFile()
  -String _buildOutput()
}

"gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" o-- "gc_wizard::tools::crypto_and_encodings::wasd::logic::wasd.dart::WASD_TYPE"
"gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState" o-- "dart::typed_data::Uint8List"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::crypto_and_encodings::wasd::widget::wasd.dart::_WASDState"

class "gc_wizard::tools::crypto_and_encodings::zamonian_numbers::widget::zamonian_numbers.dart::ZamonianNumbers" {
}

"gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::SymbolTable" <|-- "gc_wizard::tools::crypto_and_encodings::zamonian_numbers::widget::zamonian_numbers.dart::ZamonianNumbers"

class "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode" {
  +int index
  {static} +List<AlphabetModificationMode> values
  {static} +AlphabetModificationMode J_TO_I
  {static} +AlphabetModificationMode C_TO_K
  {static} +AlphabetModificationMode W_TO_VV
  {static} +AlphabetModificationMode REMOVE_Q
}

"gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::_common::logic::crypt_alphabet_modification.dart::AlphabetModificationMode"

class "gc_wizard::tools::crypto_and_encodings::_common::logic::transposition.dart::TranspositionMatrixFillMode" {
  +int index
  {static} +List<TranspositionMatrixFillMode> values
  {static} +TranspositionMatrixFillMode encryption
  {static} +TranspositionMatrixFillMode decryption
}

"gc_wizard::tools::crypto_and_encodings::_common::logic::transposition.dart::TranspositionMatrixFillMode" o-- "gc_wizard::tools::crypto_and_encodings::_common::logic::transposition.dart::TranspositionMatrixFillMode"
"dart::core::Enum" <|-- "gc_wizard::tools::crypto_and_encodings::_common::logic::transposition.dart::TranspositionMatrixFillMode"

class "gc_wizard::tools::formula_solver::logic::formula_painter.dart::FormulaPainter" {
  {static} -String _Text
  {static} -String _Space
  {static} +String Number
  {static} +String NumberError
  {static} +String Variable
  {static} +String VariableError
  {static} +String OFRB
  {static} +String OFRBError
  {static} -Set<String> _operators
  {static} -Map<String, String> _bracket
  {static} -String _numberRegEx
  {static} -String _STRING_MARKER_APOSTROPHE
  {static} -String _STRING_MARKER_QUOTE
  {static} -List<String> _allCharacters
  -List<FormulaValue> _variables
  -List<String> _functions
  -List<String> _constants
  -int _formulaId
  -bool _operatorBevor
  -bool _stringBevor
  -String? _parentFunctionName
  +String formula
  -String _operatorsRegEx
  -String _functionsRegEx
  -String _constantsRegEx
  -String _variablesRegEx
  +String paintFormula()
  -String _paintOutsideFormulaReferences()
  -String _paintSubFormula()
  -List<String>? _isSpaces()
  -List<String>? _isNewLine()
  -String _coloredSpaces()
  -List<String>? _isFormulaReference()
  -String _coloredFormulaReference()
  -List<String>? _isFunction()
  -String _coloredFunction()
  -List<String>? _isSpecialFunctionsLiteral()
  -bool _wordFunction()
  -bool _numberFunction()
  -String _coloredSpecialFunctionsLiteral()
  -List<String>? _isFaculty()
  -List<String>? _isLiteral()
  -List<String>? _isString()
  -List<String>? _isInvalidString()
  -String _coloredLiteral()
  -String _coloredContent()
  -List<String>? _isConstant()
  -String _coloredConstant()
  -List<String>? _isVariable()
  -bool _isEmptyVariable()
  -bool _isStringVariable()
  -bool _isNumberVariable()
  -FormulaValueType? _variableType()
  -String? _variableValue()
  -RegExpMatch? _variableMatch()
  -List<String>? _isInvalidVariable()
  -String _coloredVariable()
  -String _coloredWordFunctionVariable()
  -String _coloredNumberFunctionVariable()
  -List<String>? _isNumberWithPoint()
  -List<String>? _isNumber()
  -String _coloredNumber()
  -List<String>? _isOperator()
  -List<String>? _isInvalidOperator()
  -String _coloredOperator()
  -String _replaceRange()
  -int _calcOffset()
  -List<String> _toUpperCaseAndSort()
  -List<FormulaValue> _variablesSort()
  -String _buildResultString()
  -List<String>? _separateLiteral()
  -List<String> _separateArguments()
  -String _combineGroups()
  -String _replaceSpaces()
}

class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaParser" {
  -ContextModel _context
  +Parser parser
  +bool unlimitedExpanded
  +Map<String, String> safedFormulasMap
  +Map<String, String> safedFormulaReplacementMap
  +Map<String, String> safedTextsMap
  {static} +Map<String, double> CONSTANTS
  {static} -List<String> _BUILTIN_FUNCTIONS
  {static} -Map<String, Function> _CUSTOM_FUNCTIONS
  {static} -Map<String, int Function(String)> _CUSTOM_TEXT_FUNCTIONS
  {static} +Map<String, String> alternateOperators
  -String _MATCHED_VARIABLES_NO_KEY
  {static} -RegExp _contentStringRegExp()
  {static} -String _contentFromString()
  {static} -int _bww()
  {static} +List<String> availableParserFunctions()
  -String _safeTexts()
  -String _safeFunctionsAndConstants()
  -String _safeFormulaReplacements()
  {static} +String normalizeMathematicalSymbols()
  -_FormulaSolverResult _parseFormula()
  -bool _isString()
  -String _reSubstituteSavings()
  -bool _isFullySubstituted()
  -String _evaluateTextFunctions()
  +String tryGetOnlyStrings()
  -String _evaluateFormula()
  -List<FormulaValue> _prepareValues()
  -FormulaSolverOutput _simpleErrorOutput()
  +FormulaSolverOutput parse()
  -String _formatOutput()
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaParser" o-- "math_expressions::math_expressions.dart::ContextModel"
"gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaParser" o-- "math_expressions::math_expressions.dart::Parser"

abstract class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::_FormulaSolverResult" {
  +FormulaState state
  +Map<String, String>? variables
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::_FormulaSolverResult" o-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState"

class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverSingleResult" {
  +String result
  +String toString()
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::_FormulaSolverResult" <|-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverSingleResult"

class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverMultiResult" {
  +List<FormulaSolverSingleResult> results
  +String toString()
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::_FormulaSolverResult" <|-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverMultiResult"

class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverOutput" {
  +FormulaState state
  +List<FormulaSolverSingleResult> results
  +String toString()
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaSolverOutput" o-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState"

class "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState" {
  +int index
  {static} +List<FormulaState> values
  {static} +FormulaState STATE_SINGLE_OK
  {static} +FormulaState STATE_EXPANDED_OK
  {static} +FormulaState STATE_EXPANDED_ERROR
  {static} +FormulaState STATE_SINGLE_ERROR
  {static} +FormulaState STATE_EXPANDED_ERROR_EXCEEDEDRANGE
}

"gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState" o-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState"
"dart::core::Enum" <|-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaState"

class "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaBase" {
  +int? id
  +String name
  +int subFormulaCount
  +int valueCount
  +Map<String, Object?> toMap()
}

class "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaGroup" {
  +List<Formula> formulas
  +List<FormulaValue> values
  +int subFormulaCount
  +int valueCount
  +Map<String, Object?> toMap()
  {static} +FormulaGroup fromJson()
  +String toString()
}

"gc_wizard::tools::formula_solver::persistence::model.dart::FormulaBase" <|-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaGroup"

class "gc_wizard::tools::formula_solver::persistence::model.dart::Formula" {
  +String formula
  +Map<String, Object?> toMap()
  {static} +Formula fromJson()
  {static} +Formula fromFormula()
  +String toString()
}

"gc_wizard::tools::formula_solver::persistence::model.dart::FormulaBase" <|-- "gc_wizard::tools::formula_solver::persistence::model.dart::Formula"

class "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValue" {
  +FormulaValueType? type
  {static} +FormulaValue fromJson()
  +Map<String, Object?> toMap()
  +String toString()
}

"gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValue" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType"
"gc_wizard::utils::complex_return_types.dart::KeyValueBase" <|-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValue"

class "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType" {
  +int index
  {static} +List<FormulaValueType> values
  {static} +FormulaValueType FIXED
  {static} +FormulaValueType INTERPOLATED
}

"gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType"
"dart::core::Enum" <|-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::FormulaSolverFormulaGroups" {
  +_FormulaSolverFormulaGroupsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::FormulaSolverFormulaGroups"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaGroupsState" {
  +void initState()
  +Widget build()
  -void _addNewGroup()
  -GCWTool? _buildNavigateGCWTool()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaGroupsState"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaReplace" {
  +List<Formula> formulas
  +_FormulaReplaceState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaReplace"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaReplaceState" {
  -bool _currentValueBracket
  -bool _currentValueBraces
  -bool _currentValueMultiply
  +TextStyle textStyle
  -int _currentFormulaIndex
  +void initState()
  +Widget build()
  +Color getOverlayColor()
  +Color getFillColor()
  -List<String> _buildNewFormulas()
  -List<String> _replaceBrackets()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaReplaceState" o-- "flutter::src::painting::text_style.dart::TextStyle"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaReplaceState"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulas" {
  +FormulaGroup group
  +_FormulaSolverFormulasState createState()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulas" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaGroup"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulas"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" {
  +FormulaParser formulaParser
  +FormulaPainter formulaPainter
  -TextEditingController _newFormulaController
  -TextEditingController _editFormulaController
  -TextEditingController _editNameController
  -String _currentNewFormula
  -String _currentEditedFormula
  -int? _currentEditId
  -String _currentEditedName
  -int? _currentEditNameId
  -Map<int, Map<int, _ParsedCoordinate>> _foundCoordinates
  -ThemeColors _themeColors
  -FocusNode _editFocusNode
  +void initState()
  +void dispose()
  +Widget build()
  -dynamic _addNewFormula()
  -void _updateFormula()
  -void _removeFormula()
  -String _createVariableCoordinateName()
  -VariableCoordinateFormula _exportToVariableCoordinate()
  -void _openInVariableCoordinate()
  -String _removeOuterSquareBrackets()
  -Column _buildGroupList()
  -Widget _buildFormulaOutput()
  -GCWMapPoint _createMapPoint()
  -void _showFormulaResultOnMap()
  -Widget _buildFormulaText()
  -List<InlineSpan> _buildTextSpans()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" o-- "gc_wizard::tools::formula_solver::logic::formula_parser.dart::FormulaParser"
"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" o-- "gc_wizard::tools::formula_solver::logic::formula_painter.dart::FormulaPainter"
"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" o-- "gc_wizard::application::theme::theme_colors.dart::ThemeColors"
"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulasState"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_ParsedCoordinate" {
  +BaseCoordinate coords
  +String name
  +_FormulaSolverResultType resultType
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_ParsedCoordinate" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_ParsedCoordinate" o-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverResultType"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverResultType" {
  +int index
  {static} +List<_FormulaSolverResultType> values
  {static} +_FormulaSolverResultType INTERPOLATED
  {static} +_FormulaSolverResultType FIXED
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverResultType" o-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverResultType"
"dart::core::Enum" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverResultType"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValues" {
  +FormulaGroup group
  +_FormulaSolverFormulaValuesState createState()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValues" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaGroup"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValues"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValuesState" {
  -TextEditingController _newKeyController
  +void initState()
  +void dispose()
  -String _maxLetter()
  -void _addEntry()
  -void _updateEntry()
  +Widget build()
  -GCWKeyValueItem _createNewItem()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValuesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaSolverFormulaValuesState"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaValueTypeKeyInput" {
  +GCWKeyValueInputState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInput" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaValueTypeKeyInput"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeNewEntryState" {
  -FormulaValueType _currentType
  +Widget build()
  -Widget _typeButton()
  +bool validInput()
  +void addEntry()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeNewEntryState" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueInputState" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeNewEntryState"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaValueTypeKeyValueItem" {
  +GCWKeyValueItemState createState()
}

"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItem" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_FormulaValueTypeKeyValueItem"

class "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeItemState" {
  -FormulaValueType _currentType
  +void initValues()
  +Widget build()
  -Widget _typeButton()
  +void updateEntry()
}

"gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeItemState" o-- "gc_wizard::tools::formula_solver::persistence::model.dart::FormulaValueType"
"gc_wizard::common_widgets::key_value_editor::gcw_key_value_editor.dart::GCWKeyValueItemState" <|-- "gc_wizard::tools::formula_solver::widget::formula_solver_formulagroups.dart::_GCWKeyValueTypeItemState"

class "gc_wizard::tools::games::bowling::logic::bowling.dart::BowlingFrame" {
  +int one
  +int two
  +int three
}

class "gc_wizard::tools::games::bowling::widget::bowling.dart::Bowling" {
  +_BowlingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::bowling::widget::bowling.dart::Bowling"

class "gc_wizard::tools::games::bowling::widget::bowling.dart::_BowlingState" {
  -List<BowlingFrame> _currentBowlingScore
  -List<int> _currentFrameTotals
  -int _currentFrame
  -int _currentThrow1
  -int _currentThrow2
  -int _currentThrow3
  -double _cellWidth
  -BorderSide _border
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -void _initScoreBoard()
  -void _setThrowPointsForCurrentFrame()
  -void _calculateAndSetScore()
  -List<List<Object?>> _buildBowlingScoreTable()
  -List<Widget> _buildBowlingScoreBoard()
  -Widget _buildCellRow1()
  -Widget _buildCellRow2()
  -Widget _buildCellRow2_10()
}

"gc_wizard::tools::games::bowling::widget::bowling.dart::_BowlingState" o-- "flutter::src::painting::borders.dart::BorderSide"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::bowling::widget::bowling.dart::_BowlingState"

class "gc_wizard::tools::games::catan::logic::catan.dart::CatanMode" {
  +int index
  {static} +List<CatanMode> values
  {static} +CatanMode BASE
  {static} +CatanMode EXPANSION
}

"gc_wizard::tools::games::catan::logic::catan.dart::CatanMode" o-- "gc_wizard::tools::games::catan::logic::catan.dart::CatanMode"
"dart::core::Enum" <|-- "gc_wizard::tools::games::catan::logic::catan.dart::CatanMode"

class "gc_wizard::tools::games::catan::widget::catan.dart::Catan" {
  +_CatanState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::catan::widget::catan.dart::Catan"

class "gc_wizard::tools::games::catan::widget::catan.dart::_CatanState" {
  -String _currentInput
  -GCWSwitchPosition _currentMode
  +Widget build()
}

"gc_wizard::tools::games::catan::widget::catan.dart::_CatanState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::catan::widget::catan.dart::_CatanState"

class "gc_wizard::tools::games::game_of_life::logic::game_of_life.dart::GameOfLifeRules" {
  +Set<int> survivals
  +Set<int> births
  +bool isInverse
  +GameOfLifeRules inverseRules()
}

class "gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::GameOfLife" {
  +_GameOfLifeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::GameOfLife"

class "gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::_GameOfLifeState" {
  -List<List<List<bool>>> _boards
  -List<List<bool>> _currentBoard
  -int _currentStep
  -int _currentSize
  -bool _currentWrapWorld
  -String _currentRules
  -Map<String, GameOfLifeRules?> _allRules
  -String _currentCustomSurvive
  -TextEditingController _currentCustomSurviveController
  -String _currentCustomBirth
  -TextEditingController _currentCustomBirthController
  -bool _currentCustomInverse
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  -void _generateBoard()
  -void _reset()
  +Widget build()
  -void _forward()
  -void _backwards()
  -String _getSurvive()
  -String _getBirth()
  -int _countCells()
  -Set<int> _toSet()
  -void _calculateStep()
}

"gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::_GameOfLifeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::_GameOfLifeState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::game_of_life::widget::game_of_life.dart::_GameOfLifeState"

class "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifeBoard" {
  +int size
  +void Function(List<List<bool>>) onChanged
  +List<List<bool>> state
  +_GameOfLifeBoardState createState()
}

"gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifeBoard" o-- "null::void Function(List<List<bool>>)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifeBoard"

class "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::_GameOfLifeBoardState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::_GameOfLifeBoardState"

class "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifePainter" {
  +int size
  +List<List<bool>> state
  +BuildContext context
  +void Function(int, int, bool) onSetCell
  +void paint()
  +bool shouldRepaint()
}

"gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifePainter" o-- "flutter::src::widgets::framework.dart::BuildContext"
"gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifePainter" o-- "null::void Function(int, int, bool)"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::games::game_of_life::widget::game_of_life_board.dart::GameOfLifePainter"

class "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidBoardValue" {
  +NumberPyramidFillType type
  +int? value
}

"gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidBoardValue" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType"

class "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramid" {
  +List<List<NumberPyramidBoardValue?>> pyramid
  +List<_NumberPyramidSolution>? solutions
  +int rowCount
  +int getRowsCount()
  +int getColumnsCount()
  +int? getValue()
  +bool setValue()
  +NumberPyramidFillType? getFillType()
  +bool validPosition()
  +void solvePyramid()
  -List<List<int?>> _solveableBoard()
  +void removeCalculated()
  +void mergeSolution()
}

class "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::_NumberPyramidSolution" {
  +List<List<int?>> solution
  +int? getValue()
}

class "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType" {
  +int index
  {static} +List<NumberPyramidFillType> values
  {static} +NumberPyramidFillType USER_FILLED
  {static} +NumberPyramidFillType CALCULATED
}

"gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType"
"dart::core::Enum" <|-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType"

class "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidSolver" {
  +NumberPyramidSolverState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidSolver"

class "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidSolverState" {
  -NumberPyramid _currentBoard
  -int _currentSolution
  -int _MAX_SOLUTIONS
  -int _rowCount
  -double _scale
  +void initState()
  +Widget build()
  -void _showSolution()
}

"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidSolverState" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramid"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidSolverState"

class "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoard" {
  +NumberPyramidFillType type
  +void Function(NumberPyramid) onChanged
  +NumberPyramid board
  +NumberPyramidBoardState createState()
}

"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoard" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoard" o-- "null::void Function(NumberPyramid)"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoard" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramid"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoard"

class "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardState" {
  -int? _currentValue
  -TextEditingController _currentInputController
  -GCWIntegerTextInputFormatter _integerInputFormatter
  -FocusNode _currentValueFocusNode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _editWidget()
  -void _setState()
  -void _showInputTextBox()
}

"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardState" o-- "gc_wizard::common_widgets::text_input_formatters::gcw_integer_textinputformatter.dart::GCWIntegerTextInputFormatter"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardState"

class "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" {
  +BuildContext context
  +void Function(Point<int>?, Rect?) showInputTextBox
  +void Function() setState
  +NumberPyramidFillType type
  +NumberPyramid board
  +void paint()
  -TextPainter _buildTextPainter()
  +bool shouldRepaint()
}

"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" o-- "flutter::src::widgets::framework.dart::BuildContext"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" o-- "null::void Function(Point<int>, Rect)"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" o-- "null::void Function()"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramidFillType"
"gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter" o-- "gc_wizard::tools::games::number_pyramid::logic::number_pyramid_solver.dart::NumberPyramid"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::games::number_pyramid::widget::number_pyramid_solver.dart::NumberPyramidBoardPainter"

class "gc_wizard::tools::games::scrabble::logic::scrabble_sets.dart::_LetterAttribute" {
  +int value
  +int frequency
}

class "gc_wizard::tools::games::scrabble::logic::scrabble_sets.dart::ScrabbleSet" {
  +String key
  +String i18nNameId
  +Map<String, _LetterAttribute> letters
  +bool caseSensitive
  +int letterValue()
  +int letterFrequency()
  +bool existLetter()
}

class "gc_wizard::tools::games::scrabble::scrabble::logic::scrabble.dart::_SCRABBLE_MODE" {
  +int index
  {static} +List<_SCRABBLE_MODE> values
  {static} +_SCRABBLE_MODE FREQUENCY
  {static} +_SCRABBLE_MODE LETTER_VALUE
}

"gc_wizard::tools::games::scrabble::scrabble::logic::scrabble.dart::_SCRABBLE_MODE" o-- "gc_wizard::tools::games::scrabble::scrabble::logic::scrabble.dart::_SCRABBLE_MODE"
"dart::core::Enum" <|-- "gc_wizard::tools::games::scrabble::scrabble::logic::scrabble.dart::_SCRABBLE_MODE"

class "gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::Scrabble" {
  +_ScrabbleState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::Scrabble"

class "gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::_ScrabbleState" {
  -TextEditingController _controller
  -String _currentInput
  -List<int> _currentValues
  -String _currentScrabbleVersion
  -GCWSwitchPosition _currentMode
  -bool _currentCrosstotalMode
  -String _output
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
}

"gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::_ScrabbleState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::_ScrabbleState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::scrabble::scrabble::widget::scrabble.dart::_ScrabbleState"

class "gc_wizard::tools::games::scrabble::scrabble_overview::widget::scrabble_overview.dart::ScrabbleOverview" {
  +_ScrabbleOverviewState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::scrabble::scrabble_overview::widget::scrabble_overview.dart::ScrabbleOverview"

class "gc_wizard::tools::games::scrabble::scrabble_overview::widget::scrabble_overview.dart::_ScrabbleOverviewState" {
  -String _currentScrabbleVersion
  +Widget build()
  -Widget _calculateOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::scrabble::scrabble_overview::widget::scrabble_overview.dart::_ScrabbleOverviewState"

class "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoardValue" {
  +SudokuFillType type
  +int? value
}

"gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoardValue" o-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuFillType"

class "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoard" {
  +List<List<SudokuBoardValue?>> board
  +List<_SudokuSolution>? solutions
  +void setValue()
  +int? getValue()
  +SudokuFillType getFillType()
  +void solveSudoku()
  -List<List<int>> _solveableBoard()
  +void removeCalculated()
  +void mergeSolution()
}

class "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::_SudokuSolution" {
  +List<List<int>> solution
  +int? getValue()
}

class "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuFillType" {
  +int index
  {static} +List<SudokuFillType> values
  {static} +SudokuFillType USER_FILLED
  {static} +SudokuFillType CALCULATED
}

"gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuFillType" o-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuFillType"
"dart::core::Enum" <|-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuFillType"

class "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuSolver" {
  +_SudokuSolverState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuSolver"

class "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuSolverState" {
  -SudokuBoard _currentBoard
  -int _currentSolution
  -int _MAX_SOLUTIONS
  +void initState()
  +Widget build()
  -void _showSolution()
}

"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuSolverState" o-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoard"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuSolverState"

class "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoard" {
  +void Function(SudokuBoard) onChanged
  +SudokuBoard board
  +_SudokuBoardState createState()
}

"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoard" o-- "null::void Function(SudokuBoard)"
"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoard" o-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoard"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoard"

class "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoardState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::_SudokuBoardState"

class "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuBoardPainter" {
  +void Function(int, int, int?) setBoxValue
  +SudokuBoard board
  +BuildContext context
  +void paint()
  -void _showInputDialog()
  +bool shouldRepaint()
}

"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuBoardPainter" o-- "null::void Function(int, int, int)"
"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuBoardPainter" o-- "gc_wizard::tools::games::sudoku::logic::sudoku_solver.dart::SudokuBoard"
"gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuBoardPainter" o-- "flutter::src::widgets::framework.dart::BuildContext"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::games::sudoku::sudoku_solver::widget::sudoku_solver.dart::SudokuBoardPainter"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridConfiguration" {
  +_GridType type
  +int width
  +int height
  +String? enumeration
  +String? columnEnumeration
  +String? rowEnumeration
  +_GridEnumerationStart? enumerationStart
  +_GridBoxEnumerationStartDirection? enumerationStartDirection
  +_GridBoxEnumerationBehaviour? enumerationBehaviour
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridConfiguration" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridConfiguration" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridConfiguration" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridConfiguration" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::Grid" {
  +_GridState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::Grid"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" {
  -_GridPaintColor _currentColor
  -String _currentGridConfiguration
  -bool _isConfiguration
  -double _scale
  -_GridType _currentConfigType
  -int _currentConfigColumns
  -int _currentConfigRows
  -String? _currentConfigBoxEnumeration
  -String? _currentConfigColumnEnumeration
  -String? _currentConfigRowEnumeration
  -_GridEnumerationStart _currentConfigBoxEnumerationStart
  -_GridBoxEnumerationStartDirection _currentConfigBoxEnumerationStartDirection
  -_GridBoxEnumerationBehaviour _currentConfigBoxEnumerationBehaviour
  -List<_GridBoxEnumerationStartDirection> _currentConfigBoxEnumerationStartDirections
  -TextEditingController _boxEnumerationController
  -TextEditingController _columnEnumerationController
  -TextEditingController _rowEnumerationController
  +void initState()
  +void dispose()
  -void _initializeDefaultGrid()
  -List<_GridBoxEnumerationStartDirection> _possibleStartDirections()
  +Widget build()
  -Widget _buildConfiguration()
  -Widget _buildBoxEnumerationOptions()
  -Widget _buildGrid()
  -void _clearGrid()
  -List<String> _getEnumeration()
  -Expanded _buildColorField()
  -BoxDecoration _getColorDecoration()
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridState"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" {
  +_GridType type
  +int countRows
  +int countColumns
  +_GridPaintColor tapColor
  +List<String> boxEnumeration
  +List<String> columnEnumeration
  +List<String> rowEnumeration
  +_GridEnumerationStart boxEnumerationStart
  +_GridBoxEnumerationBehaviour boxEnumerationBehaviour
  +_GridBoxEnumerationStartDirection boxEnumerationStartDirection
  +_GridPainterState createState()
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainter"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainterState" {
  -List<String>? _boxEnumeration
  -List<String>? _originalBoxEnumeration
  -List<String>? _fillBoxEnumeration()
  +Widget build()
  -void _removeColor()
  -void _setColor()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPainterState"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter" {
  +BuildContext context
  +_GridType type
  +int countRows
  +int countColumns
  +_GridPaintColor tapColor
  +List<String> boxEnumeration
  +List<String> columnEnumeration
  +List<String> rowEnumeration
  +Map<int, Map<int, _GridPaintColor>> gridState
  +void Function(int, int, int, int, _TapMode) onTapped
  -String? _getEnumeration()
  +void paint()
  -void _drawGridBoard()
  -void _drawPointsBoard()
  -void _drawBoxesBoard()
  -double _strokeWidth()
  -TextPainter _setFontSize()
  +bool shouldRepaint()
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter" o-- "flutter::src::widgets::framework.dart::BuildContext"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor"
"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter" o-- "null::void Function(int, int, int, int, _TapMode)"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_CustomGridPainter"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType" {
  +int index
  {static} +List<_GridType> values
  {static} +_GridType BOXES
  {static} +_GridType LINES
  {static} +_GridType INTERSECTIONS
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridType"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart" {
  +int index
  {static} +List<_GridEnumerationStart> values
  {static} +_GridEnumerationStart TOP_LEFT
  {static} +_GridEnumerationStart TOP_RIGHT
  {static} +_GridEnumerationStart BOTTOM_LEFT
  {static} +_GridEnumerationStart BOTTOM_RIGHT
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridEnumerationStart"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection" {
  +int index
  {static} +List<_GridBoxEnumerationStartDirection> values
  {static} +_GridBoxEnumerationStartDirection UP
  {static} +_GridBoxEnumerationStartDirection DOWN
  {static} +_GridBoxEnumerationStartDirection LEFT
  {static} +_GridBoxEnumerationStartDirection RIGHT
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationStartDirection"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour" {
  +int index
  {static} +List<_GridBoxEnumerationBehaviour> values
  {static} +_GridBoxEnumerationBehaviour ALIGNED
  {static} +_GridBoxEnumerationBehaviour ALTERNATED
  {static} +_GridBoxEnumerationBehaviour SPIRAL
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridBoxEnumerationBehaviour"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor" {
  +int index
  {static} +List<_GridPaintColor> values
  {static} +_GridPaintColor BLACK
  {static} +_GridPaintColor WHITE
  {static} +_GridPaintColor RED
  {static} +_GridPaintColor YELLOW
  {static} +_GridPaintColor BLUE
  {static} +_GridPaintColor GREEN
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_GridPaintColor"

class "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_TapMode" {
  +int index
  {static} +List<_TapMode> values
  {static} +_TapMode SINGLE
  {static} +_TapMode ROW
  {static} +_TapMode COLUMN
  {static} +_TapMode ALL
}

"gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_TapMode" o-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_TapMode"
"dart::core::Enum" <|-- "gc_wizard::tools::general_tools::grid_generator::grid::widget::grid.dart::_TapMode"

class "gc_wizard::tools::images_and_files::animated_image::logic::animated_image.dart::AnimatedImageOutput" {
  +List<Uint8List> images
  +List<int> durations
  +List<int> linkList
  +List<Image>? frames
}

class "gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::AnimatedImage" {
  +GCWFile? file
  +_AnimatedImageState createState()
}

"gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::AnimatedImage" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::AnimatedImage"

class "gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::_AnimatedImageState" {
  -AnimatedImageOutput? _outData
  -GCWFile? _file
  -bool _play
  +Widget build()
  -Widget _buildOutput()
  -Widget _buildDurationOutput()
  -List<GCWImageViewData> _convertImageData()
  -void _analysePlatformFileAsync()
  -dynamic _buildJobData()
  -void _showOutput()
  -dynamic _exportFiles()
}

"gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::_AnimatedImageState" o-- "gc_wizard::tools::images_and_files::animated_image::logic::animated_image.dart::AnimatedImageOutput"
"gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::_AnimatedImageState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::animated_image::widget::animated_image.dart::_AnimatedImageState"

class "gc_wizard::tools::images_and_files::animated_image_morse_code::logic::animated_image_morse_code.dart::AnimatedImageMorseOutput" {
  +List<List<int>> imagesFiltered
}

"gc_wizard::tools::images_and_files::animated_image::logic::animated_image.dart::AnimatedImageOutput" <|-- "gc_wizard::tools::images_and_files::animated_image_morse_code::logic::animated_image_morse_code.dart::AnimatedImageMorseOutput"

class "gc_wizard::tools::images_and_files::animated_image_morse_code::logic::animated_image_morse_code.dart::MorseCodeOutput" {
  +String? morseCode
  +String? text
}

class "gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::AnimatedImageMorseCode" {
  +GCWFile? file
  +_AnimatedImageMorseCodeState createState()
}

"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::AnimatedImageMorseCode" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::AnimatedImageMorseCode"

class "gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" {
  -AnimatedImageMorseOutput? _outData
  -List<bool> _marked
  -MorseCodeOutput? _outText
  -GCWFile? _file
  -GCWSwitchPosition _currentMode
  -bool _play
  -bool _filtered
  -Uint8List? _highImage
  -Uint8List? _lowImage
  -String _currentInput
  -int _currentDotDuration
  -TextEditingController _currentDotDurationController
  -TextEditingController _currentInputController
  -Uint8List? _encodeOutputImage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _decodeWidgets()
  -Widget _buildOutputDecode()
  -Widget _buildDecodeOutput()
  -Widget _encodeWidgets()
  -Widget _buildEncodeSubmitButton()
  -Widget _buildOutputEncode()
  -void _initMarkedList()
  -void _markedListSetColumn()
  -List<GCWImageViewData> _convertImageDataFiltered()
  -List<GCWImageViewData> _convertImageData()
  -void _analysePlatformFileAsync()
  -dynamic _buildJobDataDecode()
  -dynamic _buildJobDataEncode()
  -void _saveOutputDecode()
  -void _saveOutputEncode()
  -dynamic _exportFiles()
  -dynamic _exportFile()
}

"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "gc_wizard::tools::images_and_files::animated_image_morse_code::logic::animated_image_morse_code.dart::AnimatedImageMorseOutput"
"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "gc_wizard::tools::images_and_files::animated_image_morse_code::logic::animated_image_morse_code.dart::MorseCodeOutput"
"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::animated_image_morse_code::widget::animated_image_morse_code.dart::_AnimatedImageMorseCodeState"

class "gc_wizard::tools::images_and_files::binary2image::widget::binary2image.dart::Binary2Image" {
  +_Binary2ImageState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::binary2image::widget::binary2image.dart::Binary2Image"

class "gc_wizard::tools::images_and_files::binary2image::widget::binary2image.dart::_Binary2ImageState" {
  -String _currentInput
  -Uint8List? _outData
  -String? _codeData
  -bool _squareFormat
  -bool _invers
  +Widget build()
  -void _createOutput()
  -Widget _buildOutput()
  -dynamic _exportFile()
}

"gc_wizard::tools::images_and_files::binary2image::widget::binary2image.dart::_Binary2ImageState" o-- "dart::typed_data::Uint8List"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::binary2image::widget::binary2image.dart::_Binary2ImageState"

class "gc_wizard::tools::images_and_files::exif_reader::logic::external_libs::justkawal.xmp::xmp.dart::XMP" {
  {static} +Map<String, Object> extract()
  {static} -void _addAttribute()
  {static} +String camelToNormal()
  {static} -void _addAttributeList()
}

class "gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::ExifReader" {
  +GCWFile? file
  +_ExifReaderState createState()
}

"gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::ExifReader" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::ExifReader"

class "gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState" {
  +Map<String, List<List<dynamic>>>? tableTags
  +GCWFile? file
  +LatLng? point
  +GCWImageViewData? thumbnail
  +Image? image
  -bool _fileLoaded
  +void initState()
  +Widget build()
  -dynamic _readFile()
  -List<Widget> _buildOutput()
  -void _decorateThumbnail()
  -void _decorateGps()
  -void _decorateExifSections()
  -void _decorateFileTypeSpecific()
  -void _decorateFile()
  -void _decorateImage()
  -dynamic _completeImageMetadata()
  +String formatDate()
  -dynamic _decorateHiddenData()
}

"gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState" o-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewData"
"gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState" o-- "image::src::image::image.dart::Image"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::exif_reader::widget::exif_reader.dart::_ExifReaderState"

class "gc_wizard::tools::images_and_files::hexstring2file::widget::hexstring2file.dart::HexString2File" {
  +_HexString2FileState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::hexstring2file::widget::hexstring2file.dart::HexString2File"

class "gc_wizard::tools::images_and_files::hexstring2file::widget::hexstring2file.dart::_HexString2FileState" {
  -String _currentInput
  -Uint8List? _outData
  +Widget build()
  -Widget _buildOutput()
  -dynamic _exportFile()
}

"gc_wizard::tools::images_and_files::hexstring2file::widget::hexstring2file.dart::_HexString2FileState" o-- "dart::typed_data::Uint8List"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::hexstring2file::widget::hexstring2file.dart::_HexString2FileState"

class "gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::HexViewer" {
  +GCWFile? file
  +_HexViewerState createState()
}

"gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::HexViewer" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::HexViewer"

class "gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::_HexViewerState" {
  -ScrollController _scrollControllerHex
  -ScrollController _scrollControllerASCII
  -String? _hexData
  -double? _hexDataLines
  -Uint8List? _bytes
  -int _MAX_LINES
  -int _CHARS_PER_LINE
  -int _currentLines
  -bool _isHexScrolling
  -bool _isASCIIScrolling
  +void initState()
  +void dispose()
  -void _setData()
  +Widget build()
  -void _resetScrollViews()
  -Widget _buildOutput()
}

"gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::_HexViewerState" o-- "flutter::src::widgets::scroll_controller.dart::ScrollController"
"gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::_HexViewerState" o-- "dart::typed_data::Uint8List"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::hex_viewer::widget::hex_viewer.dart::_HexViewerState"

class "gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::HiddenData" {
  +GCWFile? file
  +_HiddenDataState createState()
}

"gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::HiddenData" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::HiddenData"

class "gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::_HiddenDataState" {
  -TextEditingController _hideController
  -GCWFile? _unHideFile
  -GCWFile? _publicFile
  -GCWFile? _secretFile
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentHideMode
  -String _currentHideInput
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildHideWidget()
  -Widget _buildUnhideWidget()
  -Widget _buildOutput()
  -dynamic _exportFile()
}

"gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::_HiddenDataState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::_HiddenDataState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::_HiddenDataState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::hidden_data::widget::hidden_data.dart::_HiddenDataState"

class "gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::ImageColorCorrections" {
  +GCWFile? file
  +_ImageColorCorrectionsState createState()
}

"gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::ImageColorCorrections" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::ImageColorCorrections"

class "gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_ImageColorCorrectionsState" {
  -GCWFile? _originalData
  -Uint8List? _convertedOutputImage
  -Image? _originalImage
  -Image? _currentPreview
  -Image? _originalPreview
  -double _currentSaturation
  -double _currentContrast
  -double _currentBrightness
  -double _currentExposure
  -double _currentGamma
  -double _currentHue
  -double _currentRed
  -double _currentGreen
  -double _currentBlue
  -bool _currentInvert
  -bool _currentGrayscale
  -double _currentEdgeDetection
  +Map<int, Map<String, String>> PREVIEW_VALUES
  -Image? _currentDataInit()
  +void initState()
  -void _resetInputs()
  -bool _validateData()
  +Widget build()
  -dynamic _adjustToFullPicture()
  -dynamic _buildJobDataAdjustColor()
  -void _saveOutputAdjustColor()
  -Image _adjustColor()
  -Uint8List? _imageBytes()
}

"gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_ImageColorCorrectionsState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_ImageColorCorrectionsState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_ImageColorCorrectionsState" o-- "image::src::image::image.dart::Image"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_ImageColorCorrectionsState"

class "gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_AdjustColorInput" {
  +Image image
  +bool invert
  +bool grayscale
  +double edgeDetection
  +double red
  +double green
  +double blue
  +double saturation
  +double contrast
  +double gamma
  +double exposure
  +double hue
  +double brightness
}

"gc_wizard::tools::images_and_files::image_colorcorrections::widget::image_colorcorrections.dart::_AdjustColorInput" o-- "image::src::image::image.dart::Image"

class "gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::ImageFlipRotate" {
  +GCWFile? file
  +_ImageFlipRotateState createState()
}

"gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::ImageFlipRotate" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::ImageFlipRotate"

class "gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_ImageFlipRotateState" {
  -GCWFile? _originalData
  -Image? _currentImage
  -bool _currentFlipHorizontally
  -bool _currentFlipVertically
  -int _currentRotate
  +void initState()
  -void _resetInputs()
  -bool _validateData()
  +Widget build()
  -Image? _flipRotate()
  -Uint8List? _imageBytes()
}

"gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_ImageFlipRotateState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_ImageFlipRotateState" o-- "image::src::image::image.dart::Image"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_ImageFlipRotateState"

class "gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_FlipRotateInput" {
  +Image? image
  +bool flipHorizontally
  +bool flipVertically
  +double rotate
}

"gc_wizard::tools::images_and_files::image_flip_rotate::widget::image_flip_rotate.dart::_FlipRotateInput" o-- "image::src::image::image.dart::Image"

class "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::TextureType" {
  +int index
  {static} +List<TextureType> values
  {static} +TextureType GREYDOTS
  {static} +TextureType COLORDOTS
  {static} +TextureType BITMAP
}

"gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::TextureType" o-- "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::TextureType"
"dart::core::Enum" <|-- "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::TextureType"

class "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::MagicEyeErrorCode" {
  +int index
  {static} +List<MagicEyeErrorCode> values
  {static} +MagicEyeErrorCode OK
  {static} +MagicEyeErrorCode IMAGE_TOO_SMALL
}

"gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::MagicEyeErrorCode" o-- "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::MagicEyeErrorCode"
"dart::core::Enum" <|-- "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::MagicEyeErrorCode"

class "gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::MagicEyeSolver" {
  +_MagicEyeSolverState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::MagicEyeSolver"

class "gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" {
  -GCWSwitchPosition _currentMode
  -GCWFile? _decodeImage
  -Image? _decodeImageData
  -Uint8List? _decodeOutData
  -int? _displacement
  -GCWFile? _encodeHiddenDataImage
  -GCWFile? _encodeTextureImage
  -Uint8List? _encodeOutData
  -TextureType _currentEncodeTextureType
  +Widget build()
  -Widget _decodeWidgets()
  -Widget _buildOutputDecode()
  -GCWAsyncExecuterParameters _buildJobDataDecode()
  -void _saveOutputDecode()
  -Widget _encodeWidgets()
  -Widget _buildEncodeTextureSelection()
  -Widget _buildOutputEncode()
  -dynamic _buildJobDataEncode()
  -void _saveOutputEncode()
  -void _generateEncodeImage()
}

"gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" o-- "image::src::image::image.dart::Image"
"gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState" o-- "gc_wizard::tools::images_and_files::magic_eye_solver::logic::magic_eye_solver.dart::TextureType"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::magic_eye_solver::widget::magic_eye_solver.dart::_MagicEyeSolverState"

class "gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::QrCode" {
  +GCWFile? file
  +_QrCodeState createState()
}

"gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::QrCode" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::QrCode"

class "gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::_QrCodeState" {
  -String _currentInput
  -int _currentModulSize
  -Uint8List? _outData
  -Uint8List? _outDataEncrypt
  -String? _outDataDecrypt
  -TextEditingController _inputController
  -GCWSwitchPosition _currentMode
  {static} +int maxLength
  +int lastCurrentInputLength
  +void initState()
  +void dispose()
  +Widget build()
  -Object? _buildOutput()
  -void _updateOutput()
  -dynamic _exportFile()
}

"gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::_QrCodeState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::_QrCodeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::_QrCodeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::qr_code::widget::qr_code.dart::_QrCodeState"

class "gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoBaseRequest" {
  +Uint8List imageData
  +String? key
  +bool canEncrypt()
}

"gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoBaseRequest" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoDecodeRequest" {
}

"gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoBaseRequest" <|-- "gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoDecodeRequest"

class "gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoEncodeRequest" {
  +String message
  +String? filename
}

"gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoBaseRequest" <|-- "gc_wizard::tools::images_and_files::stegano::logic::stegano.dart::_SteganoEncodeRequest"

class "gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::Stegano" {
  +GCWFile? file
  +_SteganoState createState()
}

"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::Stegano" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::Stegano"

class "gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" {
  -GCWFile? _file
  -Uint8List? _bytesSource
  -String _currentInput
  -String _currentKey
  -String? _filenameTarget
  -String _extensionTarget
  -String? _decodedText
  -String? _decodingErrorText
  -String? _encodingErrorText
  -String? _error2Text
  -GCWImageViewData? _encodedPictureData
  -bool _encoding
  -TextEditingController _inputController
  -TextEditingController _keyController
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
  -void _calculateOutputDecoding()
  -void _calculateOutputEncoding()
  +bool isEncode()
  -List<Widget> _buildOutput()
  -List<Widget> _buildOutputEncode()
  -List<Widget> _buildOutputDecode()
  -List<Widget> _buildImageSource()
  +List<Widget> loading()
}

"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" o-- "gc_wizard::common_widgets::image_viewers::gcw_imageview.dart::GCWImageViewData"
"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::stegano::widget::stegano.dart::_SteganoState"

class "gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::VisualCryptography" {
  +_VisualCryptographyState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::VisualCryptography"

class "gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState" {
  -GCWSwitchPosition _currentMode
  -GCWFile? _decodeImage1
  -GCWFile? _decodeImage2
  -Uint8List? _outData
  -GCWFile? _encodeImage
  -GCWFile? _encodeKeyImage
  -int _encodeScale
  -String? _encodeImageSize
  -int _decodeOffsetsX
  -int _decodeOffsetsY
  -int _encodeOffsetsX
  -int _encodeOffsetsY
  -Tuple2<Uint8List, Uint8List?>? _encodeOutputImages
  -int? _currentImageWidth
  -int? _currentImageHeight
  -bool _currentEncryptionWithKeyMode
  -GCWSwitchPosition _currentEncryptionAdvancedMode
  +Widget build()
  -Widget _decodeWidgets()
  -Widget _buildOutputDecode()
  -Widget _encodeWidgets()
  -void __encodeImageSize()
  -void _updateEncodeImageSize()
  -Widget _buildOutputEncode()
  -Widget _buildDecodeSubmitButton()
  -dynamic _buildJobDataDecode()
  -void _saveOutputDecode()
  -Widget _buildEncodeSubmitButton()
  -dynamic _buildJobDataEncode()
  -void _saveOutputEncode()
}

"gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState" o-- "tuple::tuple.dart::Tuple2<Uint8List, Uint8List>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::images_and_files::visual_cryptography::widget::visual_cryptography.dart::_VisualCryptographyState"

class "gc_wizard::tools::images_and_files::_common::logic::rgb_pixel.dart::RGBPixel" {
  +double red
  +double green
  +double blue
  +String toString()
  {static} +RGBPixel getPixel()
  +void setPixel()
}

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardSCriptInterpreter" {
  {static} +int MAXITERATIONS
  {static} +double PROGRESS_STEP
  {static} +int FORLOOP
  {static} +int WHILELOOP
  {static} +int REPEATLOOP
  {static} +int SWITCHSTATEMENT
  {static} +int NONE
  {static} +int DELIMITER
  {static} +int VARIABLE
  {static} +int NUMBER
  {static} +int COMMAND
  {static} +int QUOTEDSTR
  {static} +int FUNCTION
  {static} +int UNKNOWNCOMMAND
  {static} +int PRINT
  {static} +int INPUT
  {static} +int IF
  {static} +int THEN
  {static} +int FOR
  {static} +int NEXT
  {static} +int TO
  {static} +int GOTO
  {static} +int GOSUB
  {static} +int RETURN
  {static} +int END
  {static} +int EOL
  {static} +int REPEAT
  {static} +int UNTIL
  {static} +int CLS
  {static} +int SLEEP
  {static} +int RANDOMIZE
  {static} +int RND
  {static} +int WHILE
  {static} +int WEND
  {static} +int STEP
  {static} +int REM
  {static} +int DATA
  {static} +int READ
  {static} +int RESTORE
  {static} +int SCREEN
  {static} +int ELSE
  {static} +int ELSEIF
  {static} +int ENDIF
  {static} +int SWITCH
  {static} +int CASE
  {static} +int DEFAULT
  {static} +int ENDSWITCH
  {static} +int BREAK
  {static} +int CONTINUE
  {static} +int DIM
  {static} +int NEWFILE
  {static} +int OPENFILE
  {static} +int SAVEFILE
  {static} +int VERSION
  {static} +String EOP
  {static} +String LF
  {static} +String CR
  {static} +String LE
  {static} +String GE
  {static} +String NE
  {static} +String AND
  {static} +String OR
  {static} +Map<String, int> registeredKeywordsControls
  {static} +Map<String, int> registeredKeywordsCommands
  +Map<String, int> registeredKeywords
  {static} +Map<int, Map<String, Object?>> SCREEN_MODES
  +ScriptState state
  +GCWizardScriptBreakType BreakType
  +SendPort? sendAsyncPort
  {static} +List<String> relationOperators
  +GCWizardScriptOutput run()
  +GCWizardScriptOutput scriptInterpreter()
  -List<List<String>> _variableDump()
  +void getDATA()
  +void getLabels()
  +void findEOL()
  +void executeAssignment()
  +void executeCommand()
  +void executeCommandVERSION()
  +void executeCommandNEWFILE()
  +void executeCommandOPENFILE()
  +void executeCommandSAVEFILE()
  +void executeCommandREM()
  +void executeCommandDATA()
  +void executeCommandREAD()
  +void executeCommandRESTORE()
  +void executeCommandCLS()
  +void executeCommandBEEP()
  +void executeCommandSLEEP()
  +void executeCommandRANDOMIZE()
  +void executeCommandDIM()
  +void executeCommandPRINT()
  +void executeCommandGOTO()
  +void executeCommandIF()
  +void executeCommandELSEIF()
  +void executeCommandTHEN()
  +void findCorrespondingELSE()
  +void findCorrespondingENDIF()
  +void executeCommandELSE()
  +void executeCommandENDIF()
  +void executeCommandSWITCH()
  +void executeCommandCASE()
  +void findNextCASE()
  +void executeCommandDEFAULT()
  +void findCorrespondingENDSWITCH()
  +void exitSwitchStatement()
  +void executeCommandENDSWITCH()
  +void executeCommandFOR()
  +void exitLoopNEXT()
  +void findCorrespondingNEXT()
  +void executeCommandNEXT()
  +void executeCommandREPEAT()
  +void exitLoopUNTIL()
  +void findCorrespondingUNTIL()
  +void executeCommandUNTIL()
  +void executeCommandWHILE()
  +void exitLoopWEND()
  +void findCorrespondingWEND()
  +void executeCommandWEND()
  +void executeCommandINPUT()
  +void executeCommandGOSUB()
  +void executeCommandRETURN()
  +void executeCommandSCREEN()
  +void executeCommandBREAK()
  +void executeCommandCONTINUE()
  +Object? executeFunction()
  +Object? evaluateExpression()
  +Object? evaluateExpressionRelationalOperation()
  +Object? evaluateExpressionAddSubOperators()
  +Object? evaluateExpressionMultDivOperators()
  +Object? evaluateExpressionExponentOperator()
  +Object? evaluateExpressionBitwiseOperators()
  +Object? evaluateExpressionUnaryFunctionOperator()
  +Object? evaluateExpressionParantheses()
  +Object? getValueOfAtomExpression()
  +Object? getValueOfVariable()
  +void putBack()
  +bool isTokenAFunction()
  +void getToken()
  +bool isDelimiter()
  +bool isSpaceOrTab()
  +bool isRelationalOperator()
  +int lookUpToken()
  +bool isNotAVariable()
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardSCriptInterpreter" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardSCriptInterpreter" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardSCriptInterpreter" o-- "dart::isolate::SendPort"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::InterpreterJobData" {
  +String jobDataScript
  +String jobDataInput
  +LatLng jobDataCoords
  +ScriptState? continueState
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::InterpreterJobData" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::InterpreterJobData" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptOutput" {
  +String STDOUT
  +GraphicState Graphic
  +List<GCWMapPoint> Points
  +String ErrorMessage
  +int ErrorPosition
  +List<List<String>> VariableDump
  +GCWizardScriptBreakType BreakType
  +ScriptState? continueState
  +List<int> FILE
  +bool fileSaved
  +double randomNumber
  {static} +GCWizardScriptOutput empty()
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptOutput" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GraphicState"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptOutput" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptOutput" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GraphicState" {
  +List<String> graphics
  +GCWizardSCript_SCREENMODE GCWizardScriptScreenMode
  +int GCWizardSCriptScreenWidth
  +int GCWizardSCriptScreenHeight
  +int GCWizardSCriptScreenColors
  +bool graphic
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GraphicState" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardSCript_SCREENMODE"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardScriptClassFunctionDefinition" {
  +Function functionName
  +int functionParamCount
  +bool functionReturn
}

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardScriptClassLabelStack" {
  -Map<String, int> _contents
  +int push()
  +int? get()
  +String toString()
  +void clear()
}

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardScriptClassForLoopInfo" {
  +String loopVariable
  +num targetValue
  +bool descending
  +num stepValue
  +int loopStart
}

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" {
  +String script
  +String inputData
  +GCWizardScriptBreakType BreakType
  +Map<String, Object?> variables
  +GraphicState graficOutput
  +List<GCWMapPoint> waypoints
  +int scriptIndex
  +List<Object?> STDIN
  +String STDOUT
  +num step
  +String token
  +int tokenType
  +int keywordToken
  +bool executeElse
  +List<Object?> listDATA
  +int pointerDATA
  +String quotestr
  +bool continueLoop
  +List<int> FILE
  +int FILEINDEX
  +bool fileSaved
  +double randomNumber
  +_GCWizardScriptClassLabelStack labelTable
  +Stack<_GCWizardScriptClassForLoopInfo> forStack
  +Stack<int> gosubStack
  +Stack<int> repeatStack
  +Stack<int> whileStack
  +Stack<String> switchStack
  +Stack<bool> ifStack
  +Stack<int> controlStack
  +bool halt
  +String errorMessage
  +int errorPosition
  +double GCWizardScript_LAT
  +double GCWizardScript_LON
  +List<String> graphics
  +void addInput()
  +void addFile()
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GraphicState"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWizardScriptClassLabelStack"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "stack::stack.dart::Stack<_GCWizardScriptClassForLoopInfo>"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "stack::stack.dart::Stack<int>"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "stack::stack.dart::Stack<String>"
"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::ScriptState" o-- "stack::stack.dart::Stack<bool>"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptFileType" {
  +int index
  {static} +List<GCWizardScriptFileType> values
  {static} +GCWizardScriptFileType PROGRAM
  {static} +GCWizardScriptFileType OUTPUT
  {static} +GCWizardScriptFileType IMAGE
  {static} +GCWizardScriptFileType WAYPOINT
  {static} +GCWizardScriptFileType FILE
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptFileType" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptFileType"
"dart::core::Enum" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptFileType"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardSCript_SCREENMODE" {
  +int index
  {static} +List<GCWizardSCript_SCREENMODE> values
  {static} +GCWizardSCript_SCREENMODE TEXT
  {static} +GCWizardSCript_SCREENMODE GRAPHIC
  {static} +GCWizardSCript_SCREENMODE TEXTGRAPHIC
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardSCript_SCREENMODE" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardSCript_SCREENMODE"
"dart::core::Enum" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardSCript_SCREENMODE"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType" {
  +int index
  {static} +List<GCWizardScriptBreakType> values
  {static} +GCWizardScriptBreakType INPUT
  {static} +GCWizardScriptBreakType PRINT
  {static} +GCWizardScriptBreakType OPENFILE
  {static} +GCWizardScriptBreakType SAVEFILE
  {static} +GCWizardScriptBreakType NULL
}

"gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType"
"dart::core::Enum" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptBreakType"

class "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::_GCWList" {
  -List<Object> _contents
  +int length()
  +void add()
  +void addall()
  +void clear()
  +void shuffle()
  +void sort()
  +void insert()
  +void remove()
  +void reverse()
  +String toString()
  +Object getIndex()
  +List<Object> getContent()
}

class "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScript" {
  +GCWizardScriptState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScript"

class "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState" {
  -TextEditingController _programController
  -TextEditingController _outputController
  -String _currentProgram
  -String _currentInput
  -GCWizardScriptOutput _currentOutput
  -Uint8List _outGraphicData
  -bool _loadFile
  -bool _loadCoords
  -BaseCoordinate _currentCoords
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -Widget _buildOutputText()
  -Widget _builOutputGraphics()
  -Widget _buildOutputWaypoints()
  -Widget _buildOutputMemoryDump()
  -Widget _buildOutputErrorText()
  -dynamic _buildInterpreterJobData()
  -void _showInterpreterOutput()
  -void _interpretGCWScriptAsync()
  -String _printFaultyLine()
  -String _printFaultyProgram()
  -void _showDialogBoxInput()
  -void _exportFile()
  -void _openFile()
  -dynamic _exportCoordinates()
  -void _openHelpWidget()
  -void _openInMap()
  -String _buildWayPointList()
  -dynamic _createImage()
  -Map<String, TextStyle> _buildHiglightMap()
}

"gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState" o-- "gc_wizard::tools::miscellaneous::gcwizardscript::logic::gcwizard_script.dart::GCWizardScriptOutput"
"gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script.dart::GCWizardScriptState"

class "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script_help.dart::GCWizardScriptHelp" {
  +_GCWizardScriptHelpState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script_help.dart::GCWizardScriptHelp"

class "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script_help.dart::_GCWizardScriptHelpState" {
  +void initState()
  -Container _buildUrl()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::miscellaneous::gcwizardscript::widget::gcwizard_script_help.dart::_GCWizardScriptHelpState"

class "gc_wizard::tools::science_and_technology::alcohol_mass::logic::alcohol_mass.dart::BloodAlcoholGender" {
  +int index
  {static} +List<BloodAlcoholGender> values
  {static} +BloodAlcoholGender MEN
  {static} +BloodAlcoholGender WOMEN
  {static} +BloodAlcoholGender CHILDREN
}

"gc_wizard::tools::science_and_technology::alcohol_mass::logic::alcohol_mass.dart::BloodAlcoholGender" o-- "gc_wizard::tools::science_and_technology::alcohol_mass::logic::alcohol_mass.dart::BloodAlcoholGender"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::alcohol_mass::logic::alcohol_mass.dart::BloodAlcoholGender"

class "gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::AlcoholMass" {
  +_AlcoholMassState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::AlcoholMass"

class "gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::_AlcoholMassState" {
  {static} -List<String> _MODES
  -String _currentMode
  -double _currentVolume
  -double _currentPercent
  -double _currentAlcoholMass
  -Mass _currentOutputMass
  -Volume _currentOutputVolume
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::_AlcoholMassState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::mass.dart::Mass"
"gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::_AlcoholMassState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::volume.dart::Volume"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::alcohol_mass::widget::alcohol_mass.dart::_AlcoholMassState"

class "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::logic::heat_index.dart::HEATINDEX_HEATSTRESS_CONDITION" {
  +int index
  {static} +List<HEATINDEX_HEATSTRESS_CONDITION> values
  {static} +HEATINDEX_HEATSTRESS_CONDITION LIGHT_YELLOW
  {static} +HEATINDEX_HEATSTRESS_CONDITION YELLOW
  {static} +HEATINDEX_HEATSTRESS_CONDITION ORANGE
  {static} +HEATINDEX_HEATSTRESS_CONDITION RED
}

"gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::logic::heat_index.dart::HEATINDEX_HEATSTRESS_CONDITION" o-- "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::logic::heat_index.dart::HEATINDEX_HEATSTRESS_CONDITION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::logic::heat_index.dart::HEATINDEX_HEATSTRESS_CONDITION"

class "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::widget::heat_index.dart::HeatIndex" {
  +_HeatIndexState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::widget::heat_index.dart::HeatIndex"

class "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::widget::heat_index.dart::_HeatIndexState" {
  -double _currentTemperature
  -double _currentHumidity
  -Unit _currentOutputUnit
  +Widget build()
  -Widget _buildOutput()
  -String _calculateHintHeatIndex()
  -Color _colorHeatIndex()
}

"gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::widget::heat_index.dart::_HeatIndexState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::heat_index::widget::heat_index.dart::_HeatIndexState"

class "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::logic::humidex.dart::HUMIDEX_HEATSTRESS_CONDITION" {
  +int index
  {static} +List<HUMIDEX_HEATSTRESS_CONDITION> values
  {static} +HUMIDEX_HEATSTRESS_CONDITION LIGHT_BLUE
  {static} +HUMIDEX_HEATSTRESS_CONDITION GREEN
  {static} +HUMIDEX_HEATSTRESS_CONDITION YELLOW
  {static} +HUMIDEX_HEATSTRESS_CONDITION ORANGE
  {static} +HUMIDEX_HEATSTRESS_CONDITION RED
}

"gc_wizard::tools::science_and_technology::apparent_temperature::humidex::logic::humidex.dart::HUMIDEX_HEATSTRESS_CONDITION" o-- "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::logic::humidex.dart::HUMIDEX_HEATSTRESS_CONDITION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::logic::humidex.dart::HUMIDEX_HEATSTRESS_CONDITION"

class "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::widget::humidex.dart::Humidex" {
  +_HumidexState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::widget::humidex.dart::Humidex"

class "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::widget::humidex.dart::_HumidexState" {
  -double _currentTemperature
  -double _currentHumidity
  -Unit _currentOutputUnit
  +Widget build()
  -Widget _buildOutput()
  -String _calculateHintHumidex()
  -Color _colorHumidex()
}

"gc_wizard::tools::science_and_technology::apparent_temperature::humidex::widget::humidex.dart::_HumidexState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::humidex::widget::humidex.dart::_HumidexState"

class "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::logic::summer_simmer.dart::SUMMERSIMMER_HEATSTRESS_CONDITION" {
  +int index
  {static} +List<SUMMERSIMMER_HEATSTRESS_CONDITION> values
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION BLUE
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION LIGHT_BLUE
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION WHITE
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION LIGHT_YELLOW
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION YELLOW
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION ORANGE
  {static} +SUMMERSIMMER_HEATSTRESS_CONDITION RED
}

"gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::logic::summer_simmer.dart::SUMMERSIMMER_HEATSTRESS_CONDITION" o-- "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::logic::summer_simmer.dart::SUMMERSIMMER_HEATSTRESS_CONDITION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::logic::summer_simmer.dart::SUMMERSIMMER_HEATSTRESS_CONDITION"

class "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::widget::summer_simmer.dart::SummerSimmerIndex" {
  +_SummerSimmerIndexState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::widget::summer_simmer.dart::SummerSimmerIndex"

class "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::widget::summer_simmer.dart::_SummerSimmerIndexState" {
  -double _currentTemperature
  -double _currentHumidity
  -Unit _currentOutputUnit
  +Widget build()
  -Widget _buildOutput()
  -String _calculateHintSummerSimmer()
  -Color _colorSummerSimmer()
}

"gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::widget::summer_simmer.dart::_SummerSimmerIndexState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::summer_simmer::widget::summer_simmer.dart::_SummerSimmerIndexState"

class "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::logic::wet_bulb_temperature.dart::WBT_HEATSTRESS_CONDITION" {
  +int index
  {static} +List<WBT_HEATSTRESS_CONDITION> values
  {static} +WBT_HEATSTRESS_CONDITION BLACK
  {static} +WBT_HEATSTRESS_CONDITION PURPLE
  {static} +WBT_HEATSTRESS_CONDITION BLUE
  {static} +WBT_HEATSTRESS_CONDITION LIGHT_BLUE
  {static} +WBT_HEATSTRESS_CONDITION GREEN
  {static} +WBT_HEATSTRESS_CONDITION ORANGE
  {static} +WBT_HEATSTRESS_CONDITION RED
  {static} +WBT_HEATSTRESS_CONDITION DARK_RED
}

"gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::logic::wet_bulb_temperature.dart::WBT_HEATSTRESS_CONDITION" o-- "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::logic::wet_bulb_temperature.dart::WBT_HEATSTRESS_CONDITION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::logic::wet_bulb_temperature.dart::WBT_HEATSTRESS_CONDITION"

class "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::widget::wet_bulb_temperature.dart::WetBulbTemperature" {
  +_WetBulbTemperatureState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::widget::wet_bulb_temperature.dart::WetBulbTemperature"

class "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::widget::wet_bulb_temperature.dart::_WetBulbTemperatureState" {
  -double _currentTemperature
  -double _currentHumidity
  -Unit _currentOutputUnit
  +Widget build()
  -Widget _buildOutput()
  -String _calculateHintWBT()
  -Color _colorWBT()
}

"gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::widget::wet_bulb_temperature.dart::_WetBulbTemperatureState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::wet_bulb_temperature::widget::wet_bulb_temperature.dart::_WetBulbTemperatureState"

class "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::logic::windchill.dart::WINDCHILL_HEATSTRESS_CONDITION" {
  +int index
  {static} +List<WINDCHILL_HEATSTRESS_CONDITION> values
  {static} +WINDCHILL_HEATSTRESS_CONDITION DARK_BLUE
  {static} +WINDCHILL_HEATSTRESS_CONDITION BLUE
  {static} +WINDCHILL_HEATSTRESS_CONDITION LIGHT_BLUE
  {static} +WINDCHILL_HEATSTRESS_CONDITION WHITE
}

"gc_wizard::tools::science_and_technology::apparent_temperature::windchill::logic::windchill.dart::WINDCHILL_HEATSTRESS_CONDITION" o-- "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::logic::windchill.dart::WINDCHILL_HEATSTRESS_CONDITION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::logic::windchill.dart::WINDCHILL_HEATSTRESS_CONDITION"

class "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::widget::windchill.dart::Windchill" {
  +_WindchillState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::widget::windchill.dart::Windchill"

class "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::widget::windchill.dart::_WindchillState" {
  -double _currentTemperature
  -double _currentWindSpeed
  -Unit _currentOutputUnit
  +Widget build()
  -Widget _buildOutput()
  -String _calculateHintWindchill()
  -Color? _colorWindchill()
}

"gc_wizard::tools::science_and_technology::apparent_temperature::windchill::widget::windchill.dart::_WindchillState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::apparent_temperature::windchill::widget::windchill.dart::_WindchillState"

class "gc_wizard::tools::science_and_technology::astronomy::easter::easter_date::widget::easter_date.dart::EasterDate" {
  +_EasterDateState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::easter::easter_date::widget::easter_date.dart::EasterDate"

class "gc_wizard::tools::science_and_technology::astronomy::easter::easter_date::widget::easter_date.dart::_EasterDateState" {
  -int _currentYear
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::easter::easter_date::widget::easter_date.dart::_EasterDateState"

class "gc_wizard::tools::science_and_technology::astronomy::easter::easter_years::widget::easter_years.dart::EasterYears" {
  +_EasterYearsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::easter::easter_years::widget::easter_years.dart::EasterYears"

class "gc_wizard::tools::science_and_technology::astronomy::easter::easter_years::widget::easter_years.dart::_EasterYearsState" {
  -int _currentMonth
  -int _currentDay
  {static} -List<int> _listDaysForMarch
  -List<int> _listDaysForApril
  -List<int> _currentDayList
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::easter::easter_years::widget::easter_years.dart::_EasterYearsState"

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::Constellation" {
  +String ConstellationName
  +String IAU
  +String NASA
  +String Star
  +String name
  +String position
  +double area
  +String visibility
  +double magnitudo
}

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::IAU_CONSTELLATION_SORT" {
  +int index
  {static} +List<IAU_CONSTELLATION_SORT> values
  {static} +IAU_CONSTELLATION_SORT CONSTELLATION
  {static} +IAU_CONSTELLATION_SORT NAME
  {static} +IAU_CONSTELLATION_SORT STAR
  {static} +IAU_CONSTELLATION_SORT AREA
  {static} +IAU_CONSTELLATION_SORT VISIBILIY
  {static} +IAU_CONSTELLATION_SORT MAGNITUDO
}

"gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::IAU_CONSTELLATION_SORT" o-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::IAU_CONSTELLATION_SORT"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::IAU_CONSTELLATION_SORT"

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellations" {
  +IAUAllConstellationsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellations"

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellationsState" {
  -IAU_CONSTELLATION_SORT _currentSortCategory
  -GCWSwitchPosition _currentSortingOrder
  +void initState()
  +Widget build()
  -List<List<Object>> _buildValueOutputs()
  -List<Object> _buildHeader()
  -Widget _buildOutput()
  -void _showConstellation()
}

"gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellationsState" o-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::logic::iau_constellation.dart::IAU_CONSTELLATION_SORT"
"gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellationsState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_all_constellations.dart::IAUAllConstellationsState"

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_single_constellations.dart::IAUSingleConstellation" {
  +String ConstellationName
  +IAUSingleConstellationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_single_constellations.dart::IAUSingleConstellation"

class "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_single_constellations.dart::IAUSingleConstellationState" {
  -String _ASSET_PATH
  -List<Map<String, SymbolData>> _images
  +void initState()
  -dynamic _initializeImage()
  -dynamic _initalizeImages()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::iau_constellation::widget::iau_single_constellations.dart::IAUSingleConstellationState"

class "gc_wizard::tools::science_and_technology::astronomy::moon_position::logic::moon_position.dart::MoonPosition" {
  +double LUNATION
  +double distanceToEarthCenter
  +double distanceToObserver
  +double eclipticLongitude
  +double eclipticLatitude
  +double rightAscension
  +double declination
  +double azimuth
  +double altitude
  +double diameter
  +int phaseNumber
  +MoonPhase phaseName
  +double age
  +AstrologicalSign astrologicalSign
  +double illumination
  +double greenwichSiderealTime
  +double localSiderealTime
}

"gc_wizard::tools::science_and_technology::astronomy::moon_position::logic::moon_position.dart::MoonPosition" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase"
"gc_wizard::tools::science_and_technology::astronomy::moon_position::logic::moon_position.dart::MoonPosition" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign"

class "gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::MoonPosition" {
  +_MoonPositionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::MoonPosition"

class "gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::_MoonPositionState" {
  -DateTimeTimezone _currentDateTime
  -BaseCoordinate _currentCoords
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::_MoonPositionState" o-- "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone"
"gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::_MoonPositionState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::moon_position::widget::moon_position.dart::_MoonPositionState"

class "gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::logic::moon_rise_set.dart::MoonRiseSet" {
  +double rise
  +double transit
  +double set
}

class "gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::MoonRiseSet" {
  +_MoonRiseSetState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::MoonRiseSet"

class "gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::_MoonRiseSetState" {
  -DateTimeTimezone _currentDateTime
  -BaseCoordinate _currentCoords
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::_MoonRiseSetState" o-- "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone"
"gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::_MoonRiseSetState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::moon_rise_set::widget::moon_rise_set.dart::_MoonRiseSetState"

class "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::logic::right_ascension_to_degree.dart::RightAscension" {
  +int sign
  +int hours
  +int minutes
  +double seconds
  +int milliseconds
  {static} +RightAscension? fromDuration()
  +Duration toDuration()
  {static} +RightAscension? parse()
  +String toString()
}

class "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::logic::right_ascension_to_degree.dart::RaDeg" {
  +double degrees
  {static} -String _PATTERN_RADEG
  {static} +RaDeg fromDMM()
  {static} +RaDeg fromDMS()
  {static} +RaDeg fromDEC()
  {static} +RaDeg? parse()
  +String toString()
}

class "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::RightAscensionToDegree" {
  +_RightAscensionToDegreeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::RightAscensionToDegree"

class "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" {
  -FocusNode _decMilliDegreesFocusNode
  -TextEditingController _hoursController
  -TextEditingController _minutesController
  -TextEditingController _secondsController
  -TextEditingController _mSecondsController
  -TextEditingController _decDegreesController
  -TextEditingController _decMilliDegreesController
  -RaDeg _currentRaDeg
  -RightAscension _currentRightAscension
  -CoordinateFormatKey _currentDecryptFormat
  -int _currentDecSign
  -String _currentDecDegrees
  -String _currentDecMilliDegrees
  -TextEditingController _DmmDegreesController
  -TextEditingController _DmmMinutesController
  -TextEditingController _DmmMilliMinutesController
  -int _currentDmmSign
  -String _currentDmmDegrees
  -String _currentDmmMinutes
  -String _currentDmmMilliMinutes
  -FocusNode _dmmMinutesFocusNode
  -FocusNode _dmmMilliMinutesFocusNode
  -TextEditingController _DmsDegreesController
  -TextEditingController _DmsMinutesController
  -TextEditingController _DmsSecondsController
  -TextEditingController _DmsMilliSecondsController
  -int _currentDmsSign
  -String _currentDmsDegrees
  -String _currentDmsMinutes
  -String _currentDmsSeconds
  -String _currentDmsMilliSeconds
  -FocusNode _dmsMinutesFocusNode
  -FocusNode _dmsSecondsFocusNode
  -FocusNode _dmsMilliSecondsFocusNode
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildDecryptWidget()
  -Widget _buildHmsWidget()
  -Widget _buildDmmPartRow()
  -Widget _buildDmsPartRow()
  -void _setDmsRightAscension()
  -void _setDmmDegrees()
  -void _setDecRightAscension()
  -Widget _buildDecPartRow()
  -Widget _buildOutput()
  -void _parseRAPaste()
}

"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::logic::right_ascension_to_degree.dart::RaDeg"
"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::logic::right_ascension_to_degree.dart::RightAscension"
"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "gc_wizard::tools::coords::_common::logic::coordinate_format_constants.dart::CoordinateFormatKey"
"gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::right_ascension_to_degree::widget::right_ascension_to_degree.dart::_RightAscensionToDegreeState"

class "gc_wizard::tools::science_and_technology::astronomy::seasons::logic::seasons.dart::_computeSeasons" {
  +DateTime spring
  +DateTime summer
  +DateTime autumn
  +DateTime winter
}

class "gc_wizard::tools::science_and_technology::astronomy::seasons::widget::seasons.dart::Seasons" {
  +_SeasonsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::seasons::widget::seasons.dart::Seasons"

class "gc_wizard::tools::science_and_technology::astronomy::seasons::widget::seasons.dart::_SeasonsState" {
  -int _currentYear
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::seasons::widget::seasons.dart::_SeasonsState"

class "gc_wizard::tools::science_and_technology::astronomy::shadow_length::logic::shadow_length.dart::ShadowLength" {
  +double length
  +LatLng shadowEndPosition
  +SunPosition sunPosition
}

"gc_wizard::tools::science_and_technology::astronomy::shadow_length::logic::shadow_length.dart::ShadowLength" o-- "latlong2::latlong.dart::LatLng"
"gc_wizard::tools::science_and_technology::astronomy::shadow_length::logic::shadow_length.dart::ShadowLength" o-- "gc_wizard::tools::science_and_technology::astronomy::sun_position::logic::sun_position.dart::SunPosition"

class "gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::ShadowLength" {
  +_ShadowLengthState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::ShadowLength"

class "gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState" {
  -DateTimeTimezone _currentDateTime
  -BaseCoordinate _currentInputCoords
  -double _currentHeight
  -Length _currentInputLength
  -GCWCoordsOutputFormatDistanceValue _currentOutputFormat
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState" o-- "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone"
"gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"
"gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState" o-- "gc_wizard::tools::coords::_common::widget::gcw_coords_output::gcw_coords_outputformat_distance.dart::GCWCoordsOutputFormatDistanceValue"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::shadow_length::widget::shadow_length.dart::_ShadowLengthState"

class "gc_wizard::tools::science_and_technology::astronomy::sun_position::logic::sun_position.dart::SunPosition" {
  +double distanceToEarthCenter
  +double distanceToObserver
  +double eclipticLongitude
  +double rightAscension
  +double declination
  +double azimuth
  +double altitude
  +double diameter
  +AstrologicalSign astrologicalSign
  +double greenwichSiderealTime
  +double localSiderealTime
}

"gc_wizard::tools::science_and_technology::astronomy::sun_position::logic::sun_position.dart::SunPosition" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign"

class "gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::SunPosition" {
  +_SunPositionState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::SunPosition"

class "gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::_SunPositionState" {
  -DateTimeTimezone _currentDateTime
  -BaseCoordinate _currentCoords
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::_SunPositionState" o-- "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone"
"gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::_SunPositionState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::sun_position::widget::sun_position.dart::_SunPositionState"

class "gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::logic::sun_rise_set.dart::SunRiseSet" {
  +double astronomicalMorning
  +double nauticalMorning
  +double civilMorning
  +double rise
  +double transit
  +double set
  +double civilEvening
  +double nauticalEvening
  +double astronomicalEvening
}

class "gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::SunRiseSet" {
  +_SunRiseSetState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::SunRiseSet"

class "gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::_SunRiseSetState" {
  -DateTimeTimezone _currentDateTime
  -BaseCoordinate _currentCoords
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::_SunRiseSetState" o-- "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone"
"gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::_SunRiseSetState" o-- "gc_wizard::tools::coords::_common::logic::coordinates.dart::BaseCoordinate"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::astronomy::sun_rise_set::widget::sun_rise_set.dart::_SunRiseSetState"

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign" {
  +int index
  {static} +List<AstrologicalSign> values
  {static} +AstrologicalSign ARIES
  {static} +AstrologicalSign TAURUS
  {static} +AstrologicalSign GEMINI
  {static} +AstrologicalSign CANCER
  {static} +AstrologicalSign LEO
  {static} +AstrologicalSign VIRGO
  {static} +AstrologicalSign LIBRA
  {static} +AstrologicalSign SCORPIO
  {static} +AstrologicalSign SAGITTARIUS
  {static} +AstrologicalSign CAPRICORN
  {static} +AstrologicalSign AQUARIUS
  {static} +AstrologicalSign PISCES
}

"gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign"

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase" {
  +int index
  {static} +List<MoonPhase> values
  {static} +MoonPhase NEW_MOON
  {static} +MoonPhase INCREASING_CRESCENT
  {static} +MoonPhase FIRST_QUARTER
  {static} +MoonPhase INCREASING_MOON
  {static} +MoonPhase FULL_MOON
  {static} +MoonPhase DECREASING_MOON
  {static} +MoonPhase LAST_QUARTER
  {static} +MoonPhase DECREASING_CRESCENT
}

"gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase"

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::external_libs::astronomie_info::astronomy.dart::Coor" {
  +double lon
  +double lat
  +double ra
  +double dec
  +double raGeocentric
  +double decGeocentric
  +double az
  +double alt
  +double x
  +double y
  +double z
  +double radius
  +double diameter
  +double distance
  +double distanceTopocentric
  +double decTopocentric
  +double raTopocentric
  +double anomalyMean
  +double parallax
  +double orbitLon
  +double moonAge
  +double phase
  +MoonPhase moonPhase
  +AstrologicalSign sign
}

"gc_wizard::tools::science_and_technology::astronomy::_common::logic::external_libs::astronomie_info::astronomy.dart::Coor" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::MoonPhase"
"gc_wizard::tools::science_and_technology::astronomy::_common::logic::external_libs::astronomie_info::astronomy.dart::Coor" o-- "gc_wizard::tools::science_and_technology::astronomy::_common::logic::astronomy_constants.dart::AstrologicalSign"

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::external_libs::astronomie_info::astronomy.dart::RiseSet" {
  +double transit
  +double rise
  +double set
  +double civilTwilightMorning
  +double civilTwilightEvening
  +double nauticalTwilightMorning
  +double nauticalTwilightEvening
  +double astronomicalTwilightMorning
  +double astronomicalTwilightEvening
}

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::external_libs::astronomie_info::astronomy.dart::Time" {
  +int hh
  +int mm
  +int ss
  +String hhmmString
  +String hhmmStringdec
  +String hhmmssString
  +String hhmmssStringdec
}

class "gc_wizard::tools::science_and_technology::astronomy::_common::logic::julian_date.dart::JulianDate" {
  +double julianDateUTCNoon
  +double julianDate
  +double deltaT
  +double terrestrialDynamicalTime
  -double _deltaT()
}

class "gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::Beaufort" {
  +_BeaufortState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::Beaufort"

class "gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::_BeaufortState" {
  -GCWSwitchPosition _currentMode
  -double _currentVelocity
  -int _currentBeaufortInput
  -Velocity _currentOutputUnit
  +Widget build()
  -String? _buildOutput()
}

"gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::_BeaufortState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::_BeaufortState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::velocity.dart::Velocity"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::beaufort::widget::beaufort.dart::_BeaufortState"

class "gc_wizard::tools::science_and_technology::binary::widget::binary.dart::Binary" {
  +_BinaryState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::binary::widget::binary.dart::Binary"

class "gc_wizard::tools::science_and_technology::binary::widget::binary.dart::_BinaryState" {
  -String _currentDecimalValue
  -String _currentBinaryValue
  -TextEditingController _binaryController
  -TextEditingController _decimalController
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::binary::widget::binary.dart::_BinaryState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::binary::widget::binary.dart::_BinaryState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::binary::widget::binary.dart::_BinaryState"

class "gc_wizard::tools::science_and_technology::blood_alcohol_content::widget::blood_alcohol_content.dart::BloodAlcoholContent" {
  +_BloodAlcoholContentState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::blood_alcohol_content::widget::blood_alcohol_content.dart::BloodAlcoholContent"

class "gc_wizard::tools::science_and_technology::blood_alcohol_content::widget::blood_alcohol_content.dart::_BloodAlcoholContentState" {
  {static} -Map<BloodAlcoholGender, String> _GENDERS
  -double _currentVolume
  -double _currentPercent
  -BloodAlcoholGender _currentGender
  -double _currentMass
  -double _currentHeight
  -int _currentAge
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::blood_alcohol_content::widget::blood_alcohol_content.dart::_BloodAlcoholContentState" o-- "gc_wizard::tools::science_and_technology::alcohol_mass::logic::alcohol_mass.dart::BloodAlcoholGender"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::blood_alcohol_content::widget::blood_alcohol_content.dart::_BloodAlcoholContentState"

class "gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::ColorTool" {
  +RGB? color
  +_ColorToolState createState()
}

"gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::ColorTool" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::RGB"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::ColorTool"

class "gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::_ColorToolState" {
  -GCWColorValue _currentColor
  -ColorSpaceKey _currentOutputColorSpace
  -NumberFormat _numberFormat
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::_ColorToolState" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::_ColorToolState" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey"
"gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::_ColorToolState" o-- "intl::src::intl::number_format.dart::NumberFormat"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::colors::color_tool::widget::color_tool.dart::_ColorToolState"

class "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpace" {
  +ColorSpaceKey key
  +String persistanceKey
  +String name
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpace" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey"

abstract class "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" {
  +RGB toRGB()
}

class "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey" {
  +int index
  {static} +List<ColorSpaceKey> values
  {static} +ColorSpaceKey RGB
  {static} +ColorSpaceKey HEXCODE
  {static} +ColorSpaceKey HSV
  {static} +ColorSpaceKey HSL
  {static} +ColorSpaceKey HSI
  {static} +ColorSpaceKey CMYK
  {static} +ColorSpaceKey CMY
  {static} +ColorSpaceKey YUV
  {static} +ColorSpaceKey YPBPR
  {static} +ColorSpaceKey YCBCR
  {static} +ColorSpaceKey YIQ
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors.dart::ColorSpaceKey"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMYK" {
  +double cyan
  +double magenta
  +double yellow
  +double key
  +RGB toRGB()
  {static} +CMYK fromRGB()
  +String toCMYKString()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMYK"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMY" {
  +double cyan
  +double magenta
  +double yellow
  +RGB toRGB()
  {static} +CMY fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_cmyk.dart::CMY"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSV" {
  +double hue
  +double saturation
  +double value
  +double saturationPercentage
  +double valuePercentage
  +RGB toRGB()
  {static} +HSV fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSV"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSL" {
  +double hue
  +double saturation
  +double lightness
  +RGB toRGB()
  {static} +HSL fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSL"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSI" {
  +double hue
  +double saturation
  +double intensity
  +RGB toRGB()
  {static} +HSI fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::HSI"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::_HueType" {
  +int index
  {static} +List<_HueType> values
  {static} +_HueType HSV
  {static} +_HueType HSL
  {static} +_HueType HSI
}

"gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::_HueType" o-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::_HueType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_hue.dart::_HueType"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::RGB" {
  +double red
  +double green
  +double blue
  +double redPercentage
  +double greenPercentage
  +double bluePercentage
  +RGB toRGB()
  -double _percentage()
  +String toRBGString()
  +bool equals()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::RGB"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::HexCode" {
  +String hexCode
  +bool isShortHex
  +String? shortHexCode
  +RGB toRGB()
  {static} +HexCode fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_rgb.dart::HexCode"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YUV" {
  +double y
  +double u
  +double v
  {static} +double U_MAX
  {static} +double V_MAX
  {static} -double _W_R
  {static} -double _W_B
  {static} -double _W_G
  +RGB toRGB()
  {static} +YUV fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YUV"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YPbPr" {
  +double y
  +double pb
  +double pr
  {static} -double _K_R
  {static} -double _K_B
  {static} -double _K_G
  +RGB toRGB()
  {static} +YPbPr fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YPbPr"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YCbCr" {
  +double y
  +double cb
  +double cr
  +YPbPr toYPbPr()
  +RGB toRGB()
  {static} +YCbCr fromYPbPr()
  {static} +YCbCr fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YCbCr"

class "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YIQ" {
  +double y
  +double i
  +double q
  {static} +double I_MAX
  {static} +double Q_MAX
  +YUV toYUV()
  +RGB toRGB()
  {static} +YIQ fromYUV()
  {static} +YIQ fromRGB()
  +String toString()
}

"gc_wizard::tools::science_and_technology::colors::logic::colors.dart::GCWBaseColor" <|-- "gc_wizard::tools::science_and_technology::colors::logic::colors_yuv.dart::YIQ"

class "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::logic::pantone_color_codes.dart::PantoneColor" {
  +String colorcode
  +String name
}

class "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::logic::pantone_color_codes.dart::PantoneColorExt" {
  +String? suffix
  +String? prefix
}

"gc_wizard::tools::science_and_technology::colors::pantone_color_codes::logic::pantone_color_codes.dart::PantoneColor" <|-- "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::logic::pantone_color_codes.dart::PantoneColorExt"

class "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::PantoneColorCodes" {
  +_PantoneColorCodesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::PantoneColorCodes"

class "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::_PantoneColorCodesState" {
  -PantoneColor _currentValue
  -List<PantoneColor> _colors
  -GCWSwitchPosition _currentMode
  -GCWColorValue _currentColor
  +void initState()
  +Widget build()
  -List<Object> _buildPantoneColorOutput()
  -Widget _buildColorToPantoneOutput()
  -Widget _buildPantoneToColorOutput()
  -void _showElement()
}

"gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::_PantoneColorCodesState" o-- "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::logic::pantone_color_codes.dart::PantoneColor"
"gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::_PantoneColorCodesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::_PantoneColorCodesState" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::colors::pantone_color_codes::widget::pantone_color_codes.dart::_PantoneColorCodesState"

class "gc_wizard::tools::science_and_technology::colors::ral_color_codes::logic::ral_color_codes.dart::RalColor" {
  +String colorcode
  +String name
}

class "gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::RALColorCodes" {
  +_RALColorCodesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::RALColorCodes"

class "gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::_RALColorCodesState" {
  -MapEntry<String, RalColor> _currentValue
  -List<MapEntry<String, RalColor>> _colors
  -GCWSwitchPosition _currentMode
  -GCWColorValue _currentInput
  +void initState()
  +Widget build()
  -List<Object> _buildRALColorOutput()
  -Widget _buildColorToRALOutput()
  -Widget _buildRALToColorOutput()
  -void _showElement()
}

"gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::_RALColorCodesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::_RALColorCodesState" o-- "gc_wizard::common_widgets::color_pickers::gcw_colors.dart::GCWColorValue"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::colors::ral_color_codes::widget::ral_color_codes.dart::_RALColorCodesState"

class "gc_wizard::tools::science_and_technology::combinatorics::combination::widget::combination.dart::Combination" {
  +_CombinationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::combinatorics::combination::widget::combination.dart::Combination"

class "gc_wizard::tools::science_and_technology::combinatorics::combination::widget::combination.dart::_CombinationState" {
  -String _currentInput
  -bool _currentShowDuplicates
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::combinatorics::combination::widget::combination.dart::_CombinationState"

class "gc_wizard::tools::science_and_technology::combinatorics::combination_permutation::widget::combination_permutation.dart::CombinationPermutation" {
  +_CombinationPermutationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::combinatorics::combination_permutation::widget::combination_permutation.dart::CombinationPermutation"

class "gc_wizard::tools::science_and_technology::combinatorics::combination_permutation::widget::combination_permutation.dart::_CombinationPermutationState" {
  -String _currentInput
  -bool _currentShowDuplicates
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::combinatorics::combination_permutation::widget::combination_permutation.dart::_CombinationPermutationState"

class "gc_wizard::tools::science_and_technology::combinatorics::permutation::widget::permutation.dart::Permutation" {
  +_PermutationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::combinatorics::permutation::widget::permutation.dart::Permutation"

class "gc_wizard::tools::science_and_technology::combinatorics::permutation::widget::permutation.dart::_PermutationState" {
  -String _currentInput
  -bool _currentShowDuplicates
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::combinatorics::permutation::widget::permutation.dart::_PermutationState"

class "gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::ComplexNumbers" {
  +_ComplexNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::ComplexNumbers"

class "gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::_ComplexNumbersState" {
  -String _currentA
  -String _currentB
  -String _currentRadius
  -String _currentAngle
  -TextEditingController _aController
  -TextEditingController _bController
  -TextEditingController _radiusController
  -TextEditingController _angleController
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::_ComplexNumbersState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::_ComplexNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::complex_numbers::widget::complex_numbers.dart::_ComplexNumbersState"

class "gc_wizard::tools::science_and_technology::compound_interest::logic::compound_interest.dart::COMPOUND_FREQUENCY" {
  +int index
  {static} +List<COMPOUND_FREQUENCY> values
  {static} +COMPOUND_FREQUENCY YEARLY
  {static} +COMPOUND_FREQUENCY MONTHLY
  {static} +COMPOUND_FREQUENCY QUARTERLY
  {static} +COMPOUND_FREQUENCY WEEKLY
  {static} +COMPOUND_FREQUENCY DAILY_360
  {static} +COMPOUND_FREQUENCY DAILY_365
}

"gc_wizard::tools::science_and_technology::compound_interest::logic::compound_interest.dart::COMPOUND_FREQUENCY" o-- "gc_wizard::tools::science_and_technology::compound_interest::logic::compound_interest.dart::COMPOUND_FREQUENCY"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::compound_interest::logic::compound_interest.dart::COMPOUND_FREQUENCY"

class "gc_wizard::tools::science_and_technology::compound_interest::widget::compound_interest.dart::CompoundInterest" {
  +_CompoundInterestState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::compound_interest::widget::compound_interest.dart::CompoundInterest"

class "gc_wizard::tools::science_and_technology::compound_interest::widget::compound_interest.dart::_CompoundInterestState" {
  -String _currentMode
  -double _currentPrincipalSum
  -double _currentOriginalPrincipalSum
  -double _currentAnnualRate
  -double _currentTotalYears
  -COMPOUND_FREQUENCY _currentCompoundFrequency
  -bool _currentCompoundInterest
  +Widget build()
  -String _compoundFrequencyTitle()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::compound_interest::widget::compound_interest.dart::_CompoundInterestState" o-- "gc_wizard::tools::science_and_technology::compound_interest::logic::compound_interest.dart::COMPOUND_FREQUENCY"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::compound_interest::widget::compound_interest.dart::_CompoundInterestState"

class "gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" {
  +List<CountryProperties> fields
  +_CountriesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries"

class "gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::_CountriesState" {
  -GCWSwitchPosition _currentSwitchSort
  -int _currentSort
  -List<String> _currentSortList
  +void initState()
  +Widget build()
  -Widget _buildOutput()
  -int _compareAsString()
  -int _compareAsInt()
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::_CountriesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::_CountriesState"

class "gc_wizard::tools::science_and_technology::countries::countries_calling_codes::widget::countries_calling_codes.dart::CountriesCallingCodes" {
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" <|-- "gc_wizard::tools::science_and_technology::countries::countries_calling_codes::widget::countries_calling_codes.dart::CountriesCallingCodes"

class "gc_wizard::tools::science_and_technology::countries::countries_embassycodes_ger::widget::countries_embassycodes_ger.dart::CountriesEmbassyCodesGER" {
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" <|-- "gc_wizard::tools::science_and_technology::countries::countries_embassycodes_ger::widget::countries_embassycodes_ger.dart::CountriesEmbassyCodesGER"

class "gc_wizard::tools::science_and_technology::countries::countries_ioc_codes::widget::countries_ioc_codes.dart::CountriesIOCCodes" {
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" <|-- "gc_wizard::tools::science_and_technology::countries::countries_ioc_codes::widget::countries_ioc_codes.dart::CountriesIOCCodes"

class "gc_wizard::tools::science_and_technology::countries::countries_iso_codes::widget::countries_iso_codes.dart::CountriesISOCodes" {
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" <|-- "gc_wizard::tools::science_and_technology::countries::countries_iso_codes::widget::countries_iso_codes.dart::CountriesISOCodes"

class "gc_wizard::tools::science_and_technology::countries::countries_vehicle_codes::widget::countries_vehicle_codes.dart::CountriesVehicleCodes" {
}

"gc_wizard::tools::science_and_technology::countries::countries::widget::countries.dart::Countries" <|-- "gc_wizard::tools::science_and_technology::countries::countries_vehicle_codes::widget::countries_vehicle_codes.dart::CountriesVehicleCodes"

class "gc_wizard::tools::science_and_technology::countries::country_flags::widget::country_flags.dart::CountriesFlags" {
  +_CountriesFlagsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::countries::country_flags::widget::country_flags.dart::CountriesFlags"

class "gc_wizard::tools::science_and_technology::countries::country_flags::widget::country_flags.dart::_CountriesFlagsState" {
  -String _ASSET_PATH
  -String _KEY_PREFIX
  -List<Map<String, SymbolData>> _images
  -String _currentImageKey
  +void initState()
  -void _initalizeImages()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::countries::country_flags::widget::country_flags.dart::_CountriesFlagsState"

class "gc_wizard::tools::science_and_technology::countries::logic::countries.dart::_Country" {
  +String name
  +String callingcode
  +String vehiclecode
  +String iso3166_1_2
  +String iso3166_1_3
  +String iso3166_1_n
  +String iso3166_2
  +String ioccode
  +int? embassycodes_ger
  +Object? getProperty()
}

class "gc_wizard::tools::science_and_technology::countries::logic::countries.dart::CountryProperties" {
  +int index
  {static} +List<CountryProperties> values
  {static} +CountryProperties name
  {static} +CountryProperties callingcode
  {static} +CountryProperties vehiclecode
  {static} +CountryProperties iso3166_1_2
  {static} +CountryProperties iso3166_1_3
  {static} +CountryProperties iso3166_1_n
  {static} +CountryProperties iso3166_2
  {static} +CountryProperties ioccode
  {static} +CountryProperties embassycodes_ger
}

"gc_wizard::tools::science_and_technology::countries::logic::countries.dart::CountryProperties" o-- "gc_wizard::tools::science_and_technology::countries::logic::countries.dart::CountryProperties"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::countries::logic::countries.dart::CountryProperties"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum::widget::cross_sum.dart::CrossSum" {
  +_CrossSumState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum::widget::cross_sum.dart::CrossSum"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum::widget::cross_sum.dart::_CrossSumState" {
  -int _currentValue
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum::widget::cross_sum.dart::_CrossSumState"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::CrossSumRange" {
  +CrossSumType type
  +_CrossSumRangeState createState()
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::CrossSumRange" o-- "gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::CrossSumRange"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::_CrossSumRangeState" {
  -int _currentCrossSum
  -int _currentRangeStart
  -int _currentRangeEnd
  -List<Widget> _currentOutput
  -TextEditingController _endController
  +void initState()
  +void dispose()
  +Widget build()
  -void _calculateOutput()
  -List<Widget> _buildOutput()
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::_CrossSumRangeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::_CrossSumRangeState"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::CrossSumRangeFrequency" {
  +CrossSumType type
  +_CrossSumRangeFrequencyState createState()
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::CrossSumRangeFrequency" o-- "gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::CrossSumRangeFrequency"

class "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::_CrossSumRangeFrequencyState" {
  -int _currentRangeStart
  -int _currentRangeEnd
  -GCWSwitchPosition _currentSort
  -Map<int, int> _currentFrequencies
  +void initState()
  +Widget build()
  -void _calculateFrequencies()
  -Widget _calculateOutput()
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::_CrossSumRangeFrequencyState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::_CrossSumRangeFrequencyState"

class "gc_wizard::tools::science_and_technology::cross_sums::iterated_cross_sum_range::widget::iterated_cross_sum_range.dart::IteratedCrossSumRange" {
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range::widget::cross_sum_range.dart::CrossSumRange" <|-- "gc_wizard::tools::science_and_technology::cross_sums::iterated_cross_sum_range::widget::iterated_cross_sum_range.dart::IteratedCrossSumRange"

class "gc_wizard::tools::science_and_technology::cross_sums::iterated_cross_sum_range_frequency::widget::iterated_cross_sum_range_frequency.dart::IteratedCrossSumRangeFrequency" {
}

"gc_wizard::tools::science_and_technology::cross_sums::cross_sum_range_frequency::widget::cross_sum_range_frequency.dart::CrossSumRangeFrequency" <|-- "gc_wizard::tools::science_and_technology::cross_sums::iterated_cross_sum_range_frequency::widget::iterated_cross_sum_range_frequency.dart::IteratedCrossSumRangeFrequency"

class "gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType" {
  +int index
  {static} +List<CrossSumType> values
  {static} +CrossSumType NORMAL
  {static} +CrossSumType ITERATED
}

"gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType" o-- "gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::cross_sums::logic::crosstotals_range.dart::CrossSumType"

class "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CrosstotalOutput" {
  +List<int> values
  +String text
  +bool suppressSums
  +CROSSTOTAL_INPUT_TYPE inputType
  +_CrosstotalOutputState createState()
}

"gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CrosstotalOutput" o-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CROSSTOTAL_INPUT_TYPE"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CrosstotalOutput"

class "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::_CrosstotalOutputState" {
  +Widget build()
  -Widget _buildCrosstotalContent()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::_CrosstotalOutputState"

class "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CROSSTOTAL_INPUT_TYPE" {
  +int index
  {static} +List<CROSSTOTAL_INPUT_TYPE> values
  {static} +CROSSTOTAL_INPUT_TYPE LETTERS
  {static} +CROSSTOTAL_INPUT_TYPE NUMBERS
}

"gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CROSSTOTAL_INPUT_TYPE" o-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CROSSTOTAL_INPUT_TYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_output.dart::CROSSTOTAL_INPUT_TYPE"

class "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_switch.dart::CrosstotalSwitch" {
  +void Function(bool) onChanged
  +_CrosstotalSwitchState createState()
}

"gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_switch.dart::CrosstotalSwitch" o-- "null::void Function(bool)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_switch.dart::CrosstotalSwitch"

class "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_switch.dart::_CrosstotalSwitchState" {
  -bool _currentValue
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::cross_sums::widget::crosstotal_switch.dart::_CrosstotalSwitchState"

class "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar.dart::PotrzebieCalendarOutput" {
  +DateTime date
  +String suffix
}

class "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem" {
  +int index
  {static} +List<CalendarSystem> values
  {static} +CalendarSystem JULIANDATE
  {static} +CalendarSystem JULIANCALENDAR
  {static} +CalendarSystem MODIFIEDJULIANDATE
  {static} +CalendarSystem GREGORIANCALENDAR
  {static} +CalendarSystem ISLAMICCALENDAR
  {static} +CalendarSystem PERSIANYAZDEGARDCALENDAR
  {static} +CalendarSystem HEBREWCALENDAR
  {static} +CalendarSystem COPTICCALENDAR
  {static} +CalendarSystem POTRZEBIECALENDAR
  {static} +CalendarSystem MAYACALENDAR
  {static} +CalendarSystem EXCELTIMESTAMP
  {static} +CalendarSystem UNIXTIMESTAMP
}

"gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem" o-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem"

class "gc_wizard::tools::science_and_technology::date_and_time::calendar::widget::calendar.dart::Calendar" {
  +_CalendarState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::widget::calendar.dart::Calendar"

class "gc_wizard::tools::science_and_technology::date_and_time::calendar::widget::calendar.dart::_CalendarState" {
  -CalendarSystem _currentCalendarSystem
  -double _currentJulianDate
  -int _currentTimeStamp
  -DateTime _currentDate
  +bool excelBug
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -String _PotrzebieToString()
  -String _HebrewDateToString()
  -String? _DateOutputToString()
  -bool _invalidMayaDate()
  -bool _invalidExcelDate()
  -bool _invalidUnixDate()
  -Container _buildUrl()
}

"gc_wizard::tools::science_and_technology::date_and_time::calendar::widget::calendar.dart::_CalendarState" o-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::logic::calendar_constants.dart::CalendarSystem"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::calendar::widget::calendar.dart::_CalendarState"

class "gc_wizard::tools::science_and_technology::date_and_time::calendar_week::widget::calendar_week.dart::CalendarWeek" {
  +_CalendarWeekState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::calendar_week::widget::calendar_week.dart::CalendarWeek"

class "gc_wizard::tools::science_and_technology::date_and_time::calendar_week::widget::calendar_week.dart::_CalendarWeekState" {
  -DateTime _currentEncryptionDate
  -int _currentWeek
  -int _currentYear
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentISOMode
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::date_and_time::calendar_week::widget::calendar_week.dart::_CalendarWeekState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::calendar_week::widget::calendar_week.dart::_CalendarWeekState"

class "gc_wizard::tools::science_and_technology::date_and_time::day_calculator::logic::day_calculator.dart::DayCalculatorOutput" {
  +int days
  +int hours
  +int minutes
  +int seconds
}

class "gc_wizard::tools::science_and_technology::date_and_time::day_calculator::widget::day_calculator.dart::DayCalculator" {
  +_DayCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::day_calculator::widget::day_calculator.dart::DayCalculator"

class "gc_wizard::tools::science_and_technology::date_and_time::day_calculator::widget::day_calculator.dart::_DayCalculatorState" {
  -DateTime _currentStartDate
  -DateTime _currentEndDate
  -bool _currentCountStart
  -bool _currentCountEnd
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::day_calculator::widget::day_calculator.dart::_DayCalculatorState"

class "gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::logic::day_of_the_year.dart::DayOfTheYearOutput" {
  +DateTime date
  +int dayNumber
  +int weekday
  +int weekNumberIso
  +int weekdayAlternate
  +int weekNumberAlternate
}

class "gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::DayOfTheYear" {
  +_DayOfTheYearState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::DayOfTheYear"

class "gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::_DayOfTheYearState" {
  -GCWSwitchPosition _currentMode
  -DateTime _currentEncodeDate
  -DateTime _currentDecodeDate
  -FocusNode _dayFocusNode
  -int _currentYear
  -int _currentDayOfTheYear
  +void initState()
  +Widget build()
  -Widget _decodeWidget()
  -Widget _encodeWidget()
  -Widget _dayOfTheYearPicker()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::_DayOfTheYearState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::_DayOfTheYearState" o-- "flutter::src::widgets::focus_manager.dart::FocusNode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::day_of_the_year::widget::day_of_the_year.dart::_DayOfTheYearState"

class "gc_wizard::tools::science_and_technology::date_and_time::excel_time::logic::excel_time.dart::ExcelTimeOutput" {
  +double ExcelTimeStamp
  +DateTime GregorianDateTime
  +String Error
}

class "gc_wizard::tools::science_and_technology::date_and_time::excel_time::widget::excel_time.dart::ExcelTime" {
  +_ExcelTimeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::excel_time::widget::excel_time.dart::ExcelTime"

class "gc_wizard::tools::science_and_technology::date_and_time::excel_time::widget::excel_time.dart::_ExcelTimeState" {
  -double _currentTimeStamp
  -DateTime _currentDateTime
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -String _formatDate()
}

"gc_wizard::tools::science_and_technology::date_and_time::excel_time::widget::excel_time.dart::_ExcelTimeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::excel_time::widget::excel_time.dart::_ExcelTimeState"

class "gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::TimeCalculator" {
  +_TimeCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::TimeCalculator"

class "gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::_TimeCalculatorState" {
  -GCWSwitchPosition _currentMode
  -Duration _currentStartTime
  -Duration _currentEndTime
  -TextEditingController _startDaysController
  -TextEditingController _startHoursController
  -TextEditingController _startMinutesController
  -TextEditingController _startSecondsController
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::_TimeCalculatorState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::_TimeCalculatorState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::time_calculator::widget::time_calculator.dart::_TimeCalculatorState"

class "gc_wizard::tools::science_and_technology::date_and_time::unix_time::logic::unix_time.dart::UnixTimeOutput" {
  +int UnixTimeStamp
  +DateTime GregorianDateTime
  +String Error
}

class "gc_wizard::tools::science_and_technology::date_and_time::unix_time::widget::unix_time.dart::UnixTime" {
  +_UnixTimeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::unix_time::widget::unix_time.dart::UnixTime"

class "gc_wizard::tools::science_and_technology::date_and_time::unix_time::widget::unix_time.dart::_UnixTimeState" {
  -int _currentTimeStamp
  -DateTime _currentDateTime
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -String _formatDate()
}

"gc_wizard::tools::science_and_technology::date_and_time::unix_time::widget::unix_time.dart::_UnixTimeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::unix_time::widget::unix_time.dart::_UnixTimeState"

class "gc_wizard::tools::science_and_technology::date_and_time::weekday::widget::weekday.dart::Weekday" {
  +_WeekdayState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::date_and_time::weekday::widget::weekday.dart::Weekday"

class "gc_wizard::tools::science_and_technology::date_and_time::weekday::widget::weekday.dart::_WeekdayState" {
  -DateTime _currentDate
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::date_and_time::weekday::widget::weekday.dart::_WeekdayState"

class "gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::Decabit" {
  +_DecabitState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::Decabit"

class "gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::_DecabitState" {
  -TextEditingController _inputController
  -TextEditingController _aController
  -TextEditingController _bController
  -String _currentInput
  -String _currentA
  -String _currentB
  -GCWSwitchPosition _currentMode
  -bool _numericMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildInputButtons()
  -void _addCharacter()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::_DecabitState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::_DecabitState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::decabit::widget::decabit.dart::_DecabitState"

class "gc_wizard::tools::science_and_technology::divisor::widget::divisor.dart::Divisor" {
  +_DivisorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::divisor::widget::divisor.dart::Divisor"

class "gc_wizard::tools::science_and_technology::divisor::widget::divisor.dart::_DivisorState" {
  -int _currentInputN
  -bool _currentCrosstotalMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::divisor::widget::divisor.dart::_DivisorState"

class "gc_wizard::tools::science_and_technology::dna::dna_aminoacids::widget::dna_aminoacids.dart::DNAAminoAcids" {
  +_DNAAminoAcidsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::dna::dna_aminoacids::widget::dna_aminoacids.dart::DNAAminoAcids"

class "gc_wizard::tools::science_and_technology::dna::dna_aminoacids::widget::dna_aminoacids.dart::_DNAAminoAcidsState" {
  -GCWSwitchPosition _currentMode
  -String _currentInput
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::dna::dna_aminoacids::widget::dna_aminoacids.dart::_DNAAminoAcidsState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::dna::dna_aminoacids::widget::dna_aminoacids.dart::_DNAAminoAcidsState"

class "gc_wizard::tools::science_and_technology::dna::dna_aminoacids_table::widget::dna_aminoacids_table.dart::DNAAminoAcidsTable" {
  +_DNAAminoAcidsTableState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::dna::dna_aminoacids_table::widget::dna_aminoacids_table.dart::DNAAminoAcidsTable"

class "gc_wizard::tools::science_and_technology::dna::dna_aminoacids_table::widget::dna_aminoacids_table.dart::_DNAAminoAcidsTableState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::dna::dna_aminoacids_table::widget::dna_aminoacids_table.dart::_DNAAminoAcidsTableState"

class "gc_wizard::tools::science_and_technology::dna::dna_nucleicacidsequence::widget::dna_nucleicacidsequence.dart::DNANucleicAcidSequence" {
  +_DNANucleicAcidSequenceState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::dna::dna_nucleicacidsequence::widget::dna_nucleicacidsequence.dart::DNANucleicAcidSequence"

class "gc_wizard::tools::science_and_technology::dna::dna_nucleicacidsequence::widget::dna_nucleicacidsequence.dart::_DNANucleicAcidSequenceState" {
  -GCWSwitchPosition _currentMode
  -String _currentInput
  -GCWSwitchPosition _currentDNAMode
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::dna::dna_nucleicacidsequence::widget::dna_nucleicacidsequence.dart::_DNANucleicAcidSequenceState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::dna::dna_nucleicacidsequence::widget::dna_nucleicacidsequence.dart::_DNANucleicAcidSequenceState"

class "gc_wizard::tools::science_and_technology::dna::logic::dna.dart::AminoAcid" {
  +String? name
  +String? symbolShort
  +String? symbolLong
  +List<String> nucleobaseSequences
  +NucleobaseSequenceType type
}

"gc_wizard::tools::science_and_technology::dna::logic::dna.dart::AminoAcid" o-- "gc_wizard::tools::science_and_technology::dna::logic::dna.dart::NucleobaseSequenceType"

class "gc_wizard::tools::science_and_technology::dna::logic::dna.dart::NucleobaseSequenceType" {
  +int index
  {static} +List<NucleobaseSequenceType> values
  {static} +NucleobaseSequenceType NORMAL
  {static} +NucleobaseSequenceType START
  {static} +NucleobaseSequenceType STOP
}

"gc_wizard::tools::science_and_technology::dna::logic::dna.dart::NucleobaseSequenceType" o-- "gc_wizard::tools::science_and_technology::dna::logic::dna.dart::NucleobaseSequenceType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::dna::logic::dna.dart::NucleobaseSequenceType"

class "gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::DTMF" {
  +_DTMFState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::DTMF"

class "gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::_DTMFState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -int _currentDecryptLowFrequency
  -int _currentDecryptHighFrequency
  -GCWSwitchPosition _currentMode
  -GCWMaskTextInputFormatter _maskInputFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::_DTMFState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::_DTMFState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::_DTMFState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::dtmf::widget::dtmf.dart::_DTMFState"

class "gc_wizard::tools::science_and_technology::gcd::widget::gcd.dart::GCD" {
  +GCDState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::gcd::widget::gcd.dart::GCD"

class "gc_wizard::tools::science_and_technology::gcd::widget::gcd.dart::GCDState" {
  -int _currentInputA
  -int _currentInputB
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::gcd::widget::gcd.dart::GCDState"

class "gc_wizard::tools::science_and_technology::guitar_strings::logic::guitar_strings.dart::GuitarStringName" {
  +int index
  {static} +List<GuitarStringName> values
  {static} +GuitarStringName E4
  {static} +GuitarStringName H3
  {static} +GuitarStringName G3
  {static} +GuitarStringName D3
  {static} +GuitarStringName A2
  {static} +GuitarStringName E2
}

"gc_wizard::tools::science_and_technology::guitar_strings::logic::guitar_strings.dart::GuitarStringName" o-- "gc_wizard::tools::science_and_technology::guitar_strings::logic::guitar_strings.dart::GuitarStringName"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::guitar_strings::logic::guitar_strings.dart::GuitarStringName"

class "gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::GuitarStrings" {
  +_GuitarStringsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::GuitarStrings"

class "gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::_GuitarStringsState" {
  -GCWSwitchPosition _currentMode
  -String _currentEncryptionText
  -TextEditingController _encryptionController
  -int _currentString
  -int _currentFret
  -List<Tuple2<GuitarStringName, int>> _currentTones
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildEncryption()
  -Widget _buildEncryptionOutput()
  -String _bOrH()
  -Widget _buildDecryption()
  -GuitarStringName _stringNameFromIndex()
  -String _buildDecryptionOutput()
  -Widget _buildASCIITabs()
}

"gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::_GuitarStringsState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::_GuitarStringsState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::guitar_strings::widget::guitar_strings.dart::_GuitarStringsState"

class "gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::Hexadecimal" {
  +_HexadecimalState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::Hexadecimal"

class "gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::_HexadecimalState" {
  -String _currentDecimalValue
  -String _currentHexValue
  -TextEditingController _hexController
  -TextEditingController _decimalController
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::_HexadecimalState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::_HexadecimalState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::hexadecimal::widget::hexadecimal.dart::_HexadecimalState"

class "gc_wizard::tools::science_and_technology::iata_icao_search::logic::iata_icao.dart::IataIcaoCodes" {
  +String name
  +String iata
  +String icoa
  +String location_served
}

class "gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::IATAICAOSearch" {
  +_IATAICAOSearchState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::IATAICAOSearch"

class "gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::_IATAICAOSearchState" {
  -TextEditingController _inputControllerCode
  -TextEditingController _inputControllerName
  -String _currentInputCode
  -String _currentInputName
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentCode
  -Widget? _output
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::_IATAICAOSearchState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::_IATAICAOSearchState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::_IATAICAOSearchState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::iata_icao_search::widget::iata_icao_search.dart::_IATAICAOSearchState"

class "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSystem" {
  +int index
  {static} +List<IceCodeSystem> values
  {static} +IceCodeSystem EU
  {static} +IceCodeSystem BALTIC
  {static} +IceCodeSystem WMO
  {static} +IceCodeSystem SIGRID
}

"gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSystem" o-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSystem"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSystem"

class "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSubSystem" {
  +int index
  {static} +List<IceCodeSubSystem> values
  {static} +IceCodeSubSystem CONDITION
  {static} +IceCodeSubSystem ACCESSIBILITY
  {static} +IceCodeSubSystem CLASSIFICATION
  {static} +IceCodeSubSystem CONCENTRATION
  {static} +IceCodeSubSystem DEVELOPMENT
  {static} +IceCodeSubSystem FORM
  {static} +IceCodeSubSystem MELTING
  {static} +IceCodeSubSystem SNOW
  {static} +IceCodeSubSystem A
  {static} +IceCodeSubSystem S
  {static} +IceCodeSubSystem T
  {static} +IceCodeSubSystem K
  {static} +IceCodeSubSystem SIGRID
}

"gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSubSystem" o-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSubSystem"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSubSystem"

class "gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::IceCodes" {
  +_IceCodesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::IceCodes"

class "gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::_IceCodesState" {
  -IceCodeSystem _currentIceCodeSystem
  -IceCodeSubSystem _currentIceCodeSubSystemBaltic
  -IceCodeSubSystem _currentIceCodeSubSystemEU
  -IceCodeSubSystem _currentIceCodeSubSystemWMO
  -IceCodeSubSystem _currentIceCodeSubSystem
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::_IceCodesState" o-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSystem"
"gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::_IceCodesState" o-- "gc_wizard::tools::science_and_technology::icecodes::logic::icecodes.dart::IceCodeSubSystem"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::icecodes::widget::icecodes.dart::_IceCodesState"

class "gc_wizard::tools::science_and_technology::ip_codes::widget::ip_codes.dart::IPCodes" {
  +_IPCodesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::ip_codes::widget::ip_codes.dart::IPCodes"

class "gc_wizard::tools::science_and_technology::ip_codes::widget::ip_codes.dart::_IPCodesState" {
  -String _currentIPClass
  +Widget build()
  -String _ipTexts()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::ip_codes::widget::ip_codes.dart::_IPCodesState"

class "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::ENthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::ENthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::EDecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::EDecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::ESearch" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::e::widget::e.dart::ESearch"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" {
  +IrrationalNumber irrationalNumber
  +_IrrationalNumbersDecimalRangeState createState()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumber"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::_IrrationalNumbersDecimalRangeState" {
  -int _currentStart
  -int _currentLength
  -IrrationalNumberCalculator _calculator
  +void initState()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::_IrrationalNumbersDecimalRangeState" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberCalculator"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::_IrrationalNumbersDecimalRangeState"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" {
  +IrrationalNumber irrationalNumber
  +_IrrationalNumbersNthDecimalState createState()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumber"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::_IrrationalNumbersNthDecimalState" {
  -int _currentValue
  -IrrationalNumberCalculator _calculator
  +void initState()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::_IrrationalNumbersNthDecimalState" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberCalculator"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::_IrrationalNumbersNthDecimalState"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" {
  +IrrationalNumber irrationalNumber
  +_IrrationalNumbersSearchState createState()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumber"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch"

class "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::_IrrationalNumbersSearchState" {
  -String _currentInput
  -IrrationalNumberCalculator _calculator
  -bool _hasWildCards
  -int _totalCurrentSolutions
  -int _currentSolution
  -TextEditingController _controller
  -String? _errorMessage
  -List<IrrationalNumberDecimalOccurence> _solutions
  +void initState()
  +void dispose()
  +Widget build()
  -Object _calculateOutput()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::_IrrationalNumbersSearchState" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberCalculator"
"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::_IrrationalNumbersSearchState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::_IrrationalNumbersSearchState"

class "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiNthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiNthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiDecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiDecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiSearch" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::phi::widget::phi.dart::PhiSearch"

class "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiNthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiNthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiDecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiDecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiSearch" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::pi::widget::pi.dart::PiSearch"

class "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioNthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioNthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioDecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioDecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioSearch" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::silver_ratio::widget::silver_ratio.dart::SilverRatioSearch"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2NthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2NthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2DecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2DecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2Search" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt2::widget::sqrt2.dart::SQRT2Search"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3NthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3NthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3DecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3DecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3Search" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt3::widget::sqrt3.dart::SQRT3Search"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5NthDecimal" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_nthdecimal::widget::irrationalnumbers_nthdecimal.dart::IrrationalNumbersNthDecimal" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5NthDecimal"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5DecimalRange" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_decimalrange::widget::irrationalnumbers_decimalrange.dart::IrrationalNumbersDecimalRange" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5DecimalRange"

class "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5Search" {
}

"gc_wizard::tools::science_and_technology::irrational_numbers::irrationalnumbers_search::widget::irrationalnumbers_search.dart::IrrationalNumbersSearch" <|-- "gc_wizard::tools::science_and_technology::irrational_numbers::sqrt5::widget::sqrt5.dart::SQRT5Search"

class "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumber" {
  +String integerPart
  +String decimalPart
  +String symbol
}

class "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberCalculator" {
  +IrrationalNumber irrationalNumber
  +String decimalAt()
  +String decimalRange()
  +List<IrrationalNumberDecimalOccurence> decimalOccurences()
}

"gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberCalculator" o-- "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumber"

class "gc_wizard::tools::science_and_technology::irrational_numbers::_common::logic::irrational_numbers.dart::IrrationalNumberDecimalOccurence" {
  +String value
  +int start
  +int end
}

class "gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::KeyboardLayout" {
  +_KeyboardLayoutState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::KeyboardLayout"

class "gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::_KeyboardLayoutState" {
  -TextEditingController _inputController
  -String _currentInput
  -KEYBOARD_TYPE _currentKeyboardFrom
  -KEYBOARD_TYPE _currentKeyboardTo
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::_KeyboardLayoutState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::_KeyboardLayoutState" o-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::keyboard::keyboard_layout::widget::keyboard_layout.dart::_KeyboardLayoutState"

class "gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::KeyboardNumbers" {
  +_KeyboardNumbersState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::KeyboardNumbers"

class "gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::_KeyboardNumbersState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::_KeyboardNumbersState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::_KeyboardNumbersState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::keyboard::keyboard_numbers::widget::keyboard_numbers.dart::_KeyboardNumbersState"

class "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KeyboardData" {
  +KEYBOARD_TYPE type
  +String name
  +String example
}

"gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KeyboardData" o-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE"

class "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::_ConvertDirection" {
  +int index
  {static} +List<_ConvertDirection> values
  {static} +_ConvertDirection toNormal
  {static} +_ConvertDirection fromNormal
}

"gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::_ConvertDirection" o-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::_ConvertDirection"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::_ConvertDirection"

class "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE" {
  +int index
  {static} +List<KEYBOARD_TYPE> values
  {static} +KEYBOARD_TYPE QWERTZ_T1
  {static} +KEYBOARD_TYPE QWERTY_US_INT
  {static} +KEYBOARD_TYPE DVORAK
  {static} +KEYBOARD_TYPE DVORAK_I_DEU1
  {static} +KEYBOARD_TYPE DVORAK_I_DEU2
  {static} +KEYBOARD_TYPE DVORAK_I_DEU3
  {static} +KEYBOARD_TYPE DVORAK_II_DEU
  {static} +KEYBOARD_TYPE RISTOME
  {static} +KEYBOARD_TYPE NEO
  {static} +KEYBOARD_TYPE BONE
  {static} +KEYBOARD_TYPE COLEMAK
  {static} +KEYBOARD_TYPE FRA_AZERTY
  {static} +KEYBOARD_TYPE FRA_BEPO
}

"gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE" o-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::keyboard::_common::logic::keyboard.dart::KEYBOARD_TYPE"

class "gc_wizard::tools::science_and_technology::lcm::widget::lcm.dart::LCM" {
  +LCMState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::lcm::widget::lcm.dart::LCM"

class "gc_wizard::tools::science_and_technology::lcm::widget::lcm.dart::LCMState" {
  -int _currentInputA
  -int _currentInputB
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::lcm::widget::lcm.dart::LCMState"

class "gc_wizard::tools::science_and_technology::mathematical_constants::logic::mathematical_constants.dart::MathematicalConstant" {
  +String? symbol
  +String value
  +List<String>? additional_names
  +String? tool
}

class "gc_wizard::tools::science_and_technology::mathematical_constants::widget::mathematical_constants.dart::MathematicalConstants" {
  +_MathematicalConstantsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::mathematical_constants::widget::mathematical_constants.dart::MathematicalConstants"

class "gc_wizard::tools::science_and_technology::mathematical_constants::widget::mathematical_constants.dart::_MathematicalConstantsState" {
  -String _currentConstant
  -Map<String, MathematicalConstant> _constants
  -List<String> _orderedConstantKeys
  +void initState()
  +Widget build()
  -Map<String, MathematicalConstant> _buildConstants()
  -Widget _buildOutput()
  -Widget _buildToolLink()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::mathematical_constants::widget::mathematical_constants.dart::_MathematicalConstantsState"

class "gc_wizard::tools::science_and_technology::maya_calendar::logic::maya_calendar.dart::CORRELATION" {
  +int index
  {static} +List<CORRELATION> values
  {static} +CORRELATION THOMPSON
  {static} +CORRELATION SMILEY
  {static} +CORRELATION WEITZEL
}

"gc_wizard::tools::science_and_technology::maya_calendar::logic::maya_calendar.dart::CORRELATION" o-- "gc_wizard::tools::science_and_technology::maya_calendar::logic::maya_calendar.dart::CORRELATION"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::maya_calendar::logic::maya_calendar.dart::CORRELATION"

class "gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::MayaCalendar" {
  +_MayaCalendarState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::MayaCalendar"

class "gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::_MayaCalendarState" {
  -int _currentEncodeInput
  -String _currentLongCount
  -TextEditingController _longCountController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::_MayaCalendarState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::_MayaCalendarState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::_MayaCalendarState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::maya_calendar::widget::maya_calendar.dart::_MayaCalendarState"

class "gc_wizard::tools::science_and_technology::music_notes::logic::music_notes.dart::NotesCodebook" {
  +int index
  {static} +List<NotesCodebook> values
  {static} +NotesCodebook ALT
  {static} +NotesCodebook BASS
  {static} +NotesCodebook TREBLE
}

"gc_wizard::tools::science_and_technology::music_notes::logic::music_notes.dart::NotesCodebook" o-- "gc_wizard::tools::science_and_technology::music_notes::logic::music_notes.dart::NotesCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::music_notes::logic::music_notes.dart::NotesCodebook"

class "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::MusicNotes" {
  +_MusicNotesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::MusicNotes"

class "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -TextStyle _gcwTextStyle
  -NotesCodebook _currentCode
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
  -String _normalize()
  -Map<String, String> _buildTranslationMap()
  -Widget _buildDropDownMenuItem()
}

"gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" o-- "gc_wizard::tools::science_and_technology::music_notes::logic::music_notes.dart::NotesCodebook"
"gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_MusicNotesState"

class "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_NotesSegmentDisplay" {
  {static} -int _getSymbolWidth()
  {static} -void _drawNote()
  {static} -void _drawHash()
  {static} -void _drawB()
  {static} -void _setNotesState()
  {static} -Path _createLine()
  {static} -Path _createNote()
  {static} -Path _createHash()
  {static} -Path _createB()
  {static} -Path _createAltClef()
  {static} -Path _createBassClef()
  {static} -Path _createTrebleClef()
  {static} -bool _noteSelected()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::music_notes::music_notes::widget::music_notes.dart::_NotesSegmentDisplay"

class "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellRange"

class "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::bell::widget::bell.dart::NumberSequenceBellContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanRange"

class "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::catalan::widget::catalan.dart::NumberSequenceCatalanContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialRange"

class "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::factorial::widget::factorial.dart::NumberSequenceFactorialContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatRange"

class "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fermat::widget::fermat.dart::NumberSequenceFermatContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciRange"

class "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::fibonacci::widget::fibonacci.dart::NumberSequenceFibonacciContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::happy_numbers::widget::happy_numbers.dart::NumberSequenceHappyNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalRange"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal::widget::jacobsthal.dart::NumberSequenceJacobsthalContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasRange"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_lucas::widget::jacobsthal_lucas.dart::NumberSequenceJacobsthalLucasContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongRange"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::jacobsthal_oblong::widget::jacobsthal_oblong.dart::NumberSequenceJacobsthalOblongContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasRange"

class "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucas::widget::lucas.dart::NumberSequenceLucasContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lucky_numbers::widget::lucky_numbers.dart::NumberSequenceLuckyNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelRange"

class "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::lychrel::widget::lychrel.dart::NumberSequenceLychrelContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneRange"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne::widget::mersenne.dart::NumberSequenceMersenneContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatRange"

class "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersennefermat::widget::mersennefermat.dart::NumberSequenceMersenneFermatContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsRange"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_exponents::widget::mersenne_exponents.dart::NumberSequenceMersenneExponentsContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesRange"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::mersenne_primes::widget::mersenne_primes.dart::NumberSequenceMersennePrimesContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellRange"

class "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell::widget::pell.dart::NumberSequencePellContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasRange"

class "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::pell_lucas::widget::pell_lucas.dart::NumberSequencePellLucasContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::perfect_numbers::widget::perfect_numbers.dart::NumberSequencePerfectNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesRange"

class "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::permutable_primes::widget::permutable_primes.dart::NumberSequencePermutablePrimesContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::primarypseudoperfect_numbers::widget::primarypseudoperfect_numbers.dart::NumberSequencePrimaryPseudoPerfectNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanRange"

class "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::recaman::widget::recaman.dart::NumberSequenceRecamanContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::sublime_numbers::widget::sublime_numbers.dart::NumberSequenceSublimeNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::superperfect_numbers::widget::superperfect_numbers.dart::NumberSequenceSuperPerfectNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersCheckNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersRange" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" <|-- "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersRange"

class "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersNthNumber" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" <|-- "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersContainsDigits" {
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" <|-- "gc_wizard::tools::science_and_technology::number_sequences::weird_numbers::widget::weird_numbers.dart::NumberSequenceWeirdNumbersContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::PositionOfSequenceOutput" {
  +String number
  +int positionSequence
  +int positionDigits
}

class "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode" {
  +int index
  {static} +List<NumberSequencesMode> values
  {static} +NumberSequencesMode LUCAS
  {static} +NumberSequencesMode FIBONACCI
  {static} +NumberSequencesMode MERSENNE
  {static} +NumberSequencesMode MERSENNE_FERMAT
  {static} +NumberSequencesMode FERMAT
  {static} +NumberSequencesMode JACOBSTAHL
  {static} +NumberSequencesMode JACOBSTHAL_LUCAS
  {static} +NumberSequencesMode JACOBSTHAL_OBLONG
  {static} +NumberSequencesMode PELL
  {static} +NumberSequencesMode PELL_LUCAS
  {static} +NumberSequencesMode CATALAN
  {static} +NumberSequencesMode RECAMAN
  {static} +NumberSequencesMode BELL
  {static} +NumberSequencesMode FACTORIAL
  {static} +NumberSequencesMode MERSENNE_PRIMES
  {static} +NumberSequencesMode MERSENNE_EXPONENTS
  {static} +NumberSequencesMode PERFECT_NUMBERS
  {static} +NumberSequencesMode SUPERPERFECT_NUMBERS
  {static} +NumberSequencesMode PRIMARY_PSEUDOPERFECT_NUMBERS
  {static} +NumberSequencesMode WEIRD_NUMBERS
  {static} +NumberSequencesMode SUBLIME_NUMBERS
  {static} +NumberSequencesMode LYCHREL
  {static} +NumberSequencesMode PERMUTABLE_PRIMES
  {static} +NumberSequencesMode LUCKY_NUMBERS
  {static} +NumberSequencesMode HAPPY_NUMBERS
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" {
  +NumberSequencesMode mode
  +int maxIndex
  +_NumberSequenceCheckNumberState createState()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::NumberSequenceCheckNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::_NumberSequenceCheckNumberState" {
  -String _currentInputN
  +TextEditingController currentInputController
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::_NumberSequenceCheckNumberState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_check.dart::_NumberSequenceCheckNumberState"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" {
  +NumberSequencesMode mode
  +int maxIndex
  +_NumberSequenceContainsDigitsState createState()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::NumberSequenceContainsDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::_NumberSequenceContainsDigitsState" {
  +int currentInputN
  -Widget _currentOutput
  +Widget build()
  -void _buildOutput()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::_NumberSequenceContainsDigitsState" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_containsdigits.dart::_NumberSequenceContainsDigitsState"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" {
  +NumberSequencesMode mode
  +int maxDigits
  +_NumberSequenceDigitsState createState()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::NumberSequenceDigits"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::_NumberSequenceDigitsState" {
  -int _currentInputN
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_digits.dart::_NumberSequenceDigitsState"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" {
  +NumberSequencesMode mode
  +int maxIndex
  +_NumberSequenceNthNumberState createState()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::NumberSequenceNthNumber"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::_NumberSequenceNthNumberState" {
  -int _currentInputN
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_nthnumber.dart::_NumberSequenceNthNumberState"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" {
  +NumberSequencesMode mode
  +int maxIndex
  +_NumberSequenceRangeState createState()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange" o-- "gc_wizard::tools::science_and_technology::number_sequences::_common::logic::number_sequence.dart::NumberSequencesMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::NumberSequenceRange"

class "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::_NumberSequenceRangeState" {
  -int _currentInputStop
  -int _currentInputStart
  -Widget _currentOutput
  -TextEditingController _stopController
  +void initState()
  +void dispose()
  +Widget build()
  -void _buildOutput()
}

"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::_NumberSequenceRangeState" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::_NumberSequenceRangeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::number_sequences::_common::widget::numbersequences_range.dart::_NumberSequenceRangeState"

class "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeralbase_spinner.dart::NumeralBaseSpinner" {
  +void Function(int) onChanged
  +int value
  +_NumeralBaseSpinnerState createState()
}

"gc_wizard::tools::science_and_technology::numeral_bases::widget::numeralbase_spinner.dart::NumeralBaseSpinner" o-- "null::void Function(int)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeralbase_spinner.dart::NumeralBaseSpinner"

class "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeralbase_spinner.dart::_NumeralBaseSpinnerState" {
  -int? _currentValue
  +List<int> list2To62
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeralbase_spinner.dart::_NumeralBaseSpinnerState"

class "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::NumeralBases" {
  +_NumeralBasesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::NumeralBases"

class "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::_NumeralBasesState" {
  -TextEditingController _controller
  -String _currentInput
  -int _currentFromKey
  -int _currentToKey
  -GCWSwitchPosition _currentToMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::_NumeralBasesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::_NumeralBasesState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::numeral_bases::widget::numeral_bases.dart::_NumeralBasesState"

class "gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::AtomicNumbersToText" {
  +_AtomicNumbersToTextState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::AtomicNumbersToText"

class "gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::_AtomicNumbersToTextState" {
  -TextEditingController _encryptController
  -String _currentEncryptInput
  -List<int> _currentDecryptInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::_AtomicNumbersToTextState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::_AtomicNumbersToTextState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::periodic_table::atomic_numbers_to_text::widget::atomic_numbers_to_text.dart::_AtomicNumbersToTextState"

class "gc_wizard::tools::science_and_technology::periodic_table::periodic_table::widget::periodic_table.dart::PeriodicTable" {
  +_PeriodicTableState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::periodic_table::periodic_table::widget::periodic_table.dart::PeriodicTable"

class "gc_wizard::tools::science_and_technology::periodic_table::periodic_table::widget::periodic_table.dart::_PeriodicTableState" {
  -double _cellWidth
  -double _maxCellHeight
  -BorderSide _border
  +void initState()
  +void dispose()
  +Widget build()
  -Color _getColorByStateOfMatter()
  -Widget _buildElement()
  -Widget _buildGroupHeadlineElement()
  -Widget? _buildHeadlineElement()
  -List<Widget> _buildOutput()
  -Color _getColor()
  -int _legendWidth()
  -Widget? _getLegendElement()
  -PeriodicTableElement? _getElementAtPSECoordinate()
}

"gc_wizard::tools::science_and_technology::periodic_table::periodic_table::widget::periodic_table.dart::_PeriodicTableState" o-- "flutter::src::painting::borders.dart::BorderSide"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::periodic_table::periodic_table::widget::periodic_table.dart::_PeriodicTableState"

class "gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::PeriodicTableDataView" {
  +int atomicNumber
  +_PeriodicTableDataViewState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::PeriodicTableDataView"

class "gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::_PeriodicTableDataViewState" {
  -bool _newCategory
  -PeriodicTableCategory _currentCategory
  -Object _currentValueCategoryValue
  -List<GCWDropDownMenuItem<Object>> _currentValueCategoryListItems
  -GCWSwitchPosition _currentSortingOrder
  -Map<PeriodicTableCategory, String> _categories
  -Map<int, String> _elementNames
  -Map<int, String> _chemicalSymbols
  -Map<int, int> _atomicNumbers
  -List<int> _iupacGroups
  -List<int> _mainGroups
  -List<int> _subGroups
  -List<int> _periods
  -List<String> _iupacGroupNames
  -List<String> _statesOfMatter
  -bool _setSpecificValue
  {static} -List<PeriodicTableCategory> _valueCategories
  {static} -List<PeriodicTableCategory> _sortableCategories
  +void initState()
  +Widget build()
  -List<GCWDropDownMenuItem<Object>> _buildNonValueCategoryItems()
  -List<List<Object>> _buildGroupOutputs()
  -List<List<Object>> _buildValueOutputs()
  -String _temperatures()
  -Map<String, List<List<Object>>> _buildElementOutputs()
  -Widget _buildOutput()
  -void _showElement()
}

"gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::_PeriodicTableDataViewState" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableCategory"
"gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::_PeriodicTableDataViewState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::periodic_table::periodic_table_data_view::widget::periodic_table_data_view.dart::_PeriodicTableDataViewState"

class "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableElement" {
  +String name
  +String chemicalSymbol
  +int atomicNumber
  +double mass
  +double electronegativity
  +double meltingPoint
  +double boilingPoint
  +IUPACGroupName? iupacGroupName
  +bool isRadioactive
  +bool isSynthetic
  +int period
  +int iupacGroup
  +double density
  +int mostCommonIsotop
  +double halfLife
  +List<String> comments
  +int? mainGroup
  +int? subGroup
  +StateOfMatter stateOfMatter
  +String formattedHalfLife
  +String formattedDensity
  +String toString()
}

"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableElement" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::IUPACGroupName"
"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableElement" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::StateOfMatter"

class "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::GroupType" {
  +int index
  {static} +List<GroupType> values
  {static} +GroupType MAIN_GROUP
  {static} +GroupType SUB_GROUP
}

"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::GroupType" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::GroupType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::GroupType"

class "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::StateOfMatter" {
  +int index
  {static} +List<StateOfMatter> values
  {static} +StateOfMatter SOLID
  {static} +StateOfMatter LIQUID
  {static} +StateOfMatter GAS
  {static} +StateOfMatter UNKNOWN
}

"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::StateOfMatter" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::StateOfMatter"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::StateOfMatter"

class "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableCategory" {
  +int index
  {static} +List<PeriodicTableCategory> values
  {static} +PeriodicTableCategory ELEMENT_NAME
  {static} +PeriodicTableCategory CHEMICAL_SYMBOL
  {static} +PeriodicTableCategory ATOMIC_NUMBER
  {static} +PeriodicTableCategory MASS
  {static} +PeriodicTableCategory ELECTRONEGATIVITY
  {static} +PeriodicTableCategory MELTING_POINT
  {static} +PeriodicTableCategory BOILING_POINT
  {static} +PeriodicTableCategory IUPAC_GROUP_NAME
  {static} +PeriodicTableCategory IS_RADIOACTIVE
  {static} +PeriodicTableCategory IS_SYNTHETIC
  {static} +PeriodicTableCategory PERIOD
  {static} +PeriodicTableCategory IUPAC_GROUP
  {static} +PeriodicTableCategory DENSITY
  {static} +PeriodicTableCategory MOST_COMMON_ISOTOP
  {static} +PeriodicTableCategory HALF_LIFE
  {static} +PeriodicTableCategory MAIN_GROUP
  {static} +PeriodicTableCategory SUB_GROUP
  {static} +PeriodicTableCategory STATE_OF_MATTER
}

"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableCategory" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableCategory"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::PeriodicTableCategory"

class "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::IUPACGroupName" {
  +int index
  {static} +List<IUPACGroupName> values
  {static} +IUPACGroupName ALKALI_METALS
  {static} +IUPACGroupName ALKALINE_EARTH_METALS
  {static} +IUPACGroupName EARTH_METALS
  {static} +IUPACGroupName TETRELS
  {static} +IUPACGroupName PNICTOGENS
  {static} +IUPACGroupName CHALCOGENS
  {static} +IUPACGroupName HALOGENS
  {static} +IUPACGroupName NOBLE_GASES
  {static} +IUPACGroupName LANTHANIDES
  {static} +IUPACGroupName ACTINIDES
}

"gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::IUPACGroupName" o-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::IUPACGroupName"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::periodic_table::_common::logic::periodic_table.dart::IUPACGroupName"

class "gc_wizard::tools::science_and_technology::physical_constants::logic::physical_constants.dart::PhysicalConstant" {
  +String symbol
  +String value
  +int? exponent
  +String? standard_uncertainty
  +String? unit
}

class "gc_wizard::tools::science_and_technology::physical_constants::widget::physical_constants.dart::PhysicalConstants" {
  +_PhysicalConstantsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::physical_constants::widget::physical_constants.dart::PhysicalConstants"

class "gc_wizard::tools::science_and_technology::physical_constants::widget::physical_constants.dart::_PhysicalConstantsState" {
  -String _currentConstant
  -List<String> _constants
  +Widget build()
  -Widget _buildOutput()
  -Widget _buildExponent()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::physical_constants::widget::physical_constants.dart::_PhysicalConstantsState"

class "gc_wizard::tools::science_and_technology::piano::logic::piano.dart::PianoKey" {
  +String number
  +String color
  +String frequency
  +String helmholtz
  +String scientific
  +String german
  +String midi
  +String latin
  +String getField()
}

class "gc_wizard::tools::science_and_technology::piano::logic::piano.dart::fields" {
  +int index
  {static} +List<fields> values
  {static} +fields color
  {static} +fields frequency
  {static} +fields helmholtz
  {static} +fields scientific
  {static} +fields german
  {static} +fields midi
  {static} +fields latin
}

"gc_wizard::tools::science_and_technology::piano::logic::piano.dart::fields" o-- "gc_wizard::tools::science_and_technology::piano::logic::piano.dart::fields"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::piano::logic::piano.dart::fields"

class "gc_wizard::tools::science_and_technology::piano::widget::piano.dart::Piano" {
  +_PianoState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::piano::widget::piano.dart::Piano"

class "gc_wizard::tools::science_and_technology::piano::widget::piano.dart::_PianoState" {
  -int _currentSort
  -int _currentIndex
  -List<String> _currentSortList
  -GCWSwitchPosition _currentColor
  -bool _isColorSort
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::piano::widget::piano.dart::_PianoState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::piano::widget::piano.dart::_PianoState"

class "gc_wizard::tools::science_and_technology::primes::primes_integerfactorization::widget::primes_integerfactorization.dart::IntegerFactorization" {
  +String? numberLabel
  +_IntegerFactorizationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::primes::primes_integerfactorization::widget::primes_integerfactorization.dart::IntegerFactorization"

class "gc_wizard::tools::science_and_technology::primes::primes_integerfactorization::widget::primes_integerfactorization.dart::_IntegerFactorizationState" {
  -int _currentNumber
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::primes::primes_integerfactorization::widget::primes_integerfactorization.dart::_IntegerFactorizationState"

class "gc_wizard::tools::science_and_technology::primes::primes_isprime::widget::primes_isprime.dart::IsPrime" {
  +_IsPrimeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::primes::primes_isprime::widget::primes_isprime.dart::IsPrime"

class "gc_wizard::tools::science_and_technology::primes::primes_isprime::widget::primes_isprime.dart::_IsPrimeState" {
  -int _currentNumber
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::primes::primes_isprime::widget::primes_isprime.dart::_IsPrimeState"

class "gc_wizard::tools::science_and_technology::primes::primes_nearestprime::widget::primes_nearestprime.dart::NearestPrime" {
  +_NearestPrimeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::primes::primes_nearestprime::widget::primes_nearestprime.dart::NearestPrime"

class "gc_wizard::tools::science_and_technology::primes::primes_nearestprime::widget::primes_nearestprime.dart::_NearestPrimeState" {
  -int _currentNumber
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::primes::primes_nearestprime::widget::primes_nearestprime.dart::_NearestPrimeState"

class "gc_wizard::tools::science_and_technology::primes::primes_nthprime::widget::primes_nthprime.dart::NthPrime" {
  +_NthPrimeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::primes::primes_nthprime::widget::primes_nthprime.dart::NthPrime"

class "gc_wizard::tools::science_and_technology::primes::primes_nthprime::widget::primes_nthprime.dart::_NthPrimeState" {
  -int _currentNumber
  +void initState()
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::primes::primes_nthprime::widget::primes_nthprime.dart::_NthPrimeState"

class "gc_wizard::tools::science_and_technology::primes::primes_primeindex::widget::primes_primeindex.dart::PrimeIndex" {
  +_PrimeIndexState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::primes::primes_primeindex::widget::primes_primeindex.dart::PrimeIndex"

class "gc_wizard::tools::science_and_technology::primes::primes_primeindex::widget::primes_primeindex.dart::_PrimeIndexState" {
  -int _currentNumber
  +void initState()
  +Widget build()
  -String _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::primes::primes_primeindex::widget::primes_primeindex.dart::_PrimeIndexState"

class "gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::Projectiles" {
  +_ProjectilesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::Projectiles"

class "gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::_ProjectilesState" {
  -UnitCategory<Unit> _currentMode
  -GCWUnitsValue<Unit> _currentOutputUnit
  -double _currentInputMass
  -double _currentInputVelocity
  -double _currentInputEnergy
  -Map<UnitCategory<Unit>, String> _calculateProjectilesModeItems
  +void initState()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::_ProjectilesState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<Unit>"
"gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::_ProjectilesState" o-- "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue<Unit>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::projectiles::widget::projectiles.dart::_ProjectilesState"

class "gc_wizard::tools::science_and_technology::quadratic_equation::widget::quadratic_equation.dart::QuadraticEquation" {
  +_QuadraticEquationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::quadratic_equation::widget::quadratic_equation.dart::QuadraticEquation"

class "gc_wizard::tools::science_and_technology::quadratic_equation::widget::quadratic_equation.dart::_QuadraticEquationState" {
  -String _currentA
  -String _currentB
  -String _currentC
  -TextEditingController _aController
  -TextEditingController _bController
  -TextEditingController _cController
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::quadratic_equation::widget::quadratic_equation.dart::_QuadraticEquationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::quadratic_equation::widget::quadratic_equation.dart::_QuadraticEquationState"

class "gc_wizard::tools::science_and_technology::recycling::widget::recycling.dart::Recycling" {
  +_RecyclingState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::recycling::widget::recycling.dart::Recycling"

class "gc_wizard::tools::science_and_technology::recycling::widget::recycling.dart::_RecyclingState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::recycling::widget::recycling.dart::_RecyclingState"

class "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::ResistorColorCodeCalculator" {
  +_ResistorColorCodeCalculatorState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::ResistorColorCodeCalculator"

class "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorCodeCalculatorState" {
  -int _currentNumberBands
  -bool _changed
  -_ResistorBandDropDown _resistorBandDropDown_fourBands_first
  -_ResistorBandDropDown _resistorBandDropDown_fourBands_second
  -_ResistorBandDropDown _resistorBandDropDown_fourBands_multiplier
  -_ResistorBandDropDown _resistorBandDropDown_fourBands_tolerance
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_first
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_second
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_third
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_multiplier
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_tolerance
  -_ResistorBandDropDown _resistorBandDropDown_sixBands_temperatureCoefficient
  -ResistorBandColor _currentResistorColor_fourBands_first
  -ResistorBandColor _currentResistorColor_fourBands_second
  -ResistorBandColor _currentResistorColor_fourBands_multiplier
  -ResistorBandColor _currentResistorColor_fourBands_tolerance
  -ResistorBandColor _currentResistorColor_sixBands_first
  -ResistorBandColor _currentResistorColor_sixBands_second
  -ResistorBandColor _currentResistorColor_sixBands_third
  -ResistorBandColor _currentResistorColor_sixBands_multiplier
  -ResistorBandColor _currentResistorColor_sixBands_tolerance
  -ResistorBandColor _currentResistorColor_sixBands_temperatureCoefficient
  -UnitPrefix _currentPrefix
  +void initState()
  +Widget build()
  -void _buildResistors()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorCodeCalculatorState" o-- "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown"
"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorCodeCalculatorState" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor"
"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorCodeCalculatorState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorCodeCalculatorState"

class "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown" {
  +void Function(ResistorBandColor) onChanged
  +ResistorBandType type
  +int numberBands
  +ResistorBandColor color
  +_ResistorBandDropDownState createState()
}

"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown" o-- "null::void Function(ResistorBandColor)"
"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandType"
"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDown"

class "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDownState" {
  {static} -Map<ResistorBandColor, _ResistorColorAttributes> _colorAttributes
  -List<ResistorBandColor> _colors
  -Map<ResistorBandColor, double> _colorValues
  -ResistorBandColor _currentValue
  +void initState()
  +Widget build()
  -void _setCurrentValueAndEmitOnChange()
  -Widget _formatValue()
}

"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDownState" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorBandDropDownState"

class "gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorAttributes" {
  +String name
  +Color backgroundColor
  +Color textColor
}

"gc_wizard::tools::science_and_technology::resistor::resistor_colorcodecalculator::widget::resistor_colorcodecalculator.dart::_ResistorColorAttributes" o-- "dart::ui::Color"

class "gc_wizard::tools::science_and_technology::resistor::resistor_eia96::widget::resistor_eia96.dart::ResistorEIA96" {
  +_ResistorEIA96State createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_eia96::widget::resistor_eia96.dart::ResistorEIA96"

class "gc_wizard::tools::science_and_technology::resistor::resistor_eia96::widget::resistor_eia96.dart::_ResistorEIA96State" {
  -int _currentCode
  -String _currentMultiplicator
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildSuperscriptedRichText()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::resistor::resistor_eia96::widget::resistor_eia96.dart::_ResistorEIA96State"

class "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorValue" {
  +double? value
  +double? tolerance
  +double? temperatureCoefficient
  +List<double> tolerancedValueInterval
}

class "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandType" {
  +int index
  {static} +List<ResistorBandType> values
  {static} +ResistorBandType FIRST
  {static} +ResistorBandType SECOND
  {static} +ResistorBandType THIRD
  {static} +ResistorBandType MULTIPLIER
  {static} +ResistorBandType TOLERANCE
  {static} +ResistorBandType TEMPERATURE_COEFFICIENT
}

"gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandType" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandType"

class "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor" {
  +int index
  {static} +List<ResistorBandColor> values
  {static} +ResistorBandColor PINK
  {static} +ResistorBandColor SILVER
  {static} +ResistorBandColor GOLD
  {static} +ResistorBandColor BLACK
  {static} +ResistorBandColor BROWN
  {static} +ResistorBandColor RED
  {static} +ResistorBandColor ORANGE
  {static} +ResistorBandColor YELLOW
  {static} +ResistorBandColor GREEN
  {static} +ResistorBandColor BLUE
  {static} +ResistorBandColor VIOLET
  {static} +ResistorBandColor GREY
  {static} +ResistorBandColor WHITE
}

"gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor" o-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::resistor::_common::logic::resistor.dart::ResistorBandColor"

class "gc_wizard::tools::science_and_technology::segment_display::14_segment_display::widget::14_segment_display.dart::FourteenSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::14_segment_display::widget::14_segment_display.dart::FourteenSegmentDisplay"

class "gc_wizard::tools::science_and_technology::segment_display::14_segment_display::widget::fourteen_segments.dart::FourteenSegments" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::14_segment_display::widget::fourteen_segments.dart::FourteenSegments"

class "gc_wizard::tools::science_and_technology::segment_display::16_segment_display::widget::16_segment_display.dart::SixteenSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::16_segment_display::widget::16_segment_display.dart::SixteenSegmentDisplay"

class "gc_wizard::tools::science_and_technology::segment_display::16_segment_display::widget::sixteen_segments.dart::SixteenSegments" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::16_segment_display::widget::sixteen_segments.dart::SixteenSegments"

class "gc_wizard::tools::science_and_technology::segment_display::7_segment_display::widget::7_segment_display.dart::SevenSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::7_segment_display::widget::7_segment_display.dart::SevenSegmentDisplay"

class "gc_wizard::tools::science_and_technology::segment_display::7_segment_display::widget::seven_segments.dart::SevenSegments" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::segment_display::7_segment_display::widget::seven_segments.dart::SevenSegments"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" {
  +List<List<String>> displays
  +void addEmptySegment()
  +void addSegment()
  +void addSegments()
  +void removeLastSegment()
  +void replaceLastSegment()
  +List<String> buildOutput()
  {static} +Segments Empty()
}

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsText" {
  +String text
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsText"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsCodpoints" {
  +String codepoints
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsText" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsCodpoints"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsChars" {
  +List<String> chars
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsChars"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsVigesimal" {
  +List<int> numbers
  +BigInt vigesimal
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsVigesimal"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsSexagesimal" {
  +List<int> numbers
  +BigInt sexagesimal
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentsSexagesimal"

class "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType" {
  +int index
  {static} +List<SegmentDisplayType> values
  {static} +SegmentDisplayType SEVEN
  {static} +SegmentDisplayType FOURTEEN
  {static} +SegmentDisplayType SIXTEEN
  {static} +SegmentDisplayType CUSTOM
  {static} +SegmentDisplayType SEVENAUTO
  {static} +SegmentDisplayType SEVEN12345678
  {static} +SegmentDisplayType FOURTEENAUTO
  {static} +SegmentDisplayType FOURTEEN_HIJ_G1G2_MLK
  {static} +SegmentDisplayType FOURTEEN_PGH_NJ_MLK
  {static} +SegmentDisplayType FOURTEEN_KMN_G1G2_RST
  {static} +SegmentDisplayType FOURTEEN_GHJ_PK_NMI
  {static} +SegmentDisplayType FOURTEEN_HJK_G1G2_NML
  {static} +SegmentDisplayType FOURTEEN_HJK_GM_QPN
  {static} +SegmentDisplayType SIXTEENAUTO
  {static} +SegmentDisplayType SIXTEEN_KMN_UP_TSR
}

"gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" {
  +Map<String, bool> initialSegments
  +double aspectRatio
  +SegmentDisplayType type
  +Map<String, bool> segments
  +bool readOnly
  +void Function(Map<String, bool>)? onChanged
  +void Function(GCWTouchCanvas, Size, Map<String, bool>, void Function(String, bool), Color, Color)? customPaint
  +_NSegmentDisplayState nSegmentDisplayState
  +dynamic renderedImage
  +_NSegmentDisplayState createState()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" o-- "null::void Function(Map<String, bool>)"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" o-- "null::void Function(GCWTouchCanvas, Size, Map<String, bool>, void Function(String, bool), Color, Color)"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::_NSegmentDisplayState"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::_NSegmentDisplayState" {
  -Map<String, bool> _segments
  +dynamic renderedImage
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::_NSegmentDisplayState"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::SegmentDisplayOutput" {
  +bool upsideDownButton
  +NSegmentDisplay Function(Map<String, bool>, bool) segmentFunction
  +Segments segments
  +bool readOnly
  +Widget? trailing
  +bool showZoomButtons
  +double? verticalSymbolPadding
  +double? horizontalSymbolPadding
  +_SegmentDisplayOutputState createState()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::SegmentDisplayOutput" o-- "null::NSegmentDisplay Function(Map<String, bool>, bool)"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::SegmentDisplayOutput" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::SegmentDisplayOutput" o-- "flutter::src::widgets::framework.dart::Widget"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::SegmentDisplayOutput"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::_SegmentDisplayOutputState" {
  -bool _currentUpsideDown
  -List<NSegmentDisplay> _displays
  +void initState()
  +Widget build()
  -Widget _buildDigitalOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_output.dart::_SegmentDisplayOutputState"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" {
  +void Function(String, bool) setSegmentState
  +Map<String, bool> segments
  +BuildContext context
  +SegmentDisplayType type
  +void Function(GCWTouchCanvas, Size, Map<String, bool>, void Function(String, bool), Color, Color)? customPaint
  +Color segment_color_on
  +Color segment_color_off
  -GCWTouchCanvas _touchCanvas
  +void paint()
  -void _paintSixteenSegmentDisplay()
  -void _paintFourteenSegmentDisplay()
  -void _paintSevenSegmentDisplay()
  +bool shouldRepaint()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "null::void Function(String, bool)"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "flutter::src::widgets::framework.dart::BuildContext"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "null::void Function(GCWTouchCanvas, Size, Map<String, bool>, void Function(String, bool), Color, Color)"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "dart::ui::Color"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter" o-- "gc_wizard::common_widgets::gcw_touchcanvas.dart::GCWTouchCanvas"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segmentdisplay_painter.dart::SegmentDisplayPainter"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay" {
  +SegmentDisplayType type
  +_SegmentDisplayState createState()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::SegmentDisplay"

class "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState" {
  -TextEditingController _inputEncodeController
  -TextEditingController _inputDecodeController
  -String _currentEncodeInput
  -String _currentDecodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentEncryptMode
  -SegmentDisplayType _currentDecryptType
  -SegmentDisplayType _currentEncryptType
  -List<GCWDropDownMenuItem<SegmentDisplayType>> _dropDownList
  -List<Widget> _selectedItemList
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildEncrypt()
  -Widget _buildDecrypt()
  -Widget _buildVisualEncryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
  -Widget _buildDropDown()
  -void _initDropDownList()
  -void _addDropDownEntry()
  -Widget _buildDropDownMenuItem()
  -Widget _buildDropDownSelectedItem()
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::SegmentDisplayType"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::segment_display::_common::widget::segment_display.dart::_SegmentDisplayState"

class "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCrypt" {
  +SpellingAlphabetsCryptState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCrypt"

class "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCryptState" {
  -SPELLING _currentLanguage
  -bool _setDefaultLanguage
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -GCWSwitchPosition _currentMode
  -String _currentEncode
  -String _currentDecode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -SPELLING _defaultLanguage()
}

"gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCryptState" o-- "gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING"
"gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCryptState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCryptState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_crypt::widget::spelling_alphabets_crypt.dart::SpellingAlphabetsCryptState"

class "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_list::widget::spelling_alphabets_list.dart::SpellingAlphabetsList" {
  +SpellingAlphabetsListState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_list::widget::spelling_alphabets_list.dart::SpellingAlphabetsList"

class "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_list::widget::spelling_alphabets_list.dart::SpellingAlphabetsListState" {
  -SPELLING _currentLanguage
  -bool _setDefaultLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
  -SPELLING _defaultLanguage()
}

"gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_list::widget::spelling_alphabets_list.dart::SpellingAlphabetsListState" o-- "gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::spelling_alphabets::spelling_alphabets_list::widget::spelling_alphabets_list.dart::SpellingAlphabetsListState"

class "gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING" {
  +int index
  {static} +List<SPELLING> values
  {static} +SPELLING ICAO1947
  {static} +SPELLING NATO
  {static} +SPELLING USNAVY1908_1
  {static} +SPELLING USNAVY1908_2
  {static} +SPELLING USNAVY1920
  {static} +SPELLING USNAVY1942
  {static} +SPELLING APCO1967
  {static} +SPELLING APCO1974
  {static} +SPELLING ARRL1930
  {static} +SPELLING ARRL1936
  {static} +SPELLING ARRL1946
  {static} +SPELLING ARRL1970
  {static} +SPELLING ARRLDX
  {static} +SPELLING EPO
  {static} +SPELLING FRA
  {static} +SPELLING FRABEL
  {static} +SPELLING CHE
  {static} +SPELLING FRACAN
  {static} +SPELLING DEU1950
  {static} +SPELLING DEU2022
  {static} +SPELLING DEUDDR
  {static} +SPELLING AUT
  {static} +SPELLING NLD
  {static} +SPELLING BEL
  {static} +SPELLING ITA
  {static} +SPELLING ESP
  {static} +SPELLING BRA
  {static} +SPELLING POR
  {static} +SPELLING SWE
  {static} +SPELLING DNK
  {static} +SPELLING NOR
  {static} +SPELLING FIN
  {static} +SPELLING TUR
  {static} +SPELLING ROU
  {static} +SPELLING CZE
  {static} +SPELLING YUG
  {static} +SPELLING SRB
  {static} +SPELLING SLO
  {static} +SPELLING POL
  {static} +SPELLING SVK
  {static} +SPELLING RUS
  {static} +SPELLING RUSLAT
  {static} +SPELLING GRC
  {static} +SPELLING GRCLAT
}

"gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING" o-- "gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::spelling_alphabets::_common::spelling_alphabets_data.dart::SPELLING"

class "gc_wizard::tools::science_and_technology::telegraphs::chappe::logic::chappe.dart::ChappeCodebook" {
  +int index
  {static} +List<ChappeCodebook> values
  {static} +ChappeCodebook ALPHABET
  {static} +ChappeCodebook CODEPOINTS
  {static} +ChappeCodebook DIGITS
  {static} +ChappeCodebook KULIBIN
}

"gc_wizard::tools::science_and_technology::telegraphs::chappe::logic::chappe.dart::ChappeCodebook" o-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::logic::chappe.dart::ChappeCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::logic::chappe.dart::ChappeCodebook"

class "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::ChappeTelegraph" {
  +_ChappeTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::ChappeTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -TextEditingController _decodeInputController
  -String _currentDecodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDecodeMode
  -ChappeCodebook _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState" o-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::logic::chappe.dart::ChappeCodebook"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::chappe::widget::chappe.dart::_ChappeTelegraphSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::logic::edelcrantz_telegraph.dart::EdelcrantzCodebook" {
  +int index
  {static} +List<EdelcrantzCodebook> values
  {static} +EdelcrantzCodebook YEAR_1795
  {static} +EdelcrantzCodebook YEAR_1808
  {static} +EdelcrantzCodebook MUSEUM
}

"gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::logic::edelcrantz_telegraph.dart::EdelcrantzCodebook" o-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::logic::edelcrantz_telegraph.dart::EdelcrantzCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::logic::edelcrantz_telegraph.dart::EdelcrantzCodebook"

class "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::EdelcrantzTelegraph" {
  +_EdelcrantzTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::EdelcrantzTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeInputController
  -TextEditingController _decodeInputController
  -String _currentDecodeInput
  -EdelcrantzCodebook _currentLanguage
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentTime
  -GCWSwitchPosition _currentDecodeMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Segments _buildShutters()
  -String _buildCodelets()
  -String _segmentsToText()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState" o-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::logic::edelcrantz_telegraph.dart::EdelcrantzCodebook"
"gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::edelcrantz::widget::edelcrantz.dart::_EdelcrantzSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode" {
  +int index
  {static} +List<GaussWeberTelegraphMode> values
  {static} +GaussWeberTelegraphMode GAUSS_WEBER_ORIGINAL
  {static} +GaussWeberTelegraphMode GAUSS_WEBER_ALTERNATIVE
  {static} +GaussWeberTelegraphMode SCHILLING_CANSTATT
  {static} +GaussWeberTelegraphMode WHEATSTONE_COOKE_5
  {static} +GaussWeberTelegraphMode WHEATSTONE_COOKE_2
  {static} +GaussWeberTelegraphMode WHEATSTONE_COOKE_1
}

"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode" o-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode"

class "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::GaussWeberTelegraph" {
  +GaussWeberTelegraphMode mode
  +_GaussWeberTelegraphState createState()
}

"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::GaussWeberTelegraph" o-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::GaussWeberTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::_GaussWeberTelegraphState" {
  -TextEditingController _decodeController
  -TextEditingController _encodeController
  -String _currentDecodeInput
  -String _currentEncodeInput
  -GCWSwitchPosition _currentMode
  -GaussWeberTelegraphMode _currentNeedleNumber
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::_GaussWeberTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::_GaussWeberTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::_GaussWeberTelegraphState" o-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::logic::gauss_weber_telegraph.dart::GaussWeberTelegraphMode"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::_GaussWeberTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::murray::logic::murray.dart::MurrayCodebook" {
  +int index
  {static} +List<MurrayCodebook> values
  {static} +MurrayCodebook ROYALNAVY
  {static} +MurrayCodebook GEOCACHING
  {static} +MurrayCodebook FISCHER
  {static} +MurrayCodebook ROUCOUX
  {static} +MurrayCodebook GEOCACHINGTOOLBOX_1
  {static} +MurrayCodebook GEOCACHINGTOOLBOX_2
  {static} +MurrayCodebook GEOCACHINGTOOLBOX_3
  {static} +MurrayCodebook MYGEOTOOLS
}

"gc_wizard::tools::science_and_technology::telegraphs::murray::logic::murray.dart::MurrayCodebook" o-- "gc_wizard::tools::science_and_technology::telegraphs::murray::logic::murray.dart::MurrayCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::telegraphs::murray::logic::murray.dart::MurrayCodebook"

class "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::MurrayTelegraph" {
  +_MurrayTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::MurrayTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -MurrayCodebook _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState" o-- "gc_wizard::tools::science_and_technology::telegraphs::murray::logic::murray.dart::MurrayCodebook"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurrayTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurraySegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::murray::widget::murray.dart::_MurraySegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::OhlsenTelegraph" {
  +_OhlsenTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::OhlsenTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _dncodeInputController
  -TextEditingController _decodeInputController
  -String _currentDecodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDecodeMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::ohlsen_telegraph::widget::ohlsen_telegraph.dart::_OhlsenSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::PasleyTelegraph" {
  +_PasleyTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::PasleyTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::pasley_telegraph::widget::pasley_telegraph.dart::_PasleyTelegraphSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::PophamTelegraph" {
  +_PophamTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::PophamTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::popham_telegraph::widget::popham_telegraph.dart::_PophamTelegraphSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::PrussiaTelegraph" {
  +_PrussiaTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::PrussiaTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::_PrussiaTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeInputController
  -TextEditingController _decodeInputController
  -String _currentDecodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentDecodeMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Segments _buildShutters()
  -String _buildCodelets()
  -String _segmentsToText()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::_PrussiaTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::_PrussiaTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::_PrussiaTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::_PrussiaTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::PrussiaTelegraphSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::prussia_telegraph::widget::prussia_telegraph.dart::PrussiaTelegraphSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::schilling_canstatt_telegraph::widget::schilling_canstatt_telegraph.dart::SchillingCanstattTelegraph" {
}

"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::GaussWeberTelegraph" <|-- "gc_wizard::tools::science_and_technology::telegraphs::schilling_canstatt_telegraph::widget::schilling_canstatt_telegraph.dart::SchillingCanstattTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::SemaphoreTelegraph" {
  +_SemaphoreTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::SemaphoreTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreTelegraphState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -Widget _buildOutput()
  -String _normalize()
}

"gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreTelegraphState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreTelegraphState"

class "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreSegmentDisplay" {
}

"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::telegraphs::semaphore::widget::semaphore.dart::_SemaphoreSegmentDisplay"

class "gc_wizard::tools::science_and_technology::telegraphs::wheatstone_cooke_5_needles::widget::wheatstone_cooke_5_needles.dart::WheatstoneCookeNeedleTelegraph" {
}

"gc_wizard::tools::science_and_technology::telegraphs::gauss_weber_telegraph::widget::gauss_weber_telegraph.dart::GaussWeberTelegraph" <|-- "gc_wizard::tools::science_and_technology::telegraphs::wheatstone_cooke_5_needles::widget::wheatstone_cooke_5_needles.dart::WheatstoneCookeNeedleTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::wigwag::logic::wigwag.dart::WigWagCodebook" {
  +int index
  {static} +List<WigWagCodebook> values
  {static} +WigWagCodebook ORIGINAL
  {static} +WigWagCodebook GENERALSERVICECODE1860
  {static} +WigWagCodebook GENERALSERVICECODE1872
}

"gc_wizard::tools::science_and_technology::telegraphs::wigwag::logic::wigwag.dart::WigWagCodebook" o-- "gc_wizard::tools::science_and_technology::telegraphs::wigwag::logic::wigwag.dart::WigWagCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::telegraphs::wigwag::logic::wigwag.dart::WigWagCodebook"

class "gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::WigWagSemaphoreTelegraph" {
  +_WigWagSemaphoreTelegraphState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::WigWagSemaphoreTelegraph"

class "gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -IntegerListText _currentDecodeInput
  -GCWSwitchPosition _currentMode
  -WigWagCodebook _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -String _calculateOutput()
}

"gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerListText"
"gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState" o-- "gc_wizard::tools::science_and_technology::telegraphs::wigwag::logic::wigwag.dart::WigWagCodebook"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::telegraphs::wigwag::widget::wigwag.dart::_WigWagSemaphoreTelegraphState"

class "gc_wizard::tools::science_and_technology::teletypewriter::algol::widget::algol.dart::ALGOL" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::algol::widget::algol.dart::ALGOL"

class "gc_wizard::tools::science_and_technology::teletypewriter::ancient_teletypewriter::widget::ancient_teletypewriter.dart::AncientTeletypewriter" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ancient_teletypewriter::widget::ancient_teletypewriter.dart::AncientTeletypewriter"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt1::widget::ccitt1.dart::CCITT1" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt1::widget::ccitt1.dart::CCITT1"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt2::widget::ccitt2.dart::CCITT2" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt2::widget::ccitt2.dart::CCITT2"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt3::widget::ccitt3.dart::CCITT3" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt3::widget::ccitt3.dart::CCITT3"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt4::widget::ccitt4.dart::CCITT4" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt4::widget::ccitt4.dart::CCITT4"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt5::widget::ccitt5.dart::CCITT5" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt5::widget::ccitt5.dart::CCITT5"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt_ccir476::widget::ccitt_ccir476.dart::CCIR476" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt_ccir476::widget::ccitt_ccir476.dart::CCIR476"

class "gc_wizard::tools::science_and_technology::teletypewriter::ccitt_teletypewriter::widget::ccitt_teletypewriter.dart::CCITTTeletypewriter" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::ccitt_teletypewriter::widget::ccitt_teletypewriter.dart::CCITTTeletypewriter"

class "gc_wizard::tools::science_and_technology::teletypewriter::illiac::widget::illiac.dart::ILLIAC" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::illiac::widget::illiac.dart::ILLIAC"

class "gc_wizard::tools::science_and_technology::teletypewriter::other_teletypewriter::widget::other_teletypewriter.dart::OtherTeletypewriter" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::other_teletypewriter::widget::other_teletypewriter.dart::OtherTeletypewriter"

class "gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::TeletypewriterPunchTape" {
  +_TeletypewriterPunchTapeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::TeletypewriterPunchTape"

class "gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState" {
  -String _currentEncodeInput
  -TextEditingController _encodeController
  -TextEditingController _decodeInputController
  -String _currentDecodeInput
  -Segments _currentDisplays
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentOrderMode
  -GCWSwitchPosition _currentDecodeMode
  -GCWSwitchPosition _currentDecodeTextMode
  -TeletypewriterCodebook _currentCode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildVisualDecryption()
  -Widget _buildDigitalOutput()
  -String _decimalToBinary()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::punchtape::widget::punchtape.dart::_TeletypewriterPunchTapeState"

class "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput" {
  +bool upsideDownButton
  +NSegmentDisplay Function(Map<String, bool>, bool, TeletypewriterCodebook) segmentFunction
  +Segments segments
  +bool readOnly
  +Widget? trailing
  +TeletypewriterCodebook codeBook
  +_PunchtapeSegmentDisplayOutputState createState()
}

"gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput" o-- "null::NSegmentDisplay Function(Map<String, bool>, bool, TeletypewriterCodebook)"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput" o-- "gc_wizard::tools::science_and_technology::segment_display::_common::logic::segment_display.dart::Segments"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::PunchtapeSegmentDisplayOutput"

class "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::_PunchtapeSegmentDisplayOutputState" {
  -bool _currentUpsideDown
  -List<NSegmentDisplay> _displays
  +void initState()
  +Widget build()
  -Widget _buildDigitalOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segmentdisplay_output.dart::_PunchtapeSegmentDisplayOutputState"

class "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segment_display.dart::PUNCHTAPESegmentDisplay" {
  +TeletypewriterCodebook codeBook
}

"gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segment_display.dart::PUNCHTAPESegmentDisplay" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"gc_wizard::tools::science_and_technology::segment_display::_common::widget::n_segment_display.dart::NSegmentDisplay" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::punchtape_segment_display::widget::punchtape_segment_display.dart::PUNCHTAPESegmentDisplay"

class "gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" {
  +TeletypewriterCodebook defaultCodebook
  +Map<TeletypewriterCodebook, CodebookConfig>? codebook
  +_TeletypewriterState createState()
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter"

class "gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentEncodeInput
  -IntegerListText _currentDecodeInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentRadix
  -TeletypewriterCodebook _currentCode
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState" o-- "gc_wizard::utils::complex_return_types.dart::IntegerListText"
"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::_TeletypewriterState"

class "gc_wizard::tools::science_and_technology::teletypewriter::tts::widget::tts.dart::TTS" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::tts::widget::tts.dart::TTS"

class "gc_wizard::tools::science_and_technology::teletypewriter::z22::widget::z22.dart::Z22" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::z22::widget::z22.dart::Z22"

class "gc_wizard::tools::science_and_technology::teletypewriter::zc1::widget::zc1.dart::ZC1" {
}

"gc_wizard::tools::science_and_technology::teletypewriter::teletypewriter::widget::teletypewriter.dart::Teletypewriter" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::zc1::widget::zc1.dart::ZC1"

class "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::CodebookConfig" {
  +String title
  +String subtitle
}

class "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::PunchtapeConfig" {
  +int punchHoles
  +int sprocketHole
}

class "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook" {
  +int index
  {static} +List<TeletypewriterCodebook> values
  {static} +TeletypewriterCodebook BAUDOT_12345
  {static} +TeletypewriterCodebook BAUDOT_54321
  {static} +TeletypewriterCodebook BAUDOT_54123
  {static} +TeletypewriterCodebook SIEMENS
  {static} +TeletypewriterCodebook MURRAY
  {static} +TeletypewriterCodebook WESTERNUNION
  {static} +TeletypewriterCodebook CCITT_ITA1_1926
  {static} +TeletypewriterCodebook CCITT_ITA1_1929
  {static} +TeletypewriterCodebook CCITT_ITA1_EU
  {static} +TeletypewriterCodebook CCITT_ITA1_UK
  {static} +TeletypewriterCodebook CCITT_ITA2_1929
  {static} +TeletypewriterCodebook CCITT_ITA2_1931
  {static} +TeletypewriterCodebook CCITT_ITA2_MTK2
  {static} +TeletypewriterCodebook CCITT_ITA2_USTTY
  {static} +TeletypewriterCodebook CCITT_ITA3
  {static} +TeletypewriterCodebook CCITT_ITA4
  {static} +TeletypewriterCodebook CCITT_IA5
  {static} +TeletypewriterCodebook CCIR476
  {static} +TeletypewriterCodebook ZC1
  {static} +TeletypewriterCodebook Z22
  {static} +TeletypewriterCodebook TTS
  {static} +TeletypewriterCodebook ILLIAC
  {static} +TeletypewriterCodebook ALGOL
}

"gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook" o-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::teletypewriter::_common::logic::teletypewriter.dart::TeletypewriterCodebook"

class "gc_wizard::tools::science_and_technology::ufi::logic::ufi.dart::_UFI_COUNTRY_DEFINITION" {
  +String countryCode
  +String countryName
  +String ufiRegExp
  +int countryGroupCodeG
  +int numberOfBitsForCountryCodeB
  +int? countryCodeC
  +BigInt Function(String)? specialEncode
  +String Function(String) decode
}

"gc_wizard::tools::science_and_technology::ufi::logic::ufi.dart::_UFI_COUNTRY_DEFINITION" o-- "null::BigInt Function(String)"
"gc_wizard::tools::science_and_technology::ufi::logic::ufi.dart::_UFI_COUNTRY_DEFINITION" o-- "null::String Function(String)"

class "gc_wizard::tools::science_and_technology::ufi::logic::ufi.dart::UFI" {
  +String countryCode
  +String vatNumber
  +String formulationNumber
}

class "gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::UFI" {
  +_UFIState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::UFI"

class "gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState" {
  -GCWSwitchPosition _currentMode
  -String _currentCountryCode
  -String _currentVat
  -String _currentFormulation
  -TextEditingController _vatController
  -TextEditingController _formulationController
  -String _currentUFICode
  -TextEditingController _ufiCodeController
  -Map<String, String> _countries
  -Widget _outputEncode
  -Widget _outputDecode
  -GCWMaskTextInputFormatter _ufiMaskFormatter
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _calculateDecode()
  -Widget _calculateEncode()
}

"gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState" o-- "flutter::src::widgets::framework.dart::Widget"
"gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState" o-- "gc_wizard::common_widgets::text_input_formatters::wrapper_for_masktextinputformatter.dart::GCWMaskTextInputFormatter"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::ufi::widget::ufi.dart::_UFIState"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::acceleration.dart::Acceleration" {
  +double Function(double) toMetersPerSquareSecond
  +double Function(double) fromMetersPerSquareSecond
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::acceleration.dart::Acceleration" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::acceleration.dart::Acceleration"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::angle.dart::Angle" {
  +double Function(double) toDegree
  +double Function(double) fromDegree
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::angle.dart::Angle" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::angle.dart::Angle"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::area.dart::Area" {
  +double Function(double) toSquareMeter
  +double Function(double) fromSquareMeter
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::area.dart::Area" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::area.dart::Area"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::density.dart::Density" {
  +double Function(double) toGramPerCubicMeter
  +double Function(double) fromGramPerCubicMeter
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::density.dart::Density" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::density.dart::Density"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::energy.dart::Energy" {
  +double Function(double) toJoule
  +double Function(double) fromJoule
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::energy.dart::Energy" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::energy.dart::Energy"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::force.dart::Force" {
  +double Function(double) toNewton
  +double Function(double) fromNewton
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::force.dart::Force" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::force.dart::Force"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::humidity.dart::Humidity" {
  +double Function(double) toDegree
  +double Function(double) fromDegree
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::humidity.dart::Humidity" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::humidity.dart::Humidity"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length" {
  +double Function(double) toMeter
  +double Function(double) fromMeter
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::length.dart::Length"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::mass.dart::Mass" {
  +double Function(double) toGram
  +double Function(double) fromGram
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::mass.dart::Mass" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::mass.dart::Mass"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::power.dart::Power" {
  +double Function(double) toWatt
  +double Function(double) fromWatt
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::power.dart::Power" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::power.dart::Power"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::pressure.dart::Pressure" {
  +double Function(double) toPascal
  +double Function(double) fromPascal
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::pressure.dart::Pressure" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::pressure.dart::Pressure"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::temperature.dart::Temperature" {
  +double Function(double) toKelvin
  +double Function(double) fromKelvin
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::temperature.dart::Temperature" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::temperature.dart::Temperature"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::time.dart::Time" {
  +double Function(double) toSeconds
  +double Function(double) fromSeconds
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::time.dart::Time" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::time.dart::Time"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::typography.dart::Typography" {
  +double Function(double) toDTPPt
  +double Function(double) fromDTPPt
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::typography.dart::Typography" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::typography.dart::Typography"

abstract class "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" {
  +String name
  +String symbol
  +bool isReferenceUnit
  +double Function(double) toReference
  +double Function(double) fromReference
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" o-- "null::double Function(double)"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory" {
  +String key
  +List<T> units
  +T defaultUnit
  +bool usesPrefixes
}

class "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_prefix.dart::UnitPrefix" {
  +String key
  +String symbol
  +double value
}

class "gc_wizard::tools::science_and_technology::unit_converter::logic::velocity.dart::Velocity" {
  +double Function(double) toMS
  +double Function(double) fromMS
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::velocity.dart::Velocity" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::velocity.dart::Velocity"

class "gc_wizard::tools::science_and_technology::unit_converter::logic::volume.dart::Volume" {
  +double Function(double) toCubicMeter
  +double Function(double) fromCubicMeter
}

"gc_wizard::tools::science_and_technology::unit_converter::logic::volume.dart::Volume" o-- "null::double Function(double)"
"gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit" <|-- "gc_wizard::tools::science_and_technology::unit_converter::logic::volume.dart::Volume"

class "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitCategoryConfig" {
  +UnitCategory<Unit> category
  +Unit default_from_unit
  +Unit default_to_unit
}

"gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitCategoryConfig" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<Unit>"
"gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitCategoryConfig" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit.dart::Unit"

class "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitConverter" {
  +_UnitConverterState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitConverter"

class "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::_UnitConverterState" {
  -double _currentValue
  -GCWUnitsValue<Unit> _currentFromUnit
  -GCWUnitsValue<Unit> _currentToUnit
  -UnitCategoryConfig _currentCategory
  +void initState()
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::_UnitConverterState" o-- "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue<Unit>"
"gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::_UnitConverterState" o-- "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::UnitCategoryConfig"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::unit_converter::widget::unit_converter.dart::_UnitConverterState"

class "gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::VanityMultitap" {
  +_VanityMultitapState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::VanityMultitap"

class "gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::_VanityMultitapState" {
  -TextEditingController _encodeController
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -String _currentEncodeInput
  -GCWSwitchPosition _currentMode
  -GCWSwitchPosition _currentSimpleMode
  -PhoneModel _currentSimpleModel
  -PhoneModel _currentModel
  -int _currentLanguageId
  +void initState()
  +void dispose()
  +Widget build()
  -String _buildSpaceDescription()
  -String _buildLanguageExamples()
  -String _getLanguageString()
  -Widget _buildOutput()
  -String _getModeString()
}

"gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::_VanityMultitapState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::_VanityMultitapState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::_VanityMultitapState" o-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneModel"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_multitap::widget::vanity_multitap.dart::_VanityMultitapState"

class "gc_wizard::tools::science_and_technology::vanity::vanity_singletap::widget::vanity_singletap.dart::VanitySingletap" {
  +_VanitySingletapState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_singletap::widget::vanity_singletap.dart::VanitySingletap"

class "gc_wizard::tools::science_and_technology::vanity::vanity_singletap::widget::vanity_singletap.dart::_VanitySingletapState" {
  -String _currentInput
  -PhoneModel _currentModel
  +Widget build()
  -String _buildOutput()
}

"gc_wizard::tools::science_and_technology::vanity::vanity_singletap::widget::vanity_singletap.dart::_VanitySingletapState" o-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneModel"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_singletap::widget::vanity_singletap.dart::_VanitySingletapState"

class "gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::VanityWordsList" {
  +_VanityWordsListState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::VanityWordsList"

class "gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::_VanityWordsListState" {
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -NumeralWordsLanguage _currentLanguage
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::_VanityWordsListState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::_VanityWordsListState" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_words_list::widget::vanity_words_list.dart::_VanityWordsListState"

class "gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::VanityWordsTextSearch" {
  +_VanityWordsTextSearchState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::VanityWordsTextSearch"

class "gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::_VanityWordsTextSearchState" {
  -TextEditingController _decodeController
  -String _currentDecodeInput
  -NumeralWordsLanguage _currentLanguage
  -Map<NumeralWordsLanguage, String> _languageList
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::_VanityWordsTextSearchState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::_VanityWordsTextSearchState" o-- "gc_wizard::tools::crypto_and_encodings::numeral_words::_common::logic::numeral_words.dart::NumeralWordsLanguage"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::vanity::vanity_words_search::widget::vanity_words_search.dart::_VanityWordsTextSearchState"

class "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneModel" {
  +String name
  +Map<String, Map<String, String>> defaultCaseStateModel
  +Map<PhoneInputLanguage, Map<String, Map<String, String>>>? specificCaseStateModels
  +List<Map<PhoneCaseMode, Map<String, String>>> characterMap
  +List<List<PhoneInputLanguage>> languages
  +String toString()
}

class "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneInputLanguage" {
  +int index
  {static} +List<PhoneInputLanguage> values
  {static} +PhoneInputLanguage EXTENDED
  {static} +PhoneInputLanguage UNSPECIFIED
  {static} +PhoneInputLanguage ENGLISH
  {static} +PhoneInputLanguage GERMAN
  {static} +PhoneInputLanguage PORTUGUESE
  {static} +PhoneInputLanguage FRENCH
  {static} +PhoneInputLanguage ITALIAN
  {static} +PhoneInputLanguage TURKISH
  {static} +PhoneInputLanguage BULGARIAN
  {static} +PhoneInputLanguage SERBIAN
  {static} +PhoneInputLanguage GREEK
  {static} +PhoneInputLanguage CROATIAN
  {static} +PhoneInputLanguage ROMANIAN
  {static} +PhoneInputLanguage DUTCH
  {static} +PhoneInputLanguage DANISH
  {static} +PhoneInputLanguage NORWEGIAN
  {static} +PhoneInputLanguage SWEDISH
  {static} +PhoneInputLanguage FINNISH
  {static} +PhoneInputLanguage SPANISH
  {static} +PhoneInputLanguage SLOVENIAN
}

"gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneInputLanguage" o-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneInputLanguage"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneInputLanguage"

class "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneCaseMode" {
  +int index
  {static} +List<PhoneCaseMode> values
  {static} +PhoneCaseMode LOWER_CASE
  {static} +PhoneCaseMode UPPER_CASE
  {static} +PhoneCaseMode CAMEL_CASE
  {static} +PhoneCaseMode NUMBERS
  {static} +PhoneCaseMode SPECIAL_CHARACTERS
}

"gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneCaseMode" o-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneCaseMode"
"dart::core::Enum" <|-- "gc_wizard::tools::science_and_technology::vanity::_common::logic::phone_models.dart::PhoneCaseMode"

class "gc_wizard::tools::science_and_technology::vanity::_common::logic::vanity_words.dart::VanityWordsDecodeOutput" {
  +String number
  +String numWord
  +String digit
  +bool ambigous
}

class "gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::VelocityAcceleration" {
  +_VelocityAccelerationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::VelocityAcceleration"

class "gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::_VelocityAccelerationState" {
  -UnitCategory<Unit> _currentMode
  -double _currentDistance
  -double _currentTime
  -double _currentVelocity
  -double _currentAcceleration
  -bool _currentAccelerationMode
  -GCWSwitchPosition _currentAccelerationCalcMode
  -GCWUnitsValue<Unit> _currentOutputUnit
  -Map<UnitCategory<Unit>, String> _modes
  +void initState()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::_VelocityAccelerationState" o-- "gc_wizard::tools::science_and_technology::unit_converter::logic::unit_category.dart::UnitCategory<Unit>"
"gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::_VelocityAccelerationState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::_VelocityAccelerationState" o-- "gc_wizard::common_widgets::units::gcw_units.dart::GCWUnitsValue<Unit>"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::velocity_acceleration::widget::velocity_acceleration.dart::_VelocityAccelerationState"

class "gc_wizard::tools::science_and_technology::weather_symbols::widget::weather_symbols.dart::WeatherSymbols" {
  +_WeatherSymbolsState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::science_and_technology::weather_symbols::widget::weather_symbols.dart::WeatherSymbols"

class "gc_wizard::tools::science_and_technology::weather_symbols::widget::weather_symbols.dart::_WeatherSymbolsState" {
  -String _currentWeatherSymbolClazz
  -Map<String, SymbolTableData> _data
  +void initState()
  -dynamic _initialize()
  +Widget build()
  -Widget _buildOutput()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::science_and_technology::weather_symbols::widget::weather_symbols.dart::_WeatherSymbolsState"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_colorhoney::widget::symbol_table_encryption_colorhoney.dart::ColorHoneySymbolTableEncryption" {
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_colorhoney::widget::symbol_table_encryption_colorhoney.dart::ColorHoneySymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_colortokki::widget::symbol_table_encryption_colortokki.dart::ColorTokkiSymbolTableEncryption" {
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_colortokki::widget::symbol_table_encryption_colortokki.dart::ColorTokkiSymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" {
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTablePaintData" {
  +Canvas canvas
  +SymbolTableData data
  +SymbolTableEncryptionSizes sizes
  +List<int> imageIndexes
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTablePaintData" o-- "dart::ui::Canvas"
"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTablePaintData" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTablePaintData" o-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionSizes"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTableEncryptionPainter" {
  +SymbolTablePaintData paintData
  +SymbolTableEncryption encryption
  +void paint()
  +bool shouldRepaint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTableEncryptionPainter" o-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTablePaintData"
"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTableEncryptionPainter" o-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption"
"flutter::src::rendering::custom_paint.dart::CustomPainter" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_paint_data::widget::symbol_table_encryption_paint_data.dart::SymbolTableEncryptionPainter"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_puzzlecode::widget::symbol_table_encryption_puzzlecode.dart::PuzzleSymbolTableEncryption" {
  -double _ABS_TILEOFFSET
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_puzzlecode::widget::symbol_table_encryption_puzzlecode.dart::PuzzleSymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionSizes" {
  +int countImages
  +int countColumns
  +double symbolWidth
  +double symbolHeight
  +double canvasWidth
  +double canvasHeight
  +double? relativeBorderWidth
  +SymbolTableEncryptionMode mode
  +double absoluteBorderWidth
  +double symbolAspectRatio
  +int countRows
  +double tileWidth
  +double tileHeight
  +void initialize()
  -void _setCountRows()
  -void _setBorderWidth()
  -void _setSymbolSizes()
  -void _setCanvasWidth()
  -void _setCanvasHeight()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionSizes" o-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionMode"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionMode" {
  +int index
  {static} +List<SymbolTableEncryptionMode> values
  {static} +SymbolTableEncryptionMode FIXED_SYMBOLSIZE
  {static} +SymbolTableEncryptionMode FIXED_CANVASWIDTH
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionMode" o-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionMode"
"dart::core::Enum" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_sizes::widget::symbol_table_encryption_sizes.dart::SymbolTableEncryptionMode"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_stipplecode::widget::symbol_table_encryption_stipplecode.dart::StippleSymbolTableEncryption" {
  -double _OFFSET_VERTICAL
  -double _OFFSET_HORIZONTAL
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_stipplecode::widget::symbol_table_encryption_stipplecode.dart::StippleSymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_tenctonese::widget::symbol_table_encryption_tenctonese.dart::TenctoneseSymbolTableEncryption" {
  -double _SCALE
  +SymbolTableEncryptionSizes sizes()
  +Canvas paint()
}

"gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_default::widget::symbol_table_encryption_default.dart::SymbolTableEncryption" <|-- "gc_wizard::tools::symbol_tables::special_encryption_painters::symbol_table_encryption_tenctonese::widget::symbol_table_encryption_tenctonese.dart::TenctoneseSymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::ReplaceSymbolsInput" {
  +Uint8List image
  +int blackLevel
  +double similarityLevel
  +int gap
  +SymbolReplacerImage? symbolImage
  +List<Map<String, SymbolReplacerSymbolData>>? compareSymbols
  +double similarityCompareLevel
  +double? mergeDistance
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::ReplaceSymbolsInput" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::ReplaceSymbolsInput" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage" {
  -Uint8List _image
  -Image? _bmp
  -Uint8List? _outputImageBytes
  +List<Map<String, SymbolReplacerSymbolData>>? compareSymbols
  -List<Map<String, SymbolReplacerSymbolData>>? _usedCompareSymbols
  -SymbolReplacerImage? _usedCompareSymbolsImage
  -double? _similarityCompareLevel
  +List<_SymbolRow> lines
  -List<_SymbolRow> _sourceLines
  +List<Symbol> symbols
  -List<Symbol> _sourceSymbols
  +List<SymbolGroup> symbolGroups
  -List<double>? _mergeDistanceSteps
  -double? _mergeDistance
  {static} -int _mergeDistanceInit
  -int? _blackLevel
  -double? _similarityLevel
  -int? _gap
  +double symbolScale
  +Uint8List getImage()
  +Uint8List? getBorderImage()
  +SymbolReplacerImage? getCompareImage()
  +String? getTextOutput()
  +void splitAndGroupSymbols()
  +void addToGroup()
  -void _removeSymbolFromGroup()
  +void removeFromGroup()
  -void _addSymbolToGroup()
  +void buildSymbolGroup()
  +void mergeSymbolGroups()
  +void resetGroupText()
  -SymbolReplacerImage? _buildCompareSymbols()
  -double _useCompareSymbols()
  -Image? _mergeBorderData()
  -void _splitToLines()
  -void _cutLine()
  -void _groupSymbols()
  {static} -bool _emptyRow()
  {static} -bool _blackPixel()
  {static} -int _referenceWidth()
  +double? nextMergeDistance()
  +double? prevMergeDistance()
  -double? _mergeSymbolsDefault()
  -List<double> _calcMergeDistances()
  -void _mergeSymbols()
  -_SymbolRow? _searchSymbolRow()
  -SymbolGroup? _searchSymbolGroup()
  +void mergeSymbol()
  -void _cloneSourceLines()
  +double calcSymbolScale()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage" o-- "image::src::image::image.dart::Image"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::_SymbolRow" {
  +Rectangle<double> size
  +Image bmp
  +List<Symbol> symbols
  -_SymbolRow _clone()
  -void _splitLineToSymbols()
  -List<int> _removeGapColumns()
  -int _countEmptyColumns()
  -Rectangle<double> _cutSymbol()
  -Rectangle<double> _boundingBox()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::_SymbolRow" o-- "dart::math::Rectangle<double>"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::_SymbolRow" o-- "image::src::image::image.dart::Image"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" {
  +Offset refPoint
  +Image bmp
  +_SymbolRow row
  +int? hash
  +SymbolGroup? symbolGroup
  -Uint8List? _outputImageBytes
  -Symbol _clone()
  +double distance()
  -Rectangle<double> _borderRectangle()
  -Rectangle<double> _borderRectangleWithOffset()
  {static} -double _rectangleDistance()
  +Uint8List getImage()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" o-- "dart::ui::Offset"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" o-- "image::src::image::image.dart::Image"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::_SymbolRow"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolGroup"
"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::Symbol" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolGroup" {
  +String? text
  +bool viewGroupImage
  +List<Symbol> symbols
  +SymbolReplacerSymbolData? compareSymbol
  +Uint8List? getImage()
  +SymbolReplacerSymbolData? getCompareSymbol()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolGroup" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolData"

class "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::ImageHashing" {
  {static} -Uint8List _bitCounts
  {static} -int _BitCount()
  {static} +int AverageHash()
  {static} +double Similarity()
  {static} +double SimilarityImage()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::ImageHashing" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::SymbolReplacer" {
  +GCWFile? platformFile
  +String? symbolKey
  +_SymbolReplacerState createState()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::SymbolReplacer" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::SymbolReplacer"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" {
  {static} +String no_symbol_table_key
  +SymbolReplacerSymbolTableViewData no_symbol_table
  -SymbolReplacerImage? _symbolImage
  -GCWFile? _platformFile
  -double _blackLevel
  -double _similarityLevel
  -double _similarityCompareLevel
  -GCWSwitchPosition _currentSimpleMode
  -List<GCWDropDownMenuItem<SymbolReplacerSymbolTableViewData>> _compareSymbolItems
  -TextStyle _gcwTextStyle
  -TextStyle _descriptionTextStyle
  -SymbolReplacerSymbolTableViewData _currentSymbolTableViewData
  -Map<SubstitutionBreakerAlphabet, Quadgrams> _quadgrams
  -SubstitutionBreakerAlphabet _currentAlphabet
  -List<bool> _isLoading
  -double? _currentMergeDistance
  +bool init
  +void initState()
  +Widget build()
  -void _replaceSymbols()
  -dynamic _buildJobDataReplacer()
  -void _showOutput()
  -Widget _buildAdvancedModeControl()
  -Widget _buildSymbolTableConfig()
  -Widget _buildSymbolSizeRow()
  -Widget _buildSymbolTableDropDownRow()
  -Widget _buildOutput()
  -void _showAutoSearchDialog()
  -void _startSubstitutionBreaker()
  -void _startJobDataSearchSymbolTable()
  -void _initDropDownLists()
  -void _selectSymbolTableDataItem()
  -Widget _buildDropDownMenuItem()
  -dynamic _buildSubstitutionBreakerJobData()
  -void _showSubstitutionBreakerOutput()
  -dynamic _buildJobDataSearchSymbolTable()
  -void _showJobDataSearchSymbolTableOutput()
  -void _selectSymbolDataItem1()
  -void _navigateToSubPage()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableViewData"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState" o-- "gc_wizard::tools::crypto_and_encodings::general_codebreakers::substitution_breaker::logic::substitution_breaker_enums.dart::SubstitutionBreakerAlphabet"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer.dart::_SymbolReplacerState"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualControl" {
  +SymbolReplacerImage symbolImage
  +_SymbolReplacerManualControlState createState()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualControl" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualControl"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualControlState" {
  -Map<Symbol, Map<String, SymbolData>> _symbolMap
  -SymbolData? _selectedSymbolData
  -bool _removeActiv
  -bool _addActiv
  -TextEditingController _editValueController
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildMatrix()
  -void _selectGroupSymbols()
  -SymbolReplacerSymbolData? _getGroupSymbol()
  -Widget _buildEditRow()
  -Widget _identifiedSymbol()
  -void _navigateToSubPage()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualControlState" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolData"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualControlState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualControlState"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualSetter" {
  +SymbolReplacerImage symbolImage
  +List<Symbol> viewSymbols
  +_SymbolReplacerManualSetterState createState()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualSetter" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::logic::symbol_replacer.dart::SymbolReplacerImage"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::SymbolReplacerManualSetter"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualSetterState" {
  -Map<Symbol, Map<String, SymbolData>> _symbolMap
  -List<GCWDropDownMenuItem<Map<String, SymbolReplacerSymbolData>>> _symbolDataItems
  -TextStyle _gcwTextStyle
  -GCWSwitchPosition _currentMode
  -Map<String, SymbolReplacerSymbolData>? _currentSymbolData
  -bool _init
  -TextEditingController _editValueController
  +void initState()
  +void dispose()
  +Widget build()
  -void _fillSymbolMap()
  -void _fillSymbolDataItems()
  -Widget _buildMatrix()
  -void _selectSymbol()
  -void _setSelectedSymbolsText()
  -Widget _buildEditRow()
  -Widget _buildTextEditRow()
  -void _selectSymbolDataItem()
  -GCWDropDownMenuItem<Map<String, SymbolReplacerSymbolData>> _buildDropDownMenuItem()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualSetterState" o-- "flutter::src::painting::text_style.dart::TextStyle"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualSetterState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualSetterState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_manual_control.dart::_SymbolReplacerManualSetterState"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableViewData" {
  +String symbolKey
  +GCWSymbolContainer? icon
  +String? toolName
  +String? description
  +SymbolReplacerSymbolTableData? data
  +dynamic initialize()
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableViewData" o-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer"
"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableViewData" o-- "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableData"

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolTableData" {
  +String? symbolKey
  +List<Map<String, SymbolReplacerSymbolData>> images
}

class "gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolData" {
  +Uint8List? bytes
  +String? displayName
}

"gc_wizard::tools::symbol_tables::symbol_replacer::widget::symbol_replacer_symboldata.dart::SymbolReplacerSymbolData" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples.dart::SymbolTableExamples" {
  +List<String> symbolKeys
  +_SymbolTableExamplesState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples.dart::SymbolTableExamples"

class "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples.dart::_SymbolTableExamplesState" {
  -TextEditingController _controller
  -String _currentInput
  +List<String> symbolKeys
  +void initState()
  -dynamic _initialize()
  +void dispose()
  +Widget build()
  -Widget _createSymbols()
  -dynamic _loadSymbolData()
}

"gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples.dart::_SymbolTableExamplesState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples.dart::_SymbolTableExamplesState"

class "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples_select.dart::SymbolTableExamplesSelect" {
  +_SymbolTableExamplesSelectState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples_select.dart::SymbolTableExamplesSelect"

class "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples_select.dart::_SymbolTableExamplesSelectState" {
  +List<Map<String, SymbolData>> images
  +List<String> selectedSymbolTables
  +void initState()
  -String _pathKey()
  -String _symbolKey()
  -dynamic _initializeImages()
  +Widget build()
  -void _openInSymbolSearch()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::symbol_tables_examples_select::widget::symbol_tables_examples_select.dart::_SymbolTableExamplesSelectState"

class "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableConstants" {
  {static} +RegExp IMAGE_SUFFIXES
  {static} +RegExp ARCHIVE_SUFFIX
  {static} +String CONFIG_FILENAME
  {static} +String CONFIG_SPECIALMAPPINGS
  {static} +String CONFIG_KEEPCASE
  {static} +String CONFIG_TRANSLATE
  {static} +String CONFIG_TRANSLATION_PREFIX
  {static} +String CONFIG_CASESENSITIVE
  {static} +String CONFIG_IGNORE
}

class "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolData" {
  +String path
  +Uint8List bytes
  +bool primarySelected
  +bool secondarySelected
  +String? displayName
  +Image? standardImage
  +Image? specialEncryptionImage
  +Size? imageSize()
}

"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolData" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolData" o-- "dart::ui::Image"

class "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::_SymbolTableConfig" {
  +bool caseSensitive
  +List<String> ignore
  +Map<String, String> specialMappings
  +List<String> keepCase
  +List<String> translate
  +String translationPrefix
  +int Function(Map<String, SymbolData>, Map<String, SymbolData>)? sort
  +List<String> translateables
}

"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::_SymbolTableConfig" o-- "null::int Function(Map<String, SymbolData>, Map<String, SymbolData>)"

class "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData" {
  -BuildContext _context
  +String symbolKey
  -_SymbolTableConfig _config
  +List<Map<String, SymbolData>> images
  +int maxSymbolTextLength
  +dynamic initialize()
  +Size? imageSize()
  +bool isCaseSensitive()
  -String _pathKey()
  -dynamic _loadConfig()
  -String _createKey()
  -dynamic _initializeImages()
  -dynamic _initializeImage()
  +int defaultSymbolSort()
}

"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData" o-- "flutter::src::widgets::framework.dart::BuildContext"
"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::_SymbolTableConfig"

class "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::defaultSymbolTableData" {
}

"gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData" <|-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::defaultSymbolTableData"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer" {
  +Image symbol
  +Color? backgroundColor
  +Color? borderColor
  +double? borderWidth
  +bool showBackground
  +bool showBorder
  +_GCWSymbolContainerState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer" o-- "flutter::src::widgets::image.dart::Image"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer" o-- "dart::ui::Color"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::GCWSymbolContainer"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::_GCWSymbolContainerState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_container.dart::_GCWSymbolContainerState"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption" {
  +int countColumns
  +MediaQueryData mediaQueryData
  +SymbolTableData data
  +void Function() onChanged
  +String? Function(String)? onAfterDecrypt
  +_GCWSymbolTableDecryptionState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption" o-- "flutter::src::widgets::media_query.dart::MediaQueryData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption" o-- "null::void Function()"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption" o-- "null::String Function(String)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::GCWSymbolTableDecryption"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::_GCWSymbolTableDecryptionState" {
  -String _decryptionOutput
  -SymbolTableData _data
  -ScrollController _scrollController
  +void initState()
  +void dispose()
  -void _scrollToBottom()
  +Widget build()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::_GCWSymbolTableDecryptionState" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::_GCWSymbolTableDecryptionState" o-- "flutter::src::widgets::scroll_controller.dart::ScrollController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_decryption.dart::_GCWSymbolTableDecryptionState"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption" {
  +int countColumns
  +MediaQueryData mediaQueryData
  +SymbolTableData data
  +String symbolKey
  +void Function() onChanged
  +String Function(String)? onBeforeEncrypt
  +bool alwaysIgnoreUnknown
  +_GCWSymbolTableEncryptionState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption" o-- "flutter::src::widgets::media_query.dart::MediaQueryData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption" o-- "null::void Function()"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption" o-- "null::String Function(String)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::GCWSymbolTableEncryption"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::_GCWSymbolTableEncryptionState" {
  -String _currentEncryptionInput
  -TextEditingController _encryptionInputController
  -Map<String, int> _alphabetMap
  -bool _currentIgnoreUnknown
  -GCWSwitchPosition _currentSpecialEncryption
  -double _currentBorderWidth
  -SymbolTableData _data
  +void initState()
  +void dispose()
  -bool _hasSpecialEncryption()
  +Widget build()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::_GCWSymbolTableEncryptionState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::_GCWSymbolTableEncryptionState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::_GCWSymbolTableEncryptionState" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_encryption.dart::_GCWSymbolTableEncryptionState"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::GCWSymbolTableSymbolMatrix" {
  +int countColumns
  +MediaQueryData mediaQueryData
  +Iterable<Map<String, SymbolData>> imageData
  +bool selectable
  +void Function() onChanged
  +void Function(String, SymbolData) onSymbolTapped
  +bool overlayOn
  +String symbolKey
  +bool fixed
  +double scale
  +_GCWSymbolTableSymbolMatrixState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::GCWSymbolTableSymbolMatrix" o-- "flutter::src::widgets::media_query.dart::MediaQueryData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::GCWSymbolTableSymbolMatrix" o-- "null::void Function()"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::GCWSymbolTableSymbolMatrix" o-- "null::void Function(String, SymbolData)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::GCWSymbolTableSymbolMatrix"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::_GCWSymbolTableSymbolMatrixState" {
  -bool _currentShowOverlayedSymbols
  -Iterable<Map<String, SymbolData>> _imageData
  +void initState()
  +Widget build()
  -String _showSpaceSymbolInOverlay()
  -Widget _buildDecryptionButtonMatrix()
  +void openInSymbolReplacer()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_symbol_matrix.dart::_GCWSymbolTableSymbolMatrixState"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::GCWSymbolTableTextToSymbols" {
  +String? text
  +bool ignoreUnknown
  +int countColumns
  +SymbolTableData data
  +bool showExportButton
  +bool fixed
  +double? borderWidth
  +bool specialEncryption
  +_GCWSymbolTableTextToSymbolsState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::GCWSymbolTableTextToSymbols" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::GCWSymbolTableTextToSymbols"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::_GCWSymbolTableTextToSymbolsState" {
  -Map<String, int> _alphabetMap
  -bool _encryptionHasImages
  -SymbolTableData _data
  +void initState()
  +Widget build()
  -List<int> _getImageIndexes()
  -Widget _buildEncryptionOutput()
  -SymbolTableEncryption _symbolTableEncryption()
  -dynamic _exportEncryption()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::_GCWSymbolTableTextToSymbolsState" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_text_to_symbols.dart::_GCWSymbolTableTextToSymbolsState"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_tool.dart::GCWSymbolTableTool" {
  +String symbolKey
  +List<String> symbolSearchStrings
}

"gc_wizard::common_widgets::gcw_tool.dart::GCWTool" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_tool.dart::GCWSymbolTableTool"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::GCWSymbolTableZoomButtons" {
  +int countColumns
  +MediaQueryData mediaQueryData
  +void Function() onChanged
  +_GCWSymbolTableZoomButtonsState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::GCWSymbolTableZoomButtons" o-- "flutter::src::widgets::media_query.dart::MediaQueryData"
"gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::GCWSymbolTableZoomButtons" o-- "null::void Function()"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::GCWSymbolTableZoomButtons"

class "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::_GCWSymbolTableZoomButtonsState" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::gcw_symbol_table_zoom_buttons.dart::_GCWSymbolTableZoomButtonsState"

class "gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::SymbolTable" {
  +String symbolKey
  +String Function(String)? onDecrypt
  +String Function(String)? onEncrypt
  +bool alwaysIgnoreUnknown
  +_SymbolTableState createState()
}

"gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::SymbolTable" o-- "null::String Function(String)"
"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::SymbolTable"

class "gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::_SymbolTableState" {
  -GCWSwitchPosition _currentMode
  -SymbolTableData _data
  +void initState()
  -dynamic _initialize()
  +Widget build()
}

"gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::_SymbolTableState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::_SymbolTableState" o-- "gc_wizard::tools::symbol_tables::_common::logic::symbol_table_data.dart::SymbolTableData"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::symbol_tables::_common::widget::symbol_table.dart::_SymbolTableState"

class "gc_wizard::tools::uncategorized::zodiac::logic::zodiac.dart::ZodiacDate" {
  +int start_month
  +int start_day
  +int end_month
  +int end_day
}

class "gc_wizard::tools::uncategorized::zodiac::logic::zodiac.dart::ZodiacSign" {
  +ZodiacDate date
  +List<String> planet
  +int house
  +String element
  +String polarity
  +String quality
}

"gc_wizard::tools::uncategorized::zodiac::logic::zodiac.dart::ZodiacSign" o-- "gc_wizard::tools::uncategorized::zodiac::logic::zodiac.dart::ZodiacDate"

class "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::Zodiac" {
  +_ZodiacState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::Zodiac"

class "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZodiacState" {
  -GCWSwitchPosition _currentMode
  -int _currentZodiacSign
  -_ZODIACSIGNS_ATTRIBUTES _currentAttribute
  +Widget build()
  -String _createDateOutput()
  -String _createPlanetOutput()
  -Widget _buildOutput()
  -String _attributeName()
}

"gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZodiacState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZodiacState" o-- "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZODIACSIGNS_ATTRIBUTES"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZodiacState"

class "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZODIACSIGNS_ATTRIBUTES" {
  +int index
  {static} +List<_ZODIACSIGNS_ATTRIBUTES> values
  {static} +_ZODIACSIGNS_ATTRIBUTES date
  {static} +_ZODIACSIGNS_ATTRIBUTES house
  {static} +_ZODIACSIGNS_ATTRIBUTES element
  {static} +_ZODIACSIGNS_ATTRIBUTES quality
  {static} +_ZODIACSIGNS_ATTRIBUTES polarity
  {static} +_ZODIACSIGNS_ATTRIBUTES planet
}

"gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZODIACSIGNS_ATTRIBUTES" o-- "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZODIACSIGNS_ATTRIBUTES"
"dart::core::Enum" <|-- "gc_wizard::tools::uncategorized::zodiac::widget::zodiac.dart::_ZODIACSIGNS_ATTRIBUTES"

class "gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::EarwigoTextDeobfuscation" {
  +_EarwigoTextDeobfuscationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::EarwigoTextDeobfuscation"

class "gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::_EarwigoTextDeobfuscationState" {
  -TextEditingController _inputController
  -TextEditingController _inputObfuscateController
  -String _currentInput
  -String _currentObfuscateInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::_EarwigoTextDeobfuscationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::_EarwigoTextDeobfuscationState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::wherigo::earwigo_text_deobfuscation::widget::earwigo_text_deobfuscation.dart::_EarwigoTextDeobfuscationState"

class "gc_wizard::tools::wherigo::logic::earwigo_tools.dart::EARWIGO_DEOBFUSCATION" {
  +int index
  {static} +List<EARWIGO_DEOBFUSCATION> values
  {static} +EARWIGO_DEOBFUSCATION WWB_DEOBF
  {static} +EARWIGO_DEOBFUSCATION GSUB_WIG
  {static} +EARWIGO_DEOBFUSCATION URWIGO
}

"gc_wizard::tools::wherigo::logic::earwigo_tools.dart::EARWIGO_DEOBFUSCATION" o-- "gc_wizard::tools::wherigo::logic::earwigo_tools.dart::EARWIGO_DEOBFUSCATION"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::logic::earwigo_tools.dart::EARWIGO_DEOBFUSCATION"

class "gc_wizard::tools::wherigo::logic::urwigo_tools.dart::HASH" {
  +int index
  {static} +List<HASH> values
  {static} +HASH ALPHABETICAL
  {static} +HASH NUMERIC
}

"gc_wizard::tools::wherigo::logic::urwigo_tools.dart::HASH" o-- "gc_wizard::tools::wherigo::logic::urwigo_tools.dart::HASH"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::logic::urwigo_tools.dart::HASH"

class "gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::UrwigoHashBreaker" {
  +_UrwigoHashBreakerState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::UrwigoHashBreaker"

class "gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::_UrwigoHashBreakerState" {
  -int _currentInput
  -String _currentOutputNumeric
  -String _currentOutputAlphabetical
  -TextEditingController _inputController
  -String _currentTextInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::_UrwigoHashBreakerState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::_UrwigoHashBreakerState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::wherigo::urwigo_hashbreaker::widget::urwigo_hashbreaker.dart::_UrwigoHashBreakerState"

class "gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::UrwigoTextDeobfuscation" {
  +_UrwigoTextDeobfuscationState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::UrwigoTextDeobfuscation"

class "gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::_UrwigoTextDeobfuscationState" {
  -TextEditingController _inputController
  -TextEditingController _inputObfuscateController
  -TextEditingController _dtableController
  -String _currentInput
  -String _currentDTable
  -String _currentObfuscateInput
  -GCWSwitchPosition _currentMode
  +void initState()
  +void dispose()
  +Widget build()
  -Widget _buildOutput()
}

"gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::_UrwigoTextDeobfuscationState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::_UrwigoTextDeobfuscationState" o-- "gc_wizard::common_widgets::switches::gcw_twooptions_switch.dart::GCWSwitchPosition"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::wherigo::urwigo_text_deobfuscation::widget::urwigo_text_deobfuscation.dart::_UrwigoTextDeobfuscationState"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoStringOffset" {
  +String ASCIIZ
  +int offset
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoMediaFileHeader" {
  +int MediaFileID
  +int MediaFileAddress
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoMediaFileContent" {
  +int MediaFileID
  +int MediaFileType
  +Uint8List MediaFileBytes
  +int MediaFileLength
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoMediaFileContent" o-- "dart::typed_data::Uint8List"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoObjectData" {
  +String ObjectID
  +int ObjectIndex
  +String ObjectName
  +String ObjectMedia
  +WHERIGO_OBJECT_TYPE ObjectType
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoObjectData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT_TYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZonePoint" {
  +double Latitude
  +double Longitude
  +double Altitude
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZoneData" {
  +String ZoneLUAName
  +String ZoneID
  +String ZoneName
  +String ZoneDescription
  +String ZoneVisible
  +String ZoneMediaName
  +String ZoneIconName
  +String ZoneActive
  +String ZoneDistanceRange
  +String ZoneShowObjects
  +String ZoneProximityRange
  +WherigoZonePoint ZoneOriginalPoint
  +String ZoneDistanceRangeUOM
  +String ZoneProximityRangeUOM
  +String ZoneOutOfRange
  +String ZoneInRange
  +List<WherigoZonePoint> ZonePoints
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZoneData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZonePoint"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCharacterData" {
  +String CharacterLUAName
  +String CharacterID
  +String CharacterName
  +String CharacterDescription
  +String CharacterVisible
  +String CharacterMediaName
  +String CharacterIconName
  +String CharacterLocation
  +WherigoZonePoint CharacterZonepoint
  +String CharacterContainer
  +String CharacterGender
  +String CharacterType
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCharacterData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZonePoint"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoInputData" {
  +String InputLUAName
  +String InputID
  +String InputVariableID
  +String InputName
  +String InputDescription
  +String InputVisible
  +String InputMedia
  +String InputIcon
  +String InputType
  +String InputText
  +List<String> InputChoices
  +List<WherigoAnswerData> InputAnswers
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoAnswer" {
  +String InputFunction
  +List<WherigoAnswerData> InputAnswers
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoAnswerData" {
  +String AnswerAnswer
  +String AnswerHash
  +List<WherigoActionMessageElementData> AnswerActions
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoActionMessageElementData" {
  +WHERIGO_ACTIONMESSAGETYPE ActionMessageType
  +String ActionMessageContent
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoActionMessageElementData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ACTIONMESSAGETYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTaskData" {
  +String TaskLUAName
  +String TaskID
  +String TaskName
  +String TaskDescription
  +String TaskVisible
  +String TaskMedia
  +String TaskIcon
  +String TaskActive
  +String TaskComplete
  +String TaskCorrectstate
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoMediaData" {
  +String MediaLUAName
  +String MediaID
  +String MediaName
  +String MediaDescription
  +String MediaAltText
  +String MediaType
  +String MediaFilename
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoBuilderVariableData" {
  +String BuilderVariableID
  +String BuilderVariableName
  +String BuilderVariableType
  +String BuilderVariableData
  +String BuilderVariableDescription
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoVariableData" {
  +String VariableLUAName
  +String VariableName
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoObfuscationData" {
  +String ObfuscationTable
  +String ObfuscationName
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoItemData" {
  +String ItemLUAName
  +String ItemID
  +String ItemName
  +String ItemDescription
  +String ItemVisible
  +String ItemMedia
  +String ItemIcon
  +String ItemLocation
  +WherigoZonePoint ItemZonepoint
  +String ItemContainer
  +String ItemLocked
  +String ItemOpened
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoItemData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZonePoint"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTimerData" {
  +String TimerLUAName
  +String TimerID
  +String TimerName
  +String TimerDescription
  +String TimerVisible
  +String TimerDuration
  +String TimerType
}

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeGWC" {
  +String Signature
  +int NumberOfObjects
  +List<WherigoMediaFileHeader> MediaFilesHeaders
  +List<WherigoMediaFileContent> MediaFilesContents
  +int HeaderLength
  +int Splashscreen
  +int SplashscreenIcon
  +double Latitude
  +double Longitude
  +double Altitude
  +int DateOfCreation
  +String TypeOfCartridge
  +String Player
  +int PlayerID
  +String CartridgeLUAName
  +String CartridgeGUID
  +String CartridgeDescription
  +String StartingLocationDescription
  +String Version
  +String Author
  +String Company
  +String RecommendedDevice
  +int LengthOfCompletionCode
  +String CompletionCode
  +WHERIGO_ANALYSE_RESULT_STATUS ResultStatus
  +List<String> ResultsGWC
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeGWC" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeLUA" {
  +String LUAFile
  +String CartridgeLUAName
  +String CartridgeGUID
  +String ObfuscatorTable
  +String ObfuscatorFunction
  +List<WherigoCharacterData> Characters
  +List<WherigoItemData> Items
  +List<WherigoTaskData> Tasks
  +List<WherigoInputData> Inputs
  +List<WherigoZoneData> Zones
  +List<WherigoTimerData> Timers
  +List<WherigoMediaData> Media
  +List<List<WherigoActionMessageElementData>> Messages
  +List<WherigoVariableData> Variables
  +List<WherigoBuilderVariableData> BuilderVariables
  +Map<String, WherigoObjectData> NameToObject
  +WHERIGO_ANALYSE_RESULT_STATUS ResultStatus
  +List<String> ResultsLUA
  +WherigoZonePoint StartLocation
  +WHERIGO_BUILDER Builder
  +String BuilderVersion
  +String TargetDevice
  +String TargetDeviceVersion
  +String StateID
  +String CountryID
  +String UseLogging
  +String CreateDate
  +String PublishDate
  +String UpdateDate
  +String LastPlayedDate
  +int httpCode
  +String httpMessage
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeLUA" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeLUA" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZonePoint"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeLUA" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_BUILDER"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridge" {
  +WherigoCartridgeGWC cartridgeGWC
  +WherigoCartridgeLUA cartridgeLUA
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridge" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeGWC"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridge" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeLUA"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoJobData" {
  +Uint8List jobDataBytes
  +bool jobDataMode
  +WHERIGO_CARTRIDGE_DATA_TYPE jobDataType
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoJobData" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoJobData" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_CARTRIDGE_DATA_TYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" {
  +WherigoCartridgeGWC cartridgeGWC
  +WherigoTaskData cartridgeTestTask
  +WherigoTimerData cartridgeTestTimer
  +WherigoZoneData cartridgeTestZone
  +WherigoCharacterData cartridgeTestCharacter
  +WherigoItemData cartridgeTestItem
  +WherigoInputData cartridgeTestInput
  +WherigoMediaData cartridgeTestMedia
  +WherigoObfuscationData cartridgeTestObfuscation
  +List<WherigoVariableData> cartridgeTestVariable
  +List<WherigoBuilderVariableData> cartridgeTestBuilderVariable
  +List<List<WherigoActionMessageElementData>> cartridgeTestMessageDialog
  +WherigoAnswer cartridgeTestAnswers
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridgeGWC"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTaskData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTimerData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoZoneData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCharacterData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoItemData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoInputData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoMediaData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoObfuscationData"
"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoTest" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoAnswer"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT" {
  +int index
  {static} +List<WHERIGO_OBJECT> values
  {static} +WHERIGO_OBJECT NULL
  {static} +WHERIGO_OBJECT GWCFILE
  {static} +WHERIGO_OBJECT HEADER
  {static} +WHERIGO_OBJECT LUAFILE
  {static} +WHERIGO_OBJECT LUABYTECODE
  {static} +WHERIGO_OBJECT CHARACTER
  {static} +WHERIGO_OBJECT ITEMS
  {static} +WHERIGO_OBJECT ZONES
  {static} +WHERIGO_OBJECT INPUTS
  {static} +WHERIGO_OBJECT ANSWERS
  {static} +WHERIGO_OBJECT TASKS
  {static} +WHERIGO_OBJECT TIMERS
  {static} +WHERIGO_OBJECT OBFUSCATORTABLE
  {static} +WHERIGO_OBJECT MEDIAFILES
  {static} +WHERIGO_OBJECT MESSAGES
  {static} +WHERIGO_OBJECT VARIABLES
  {static} +WHERIGO_OBJECT BUILDERVARIABLES
  {static} +WHERIGO_OBJECT RESULTS_GWC
  {static} +WHERIGO_OBJECT RESULTS_LUA
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_FILE_LOAD_STATE" {
  +int index
  {static} +List<WHERIGO_FILE_LOAD_STATE> values
  {static} +WHERIGO_FILE_LOAD_STATE NULL
  {static} +WHERIGO_FILE_LOAD_STATE GWC
  {static} +WHERIGO_FILE_LOAD_STATE LUA
  {static} +WHERIGO_FILE_LOAD_STATE FULL
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_FILE_LOAD_STATE" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_FILE_LOAD_STATE"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_FILE_LOAD_STATE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_BUILDER" {
  +int index
  {static} +List<WHERIGO_BUILDER> values
  {static} +WHERIGO_BUILDER NONE
  {static} +WHERIGO_BUILDER EARWIGO
  {static} +WHERIGO_BUILDER URWIGO
  {static} +WHERIGO_BUILDER GROUNDSPEAK
  {static} +WHERIGO_BUILDER WHERIGOKIT
  {static} +WHERIGO_BUILDER UNKNOWN
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_BUILDER" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_BUILDER"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_BUILDER"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS" {
  +int index
  {static} +List<WHERIGO_ANALYSE_RESULT_STATUS> values
  {static} +WHERIGO_ANALYSE_RESULT_STATUS OK
  {static} +WHERIGO_ANALYSE_RESULT_STATUS ERROR_GWC
  {static} +WHERIGO_ANALYSE_RESULT_STATUS ERROR_LUA
  {static} +WHERIGO_ANALYSE_RESULT_STATUS ERROR_HTTP
  {static} +WHERIGO_ANALYSE_RESULT_STATUS NONE
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ANALYSE_RESULT_STATUS"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT_TYPE" {
  +int index
  {static} +List<WHERIGO_OBJECT_TYPE> values
  {static} +WHERIGO_OBJECT_TYPE NONE
  {static} +WHERIGO_OBJECT_TYPE MEDIA
  {static} +WHERIGO_OBJECT_TYPE CARTRIDGE
  {static} +WHERIGO_OBJECT_TYPE ZONE
  {static} +WHERIGO_OBJECT_TYPE CHARACTER
  {static} +WHERIGO_OBJECT_TYPE ITEM
  {static} +WHERIGO_OBJECT_TYPE TASK
  {static} +WHERIGO_OBJECT_TYPE VARIABLES
  {static} +WHERIGO_OBJECT_TYPE BUILDERVARIABLES
  {static} +WHERIGO_OBJECT_TYPE TIMER
  {static} +WHERIGO_OBJECT_TYPE INPUT
  {static} +WHERIGO_OBJECT_TYPE MESSAGES
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT_TYPE" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT_TYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT_TYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ACTIONMESSAGETYPE" {
  +int index
  {static} +List<WHERIGO_ACTIONMESSAGETYPE> values
  {static} +WHERIGO_ACTIONMESSAGETYPE NONE
  {static} +WHERIGO_ACTIONMESSAGETYPE TEXT
  {static} +WHERIGO_ACTIONMESSAGETYPE IMAGE
  {static} +WHERIGO_ACTIONMESSAGETYPE BUTTON
  {static} +WHERIGO_ACTIONMESSAGETYPE COMMAND
  {static} +WHERIGO_ACTIONMESSAGETYPE CASE
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ACTIONMESSAGETYPE" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ACTIONMESSAGETYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_ACTIONMESSAGETYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_CARTRIDGE_DATA_TYPE" {
  +int index
  {static} +List<WHERIGO_CARTRIDGE_DATA_TYPE> values
  {static} +WHERIGO_CARTRIDGE_DATA_TYPE NONE
  {static} +WHERIGO_CARTRIDGE_DATA_TYPE LUA
  {static} +WHERIGO_CARTRIDGE_DATA_TYPE GWC
}

"gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_CARTRIDGE_DATA_TYPE" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_CARTRIDGE_DATA_TYPE"
"dart::core::Enum" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_CARTRIDGE_DATA_TYPE"

class "gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::WherigoAnalyze" {
  +_WherigoAnalyzeState createState()
}

"flutter::src::widgets::framework.dart::StatefulWidget" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::WherigoAnalyze"

class "gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" {
  -Uint8List _GWCbytes
  -Uint8List _LUAbytes
  -List<GCWDropDownMenuItem<WHERIGO_OBJECT>> _displayCartridgeDataList
  -WHERIGO_FILE_LOAD_STATE _fileLoadedState
  -List<GCWMapPoint> _ZonePoints
  -List<GCWMapPolyline> _ZonePolylines
  -List<GCWMapPoint> _ItemPoints
  -List<GCWMapPoint> _CharacterPoints
  -WherigoCartridge _outData
  -WHERIGO_OBJECT _displayedCartridgeData
  -List<Widget> _GWCFileStructure
  -bool _currentDeObfuscate
  -bool _currentSyntaxHighlighting
  -bool _WherigoShowLUASourcecodeDialog
  -bool _getLUAOnline
  -TextEditingController _codeControllerHighlightedLUA
  -String _LUA_SourceCode
  -int _mediaFileIndex
  -int _zoneIndex
  -int _inputIndex
  -int _characterIndex
  -int _timerIndex
  -int _taskIndex
  -int _itemIndex
  -int _messageIndex
  -int _answerIndex
  -int _identifierIndex
  -int _builderIdentifierIndex
  +void initState()
  -void _askFoSyntaxHighlighting()
  -void _askForOnlineDecompiling()
  +void dispose()
  -void _setGWCData()
  -void _setLUAData()
  +Widget build()
  -Widget _widgetShowDropDown()
  -Widget _widgetOpenGWCFile()
  -Widget _widgetOpenLUAFile()
  -void _resetIndices()
  -Widget _buildOutput()
  -Widget _buildWidgetToDisplayAnalyzeResultsData()
  -Widget _buildWidgetToDisplayObfuscatorTableData()
  -Widget _buildWidgetToDisplayHeaderData()
  -Widget _buildWidgetToDisplayGCWFileData()
  -Widget _buildWidgetToDisplayLUAByteCodeData()
  -Widget _buildWidgetToDisplayMediaFilesData()
  -Widget _buildWidgetToDisplayLUAFileData()
  -Widget _buildWidgetToDisplayCharactersData()
  -Widget _buildWidgetToDisplayZonesData()
  -Widget _buildWidgetToDisplayInputsData()
  -Widget _buildWidgetToDisplayTasksData()
  -Widget _buildWidgetToDisplayTimersData()
  -Widget _buildWidgetToDisplayItemsData()
  -Widget _buildWidgetToDisplayMessagesData()
  -Widget _buildWidgetToDisplayIdentifierData()
  -Widget _buildWidgetToDisplayBuilderIdentifierData()
  -dynamic _exportFile()
  -dynamic _exportCoordinates()
  -void _openInMap()
  -void _analyseCartridgeFileAsync()
  -void _analyseGWCCartridgeFileAsync()
  -void _analyseLUACartridgeFileAsync()
  -dynamic _buildGwcJobData()
  -dynamic _buildLuaJobData()
  -void _showCartridgeOutputLUA()
  -void _showCartridgeOutputGWC()
  -bool _GCWandLUAareFromDifferentCartridges()
  -void _updateOutput()
  -void _buildItemPointsForMapExport()
  -void _buildCharacterPointsForMapExport()
  -void _buildZonesForMapExport()
  -String _normalizeLUA()
  -String _deObfuscate()
  -List<GCWMapPoint> _currentZonePoints()
  -List<GCWMapPolyline> _currentZonePolylines()
  -Uint8List _getBytes()
  -WherigoCartridgeLUA _resetLUA()
  -List<GCWDropDownMenuItem<WHERIGO_OBJECT>> _setDisplayCartridgeDataList()
}

"gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" o-- "dart::typed_data::Uint8List"
"gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_FILE_LOAD_STATE"
"gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WherigoCartridge"
"gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" o-- "gc_wizard::tools::wherigo::wherigo_analyze::logic::wherigo_analyze.dart::WHERIGO_OBJECT"
"gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState" o-- "flutter::src::widgets::editable_text.dart::TextEditingController"
"flutter::src::widgets::framework.dart::State" <|-- "gc_wizard::tools::wherigo::wherigo_analyze::widget::wherigo_analyze.dart::_WherigoAnalyzeState"

class "gc_wizard::utils::alphabets.dart::Alphabet" {
  +String key
  +String? name
  +AlphabetType type
  +Map<String, String> alphabet
}

"gc_wizard::utils::alphabets.dart::Alphabet" o-- "gc_wizard::utils::alphabets.dart::AlphabetType"

class "gc_wizard::utils::alphabets.dart::AlphabetType" {
  +int index
  {static} +List<AlphabetType> values
  {static} +AlphabetType STANDARD
  {static} +AlphabetType CUSTOM
}

"gc_wizard::utils::alphabets.dart::AlphabetType" o-- "gc_wizard::utils::alphabets.dart::AlphabetType"
"dart::core::Enum" <|-- "gc_wizard::utils::alphabets.dart::AlphabetType"

class "gc_wizard::utils::complex_return_types.dart::DoubleText" {
  +String text
  +double value
  +String toString()
}

class "gc_wizard::utils::complex_return_types.dart::IntegerText" {
  +String text
  +int value
}

class "gc_wizard::utils::complex_return_types.dart::BoolText" {
  +String text
  +bool value
}

class "gc_wizard::utils::complex_return_types.dart::IntegerListText" {
  +String text
  +List<int> value
}

class "gc_wizard::utils::complex_return_types.dart::Uint8ListText" {
  +String text
  +Uint8List value
}

"gc_wizard::utils::complex_return_types.dart::Uint8ListText" o-- "dart::typed_data::Uint8List"

class "gc_wizard::utils::complex_return_types.dart::DateTimeDuration" {
  +Duration duration
}

"gc_wizard::utils::complex_return_types.dart::DateTimeTimezone" <|-- "gc_wizard::utils::complex_return_types.dart::DateTimeDuration"

class "gc_wizard::utils::complex_return_types.dart::DateTimeTimezone" {
  +DateTime datetime
  +Duration timezone
}

class "gc_wizard::utils::complex_return_types.dart::DateTimeDouble" {
  +DateTime datetime
  +double value
}

class "gc_wizard::utils::complex_return_types.dart::KeyValueBase" {
  +Object? id
  +String key
  +String value
}

class "gc_wizard::utils::constants.dart::CryptMode" {
  +int index
  {static} +List<CryptMode> values
  {static} +CryptMode encrypt
  {static} +CryptMode decrypt
}

"gc_wizard::utils::constants.dart::CryptMode" o-- "gc_wizard::utils::constants.dart::CryptMode"
"dart::core::Enum" <|-- "gc_wizard::utils::constants.dart::CryptMode"

class "gc_wizard::utils::datetime_utils.dart::_CalendarType" {
  +int index
  {static} +List<_CalendarType> values
  {static} +_CalendarType JULIAN
  {static} +_CalendarType GREGORIAN
}

"gc_wizard::utils::datetime_utils.dart::_CalendarType" o-- "gc_wizard::utils::datetime_utils.dart::_CalendarType"
"dart::core::Enum" <|-- "gc_wizard::utils::datetime_utils.dart::_CalendarType"

class "gc_wizard::utils::file_utils::file_utils.dart::FileTypeInfo" {
  +List<String> extensions
  +List<List<int>>? magic_bytes
  +List<int>? magic_bytes_detail
  +int? magic_bytes_offset
  +List<String>? mime_types
  +FileClass file_class
  +String? uniform_type_identifier
}

"gc_wizard::utils::file_utils::file_utils.dart::FileTypeInfo" o-- "gc_wizard::utils::file_utils::file_utils.dart::FileClass"

class "gc_wizard::utils::file_utils::file_utils.dart::FileType" {
  +int index
  {static} +List<FileType> values
  {static} +FileType GCW
  {static} +FileType ZIP
  {static} -FileType _7Z
  {static} +FileType RAR
  {static} +FileType TAR
  {static} +FileType SEVEN_ZIP
  {static} +FileType GZIP
  {static} +FileType BZIP2
  {static} +FileType JPEG
  {static} +FileType PNG
  {static} +FileType GIF
  {static} +FileType TIFF
  {static} +FileType WEBP
  {static} +FileType WMV
  {static} +FileType WAV
  {static} +FileType MP3
  {static} +FileType OGG
  {static} +FileType SND
  {static} +FileType FDL
  {static} +FileType MIDI
  {static} +FileType PDF
  {static} +FileType EXE
  {static} +FileType BMP
  {static} +FileType TXT
  {static} +FileType JSON
  {static} +FileType GPX
  {static} +FileType KML
  {static} +FileType KMZ
  {static} +FileType LUAC
  {static} +FileType GWC
  {static} +FileType LUA
}

"gc_wizard::utils::file_utils::file_utils.dart::FileType" o-- "gc_wizard::utils::file_utils::file_utils.dart::FileType"
"dart::core::Enum" <|-- "gc_wizard::utils::file_utils::file_utils.dart::FileType"

class "gc_wizard::utils::file_utils::file_utils.dart::FileClass" {
  +int index
  {static} +List<FileClass> values
  {static} +FileClass IMAGE
  {static} +FileClass ARCHIVE
  {static} +FileClass SOUND
  {static} +FileClass DATA
  {static} +FileClass TEXT
  {static} +FileClass BINARY
}

"gc_wizard::utils::file_utils::file_utils.dart::FileClass" o-- "gc_wizard::utils::file_utils::file_utils.dart::FileClass"
"dart::core::Enum" <|-- "gc_wizard::utils::file_utils::file_utils.dart::FileClass"

class "gc_wizard::utils::file_utils::gcw_file.dart::GCWFile" {
  +String? path
  +String? name
  +List<GCWFile>? children
  +Uint8List bytes
  +FileType fileType
  +String extension
  +FileClass fileClass
  +String toString()
}

"gc_wizard::utils::file_utils::gcw_file.dart::GCWFile" o-- "dart::typed_data::Uint8List"
"gc_wizard::utils::file_utils::gcw_file.dart::GCWFile" o-- "gc_wizard::utils::file_utils::file_utils.dart::FileType"
"gc_wizard::utils::file_utils::gcw_file.dart::GCWFile" o-- "gc_wizard::utils::file_utils::file_utils.dart::FileClass"

class "gc_wizard::utils::json_utils.dart::JsonType" {
  +int index
  {static} +List<JsonType> values
  {static} +JsonType MAP
  {static} +JsonType ARRAY
  {static} +JsonType SIMPLE_TYPE
}

"gc_wizard::utils::json_utils.dart::JsonType" o-- "gc_wizard::utils::json_utils.dart::JsonType"
"dart::core::Enum" <|-- "gc_wizard::utils::json_utils.dart::JsonType"

class "gc_wizard::utils::ui_dependent_utils::file_widget_utils.dart::_SAVE_TYPE" {
  +int index
  {static} +List<_SAVE_TYPE> values
  {static} +_SAVE_TYPE STRING
  {static} +_SAVE_TYPE BYTE_DATA
}

"gc_wizard::utils::ui_dependent_utils::file_widget_utils.dart::_SAVE_TYPE" o-- "gc_wizard::utils::ui_dependent_utils::file_widget_utils.dart::_SAVE_TYPE"
"dart::core::Enum" <|-- "gc_wizard::utils::ui_dependent_utils::file_widget_utils.dart::_SAVE_TYPE"

class "gc_wizard::utils::ui_dependent_utils::image_utils::drawable_image_data.dart::DrawableImageData" {
  +List<String> lines
  +Map<String, int> colors
  +int bounds
  +double pointSize
}

class "gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderValue" {
  +String? text
  +Map<String, String>? variables
  +int? count
}

class "gc_wizard::utils::variable_string_expander.dart::VariableStringExpander" {
  -String _input
  -Map<String, String>? _substitutions
  +String? Function(String)? onAfterExpandedText
  +SendPort? sendAsyncPort
  +VariableStringExpanderBreakCondition breakCondition
  +bool orderAndUnique
  -List<List<String>> _expandedVariableGroups
  -List<String> _substitutionKeys
  -List<String> _variableGroups
  -int _countVariableGroups
  -String _variableGroup
  -List<VariableStringExpanderValue> _results
  -List<String> _uniqueResults
  -List<int> _variableValueIndexes
  -List<int> _countVariableValues
  -int _currentVariableIndex
  -int _countCombinations
  -int _variableGroupIndex
  -int _variableValueIndex
  -String? _result
  -List<String> _expandVariableGroup()
  -bool _setIndexes()
  -Map<String, String> _getCurrentVariables()
  -void _generateCartesianVariables()
  -void _substitute()
  +List<VariableStringExpanderValue> run()
}

"gc_wizard::utils::variable_string_expander.dart::VariableStringExpander" o-- "null::String Function(String)"
"gc_wizard::utils::variable_string_expander.dart::VariableStringExpander" o-- "dart::isolate::SendPort"
"gc_wizard::utils::variable_string_expander.dart::VariableStringExpander" o-- "gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderBreakCondition"

class "gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderBreakCondition" {
  +int index
  {static} +List<VariableStringExpanderBreakCondition> values
  {static} +VariableStringExpanderBreakCondition RUN_ALL
  {static} +VariableStringExpanderBreakCondition BREAK_ON_FIRST_FOUND
}

"gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderBreakCondition" o-- "gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderBreakCondition"
"dart::core::Enum" <|-- "gc_wizard::utils::variable_string_expander.dart::VariableStringExpanderBreakCondition"


@enduml